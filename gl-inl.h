
    void __cdecl glwrap_glAccum(GLenum op,GLfloat value)
    {
    
    glad_glAccum(op,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glAccum");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glAlphaFunc(GLenum func,GLclampf ref)
    {
    
    glad_glAlphaFunc(func,ref);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glAlphaFunc");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    GLboolean __cdecl glwrap_glAreTexturesResident(GLsizei n,const GLuint* textures,GLboolean* residences)
    {
    
    GLboolean ret = glad_glAreTexturesResident(n,textures,residences);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glAreTexturesResident");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	return ret;
    }

    void __cdecl glwrap_glArrayElement(GLint i)
    {
    
    glad_glArrayElement(i);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glArrayElement");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glBegin(GLenum mode)
    {
    
    glad_glBegin(mode);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glBegin");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glBindTexture(GLenum target,GLuint texture)
    {
    
    glad_glBindTexture(target,texture);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glBindTexture");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glBitmap(GLsizei width,GLsizei height,GLfloat xorig,GLfloat yorig,GLfloat xmove,GLfloat ymove,const GLubyte* bitmap)
    {
    
    glad_glBitmap(width,height,xorig,yorig,xmove,ymove,bitmap);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glBitmap");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glBlendFunc(GLenum sfactor,GLenum dfactor)
    {
    
    glad_glBlendFunc(sfactor,dfactor);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glBlendFunc");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glCallList(GLuint list)
    {
    
    glad_glCallList(list);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glCallList");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glCallLists(GLsizei n,GLenum type,const GLvoid* lists)
    {
    
    glad_glCallLists(n,type,lists);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glCallLists");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glClear(GLbitfield mask)
    {
    
    glad_glClear(mask);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glClear");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glClearAccum(GLfloat red,GLfloat green,GLfloat blue,GLfloat alpha)
    {
    
    glad_glClearAccum(red,green,blue,alpha);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glClearAccum");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glClearColor(GLclampf red,GLclampf green,GLclampf blue,GLclampf alpha)
    {
    
    glad_glClearColor(red,green,blue,alpha);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glClearColor");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glClearDepth(GLclampd depth)
    {
    
    glad_glClearDepth(depth);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glClearDepth");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glClearIndex(GLfloat c)
    {
    
    glad_glClearIndex(c);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glClearIndex");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glClearStencil(GLint s)
    {
    
    glad_glClearStencil(s);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glClearStencil");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glClipPlane(GLenum plane,const GLdouble* equation)
    {
    
    glad_glClipPlane(plane,equation);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glClipPlane");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glColor3b(GLbyte red,GLbyte green,GLbyte blue)
    {
    
    glad_glColor3b(red,green,blue);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glColor3b");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glColor3bv(const GLbyte* v)
    {
    
    glad_glColor3bv(v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glColor3bv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glColor3d(GLdouble red,GLdouble green,GLdouble blue)
    {
    
    glad_glColor3d(red,green,blue);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glColor3d");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glColor3dv(const GLdouble* v)
    {
    
    glad_glColor3dv(v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glColor3dv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glColor3f(GLfloat red,GLfloat green,GLfloat blue)
    {
    
    glad_glColor3f(red,green,blue);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glColor3f");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glColor3fv(const GLfloat* v)
    {
    
    glad_glColor3fv(v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glColor3fv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glColor3i(GLint red,GLint green,GLint blue)
    {
    
    glad_glColor3i(red,green,blue);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glColor3i");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glColor3iv(const GLint* v)
    {
    
    glad_glColor3iv(v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glColor3iv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glColor3s(GLshort red,GLshort green,GLshort blue)
    {
    
    glad_glColor3s(red,green,blue);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glColor3s");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glColor3sv(const GLshort* v)
    {
    
    glad_glColor3sv(v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glColor3sv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glColor3ub(GLubyte red,GLubyte green,GLubyte blue)
    {
    
    glad_glColor3ub(red,green,blue);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glColor3ub");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glColor3ubv(const GLubyte* v)
    {
    
    glad_glColor3ubv(v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glColor3ubv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glColor3ui(GLuint red,GLuint green,GLuint blue)
    {
    
    glad_glColor3ui(red,green,blue);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glColor3ui");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glColor3uiv(const GLuint* v)
    {
    
    glad_glColor3uiv(v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glColor3uiv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glColor3us(GLushort red,GLushort green,GLushort blue)
    {
    
    glad_glColor3us(red,green,blue);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glColor3us");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glColor3usv(const GLushort* v)
    {
    
    glad_glColor3usv(v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glColor3usv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glColor4b(GLbyte red,GLbyte green,GLbyte blue,GLbyte alpha)
    {
    
    glad_glColor4b(red,green,blue,alpha);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glColor4b");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glColor4bv(const GLbyte* v)
    {
    
    glad_glColor4bv(v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glColor4bv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glColor4d(GLdouble red,GLdouble green,GLdouble blue,GLdouble alpha)
    {
    
    glad_glColor4d(red,green,blue,alpha);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glColor4d");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glColor4dv(const GLdouble* v)
    {
    
    glad_glColor4dv(v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glColor4dv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glColor4f(GLfloat red,GLfloat green,GLfloat blue,GLfloat alpha)
    {
    
    glad_glColor4f(red,green,blue,alpha);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glColor4f");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glColor4fv(const GLfloat* v)
    {
    
    glad_glColor4fv(v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glColor4fv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glColor4i(GLint red,GLint green,GLint blue,GLint alpha)
    {
    
    glad_glColor4i(red,green,blue,alpha);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glColor4i");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glColor4iv(const GLint* v)
    {
    
    glad_glColor4iv(v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glColor4iv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glColor4s(GLshort red,GLshort green,GLshort blue,GLshort alpha)
    {
    
    glad_glColor4s(red,green,blue,alpha);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glColor4s");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glColor4sv(const GLshort* v)
    {
    
    glad_glColor4sv(v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glColor4sv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glColor4ub(GLubyte red,GLubyte green,GLubyte blue,GLubyte alpha)
    {
    
    glad_glColor4ub(red,green,blue,alpha);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glColor4ub");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glColor4ubv(const GLubyte* v)
    {
    
    glad_glColor4ubv(v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glColor4ubv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glColor4ui(GLuint red,GLuint green,GLuint blue,GLuint alpha)
    {
    
    glad_glColor4ui(red,green,blue,alpha);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glColor4ui");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glColor4uiv(const GLuint* v)
    {
    
    glad_glColor4uiv(v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glColor4uiv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glColor4us(GLushort red,GLushort green,GLushort blue,GLushort alpha)
    {
    
    glad_glColor4us(red,green,blue,alpha);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glColor4us");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glColor4usv(const GLushort* v)
    {
    
    glad_glColor4usv(v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glColor4usv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glColorMask(GLboolean red,GLboolean green,GLboolean blue,GLboolean alpha)
    {
    
    glad_glColorMask(red,green,blue,alpha);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glColorMask");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glColorMaterial(GLenum face,GLenum mode)
    {
    
    glad_glColorMaterial(face,mode);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glColorMaterial");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glColorPointer(GLint size,GLenum type,GLsizei stride,const GLvoid* pointer)
    {
    
    glad_glColorPointer(size,type,stride,pointer);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glColorPointer");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glCopyPixels(GLint x,GLint y,GLsizei width,GLsizei height,GLenum type)
    {
    
    glad_glCopyPixels(x,y,width,height,type);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glCopyPixels");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glCopyTexImage1D(GLenum target,GLint level,GLenum internalFormat,GLint x,GLint y,GLsizei width,GLint border)
    {
    
    glad_glCopyTexImage1D(target,level,internalFormat,x,y,width,border);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glCopyTexImage1D");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glCopyTexImage2D(GLenum target,GLint level,GLenum internalFormat,GLint x,GLint y,GLsizei width,GLsizei height,GLint border)
    {
    
    glad_glCopyTexImage2D(target,level,internalFormat,x,y,width,height,border);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glCopyTexImage2D");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glCopyTexSubImage1D(GLenum target,GLint level,GLint xoffset,GLint x,GLint y,GLsizei width)
    {
    
    glad_glCopyTexSubImage1D(target,level,xoffset,x,y,width);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glCopyTexSubImage1D");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glCopyTexSubImage2D(GLenum target,GLint level,GLint xoffset,GLint yoffset,GLint x,GLint y,GLsizei width,GLsizei height)
    {
    
    glad_glCopyTexSubImage2D(target,level,xoffset,yoffset,x,y,width,height);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glCopyTexSubImage2D");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glCullFace(GLenum mode)
    {
    
    glad_glCullFace(mode);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glCullFace");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glDeleteLists(GLuint list,GLsizei range)
    {
    
    glad_glDeleteLists(list,range);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glDeleteLists");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glDeleteTextures(GLsizei n,const GLuint* textures)
    {
    
    glad_glDeleteTextures(n,textures);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glDeleteTextures");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glDepthFunc(GLenum func)
    {
    
    glad_glDepthFunc(func);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glDepthFunc");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glDepthMask(GLboolean flag)
    {
    
    glad_glDepthMask(flag);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glDepthMask");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glDepthRange(GLclampd zNear,GLclampd zFar)
    {
    
    glad_glDepthRange(zNear,zFar);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glDepthRange");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glDisable(GLenum cap)
    {
    
    glad_glDisable(cap);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glDisable");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glDisableClientState(GLenum array)
    {
    
    glad_glDisableClientState(array);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glDisableClientState");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glDrawArrays(GLenum mode,GLint first,GLsizei count)
    {
    
    glad_glDrawArrays(mode,first,count);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glDrawArrays");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glDrawBuffer(GLenum mode)
    {
    
    glad_glDrawBuffer(mode);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glDrawBuffer");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glDrawElements(GLenum mode,GLsizei count,GLenum type,const GLvoid* indices)
    {
    
    glad_glDrawElements(mode,count,type,indices);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glDrawElements");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glDrawPixels(GLsizei width,GLsizei height,GLenum format,GLenum type,const GLvoid* pixels)
    {
    
    glad_glDrawPixels(width,height,format,type,pixels);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glDrawPixels");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glEdgeFlag(GLboolean flag)
    {
    
    glad_glEdgeFlag(flag);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glEdgeFlag");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glEdgeFlagPointer(GLsizei stride,const GLvoid* pointer)
    {
    
    glad_glEdgeFlagPointer(stride,pointer);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glEdgeFlagPointer");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glEdgeFlagv(const GLboolean* flag)
    {
    
    glad_glEdgeFlagv(flag);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glEdgeFlagv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glEnable(GLenum cap)
    {
    
    glad_glEnable(cap);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glEnable");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glEnableClientState(GLenum array)
    {
    
    glad_glEnableClientState(array);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glEnableClientState");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glEnd()
    {
    
    glad_glEnd();
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glEnd");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glEndList()
    {
    
    glad_glEndList();
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glEndList");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glEvalCoord1d(GLdouble u)
    {
    
    glad_glEvalCoord1d(u);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glEvalCoord1d");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glEvalCoord1dv(const GLdouble* u)
    {
    
    glad_glEvalCoord1dv(u);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glEvalCoord1dv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glEvalCoord1f(GLfloat u)
    {
    
    glad_glEvalCoord1f(u);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glEvalCoord1f");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glEvalCoord1fv(const GLfloat* u)
    {
    
    glad_glEvalCoord1fv(u);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glEvalCoord1fv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glEvalCoord2d(GLdouble u,GLdouble v)
    {
    
    glad_glEvalCoord2d(u,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glEvalCoord2d");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glEvalCoord2dv(const GLdouble* u)
    {
    
    glad_glEvalCoord2dv(u);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glEvalCoord2dv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glEvalCoord2f(GLfloat u,GLfloat v)
    {
    
    glad_glEvalCoord2f(u,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glEvalCoord2f");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glEvalCoord2fv(const GLfloat* u)
    {
    
    glad_glEvalCoord2fv(u);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glEvalCoord2fv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glEvalMesh1(GLenum mode,GLint i1,GLint i2)
    {
    
    glad_glEvalMesh1(mode,i1,i2);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glEvalMesh1");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glEvalMesh2(GLenum mode,GLint i1,GLint i2,GLint j1,GLint j2)
    {
    
    glad_glEvalMesh2(mode,i1,i2,j1,j2);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glEvalMesh2");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glEvalPoint1(GLint i)
    {
    
    glad_glEvalPoint1(i);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glEvalPoint1");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glEvalPoint2(GLint i,GLint j)
    {
    
    glad_glEvalPoint2(i,j);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glEvalPoint2");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glFeedbackBuffer(GLsizei size,GLenum type,GLfloat* buffer)
    {
    
    glad_glFeedbackBuffer(size,type,buffer);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glFeedbackBuffer");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glFinish()
    {
    
    glad_glFinish();
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glFinish");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glFlush()
    {
    
    glad_glFlush();
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glFlush");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glFogf(GLenum pname,GLfloat param)
    {
    
    glad_glFogf(pname,param);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glFogf");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glFogfv(GLenum pname,const GLfloat* params)
    {
    
    glad_glFogfv(pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glFogfv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glFogi(GLenum pname,GLint param)
    {
    
    glad_glFogi(pname,param);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glFogi");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glFogiv(GLenum pname,const GLint* params)
    {
    
    glad_glFogiv(pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glFogiv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glFrontFace(GLenum mode)
    {
    
    glad_glFrontFace(mode);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glFrontFace");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glFrustum(GLdouble left,GLdouble right,GLdouble bottom,GLdouble top,GLdouble zNear,GLdouble zFar)
    {
    
    glad_glFrustum(left,right,bottom,top,zNear,zFar);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glFrustum");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    GLuint __cdecl glwrap_glGenLists(GLsizei range)
    {
    
    GLuint ret = glad_glGenLists(range);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGenLists");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	return ret;
    }

    void __cdecl glwrap_glGenTextures(GLsizei n,GLuint* textures)
    {
    
    glad_glGenTextures(n,textures);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGenTextures");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetBooleanv(GLenum pname,GLboolean* params)
    {
    
    glad_glGetBooleanv(pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetBooleanv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetClipPlane(GLenum plane,GLdouble* equation)
    {
    
    glad_glGetClipPlane(plane,equation);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetClipPlane");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetDoublev(GLenum pname,GLdouble* params)
    {
    
    glad_glGetDoublev(pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetDoublev");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    GLenum __cdecl glwrap_glGetError()
    {
    
    GLenum ret = glad_glGetError();
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetError");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	return ret;
    }

    void __cdecl glwrap_glGetFloatv(GLenum pname,GLfloat* params)
    {
    
    glad_glGetFloatv(pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetFloatv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetIntegerv(GLenum pname,GLint* params)
    {
    
    glad_glGetIntegerv(pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetIntegerv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetLightfv(GLenum light,GLenum pname,GLfloat* params)
    {
    
    glad_glGetLightfv(light,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetLightfv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetLightiv(GLenum light,GLenum pname,GLint* params)
    {
    
    glad_glGetLightiv(light,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetLightiv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetMapdv(GLenum target,GLenum query,GLdouble* v)
    {
    
    glad_glGetMapdv(target,query,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetMapdv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetMapfv(GLenum target,GLenum query,GLfloat* v)
    {
    
    glad_glGetMapfv(target,query,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetMapfv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetMapiv(GLenum target,GLenum query,GLint* v)
    {
    
    glad_glGetMapiv(target,query,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetMapiv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetMaterialfv(GLenum face,GLenum pname,GLfloat* params)
    {
    
    glad_glGetMaterialfv(face,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetMaterialfv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetMaterialiv(GLenum face,GLenum pname,GLint* params)
    {
    
    glad_glGetMaterialiv(face,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetMaterialiv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetPixelMapfv(GLenum map,GLfloat* values)
    {
    
    glad_glGetPixelMapfv(map,values);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetPixelMapfv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetPixelMapuiv(GLenum map,GLuint* values)
    {
    
    glad_glGetPixelMapuiv(map,values);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetPixelMapuiv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetPixelMapusv(GLenum map,GLushort* values)
    {
    
    glad_glGetPixelMapusv(map,values);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetPixelMapusv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetPointerv(GLenum pname,GLvoid** params)
    {
    
    glad_glGetPointerv(pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetPointerv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetPolygonStipple(GLubyte* mask)
    {
    
    glad_glGetPolygonStipple(mask);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetPolygonStipple");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    const GLubyte * __cdecl glwrap_glGetString(GLenum name)
    {
    
    const GLubyte * ret = glad_glGetString(name);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetString");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	return ret;
    }

    void __cdecl glwrap_glGetTexEnvfv(GLenum target,GLenum pname,GLfloat* params)
    {
    
    glad_glGetTexEnvfv(target,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetTexEnvfv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetTexEnviv(GLenum target,GLenum pname,GLint* params)
    {
    
    glad_glGetTexEnviv(target,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetTexEnviv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetTexGendv(GLenum coord,GLenum pname,GLdouble* params)
    {
    
    glad_glGetTexGendv(coord,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetTexGendv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetTexGenfv(GLenum coord,GLenum pname,GLfloat* params)
    {
    
    glad_glGetTexGenfv(coord,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetTexGenfv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetTexGeniv(GLenum coord,GLenum pname,GLint* params)
    {
    
    glad_glGetTexGeniv(coord,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetTexGeniv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetTexImage(GLenum target,GLint level,GLenum format,GLenum type,GLvoid* pixels)
    {
    
    glad_glGetTexImage(target,level,format,type,pixels);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetTexImage");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetTexLevelParameterfv(GLenum target,GLint level,GLenum pname,GLfloat* params)
    {
    
    glad_glGetTexLevelParameterfv(target,level,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetTexLevelParameterfv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetTexLevelParameteriv(GLenum target,GLint level,GLenum pname,GLint* params)
    {
    
    glad_glGetTexLevelParameteriv(target,level,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetTexLevelParameteriv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetTexParameterfv(GLenum target,GLenum pname,GLfloat* params)
    {
    
    glad_glGetTexParameterfv(target,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetTexParameterfv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetTexParameteriv(GLenum target,GLenum pname,GLint* params)
    {
    
    glad_glGetTexParameteriv(target,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetTexParameteriv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glHint(GLenum target,GLenum mode)
    {
    
    glad_glHint(target,mode);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glHint");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glIndexMask(GLuint mask)
    {
    
    glad_glIndexMask(mask);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glIndexMask");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glIndexPointer(GLenum type,GLsizei stride,const GLvoid* pointer)
    {
    
    glad_glIndexPointer(type,stride,pointer);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glIndexPointer");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glIndexd(GLdouble c)
    {
    
    glad_glIndexd(c);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glIndexd");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glIndexdv(const GLdouble* c)
    {
    
    glad_glIndexdv(c);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glIndexdv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glIndexf(GLfloat c)
    {
    
    glad_glIndexf(c);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glIndexf");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glIndexfv(const GLfloat* c)
    {
    
    glad_glIndexfv(c);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glIndexfv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glIndexi(GLint c)
    {
    
    glad_glIndexi(c);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glIndexi");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glIndexiv(const GLint* c)
    {
    
    glad_glIndexiv(c);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glIndexiv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glIndexs(GLshort c)
    {
    
    glad_glIndexs(c);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glIndexs");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glIndexsv(const GLshort* c)
    {
    
    glad_glIndexsv(c);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glIndexsv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glIndexub(GLubyte c)
    {
    
    glad_glIndexub(c);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glIndexub");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glIndexubv(const GLubyte* c)
    {
    
    glad_glIndexubv(c);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glIndexubv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glInitNames()
    {
    
    glad_glInitNames();
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glInitNames");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glInterleavedArrays(GLenum format,GLsizei stride,const GLvoid* pointer)
    {
    
    glad_glInterleavedArrays(format,stride,pointer);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glInterleavedArrays");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    GLboolean __cdecl glwrap_glIsEnabled(GLenum cap)
    {
    
    GLboolean ret = glad_glIsEnabled(cap);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glIsEnabled");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	return ret;
    }

    GLboolean __cdecl glwrap_glIsList(GLuint list)
    {
    
    GLboolean ret = glad_glIsList(list);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glIsList");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	return ret;
    }

    GLboolean __cdecl glwrap_glIsTexture(GLuint texture)
    {
    
    GLboolean ret = glad_glIsTexture(texture);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glIsTexture");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	return ret;
    }

    void __cdecl glwrap_glLightModelf(GLenum pname,GLfloat param)
    {
    
    glad_glLightModelf(pname,param);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glLightModelf");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glLightModelfv(GLenum pname,const GLfloat* params)
    {
    
    glad_glLightModelfv(pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glLightModelfv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glLightModeli(GLenum pname,GLint param)
    {
    
    glad_glLightModeli(pname,param);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glLightModeli");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glLightModeliv(GLenum pname,const GLint* params)
    {
    
    glad_glLightModeliv(pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glLightModeliv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glLightf(GLenum light,GLenum pname,GLfloat param)
    {
    
    glad_glLightf(light,pname,param);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glLightf");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glLightfv(GLenum light,GLenum pname,const GLfloat* params)
    {
    
    glad_glLightfv(light,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glLightfv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glLighti(GLenum light,GLenum pname,GLint param)
    {
    
    glad_glLighti(light,pname,param);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glLighti");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glLightiv(GLenum light,GLenum pname,const GLint* params)
    {
    
    glad_glLightiv(light,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glLightiv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glLineStipple(GLint factor,GLushort pattern)
    {
    
    glad_glLineStipple(factor,pattern);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glLineStipple");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glLineWidth(GLfloat width)
    {
    
    glad_glLineWidth(width);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glLineWidth");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glListBase(GLuint base)
    {
    
    glad_glListBase(base);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glListBase");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glLoadIdentity()
    {
    
    glad_glLoadIdentity();
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glLoadIdentity");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glLoadMatrixd(const GLdouble* m)
    {
    
    glad_glLoadMatrixd(m);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glLoadMatrixd");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glLoadMatrixf(const GLfloat* m)
    {
    
    glad_glLoadMatrixf(m);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glLoadMatrixf");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glLoadName(GLuint name)
    {
    
    glad_glLoadName(name);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glLoadName");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glLogicOp(GLenum opcode)
    {
    
    glad_glLogicOp(opcode);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glLogicOp");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMap1d(GLenum target,GLdouble u1,GLdouble u2,GLint stride,GLint order,const GLdouble* points)
    {
    
    glad_glMap1d(target,u1,u2,stride,order,points);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMap1d");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMap1f(GLenum target,GLfloat u1,GLfloat u2,GLint stride,GLint order,const GLfloat* points)
    {
    
    glad_glMap1f(target,u1,u2,stride,order,points);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMap1f");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMap2d(GLenum target,GLdouble u1,GLdouble u2,GLint ustride,GLint uorder,GLdouble v1,GLdouble v2,GLint vstride,GLint vorder,const GLdouble* points)
    {
    
    glad_glMap2d(target,u1,u2,ustride,uorder,v1,v2,vstride,vorder,points);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMap2d");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMap2f(GLenum target,GLfloat u1,GLfloat u2,GLint ustride,GLint uorder,GLfloat v1,GLfloat v2,GLint vstride,GLint vorder,const GLfloat* points)
    {
    
    glad_glMap2f(target,u1,u2,ustride,uorder,v1,v2,vstride,vorder,points);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMap2f");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMapGrid1d(GLint un,GLdouble u1,GLdouble u2)
    {
    
    glad_glMapGrid1d(un,u1,u2);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMapGrid1d");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMapGrid1f(GLint un,GLfloat u1,GLfloat u2)
    {
    
    glad_glMapGrid1f(un,u1,u2);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMapGrid1f");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMapGrid2d(GLint un,GLdouble u1,GLdouble u2,GLint vn,GLdouble v1,GLdouble v2)
    {
    
    glad_glMapGrid2d(un,u1,u2,vn,v1,v2);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMapGrid2d");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMapGrid2f(GLint un,GLfloat u1,GLfloat u2,GLint vn,GLfloat v1,GLfloat v2)
    {
    
    glad_glMapGrid2f(un,u1,u2,vn,v1,v2);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMapGrid2f");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMaterialf(GLenum face,GLenum pname,GLfloat param)
    {
    
    glad_glMaterialf(face,pname,param);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMaterialf");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMaterialfv(GLenum face,GLenum pname,const GLfloat* params)
    {
    
    glad_glMaterialfv(face,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMaterialfv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMateriali(GLenum face,GLenum pname,GLint param)
    {
    
    glad_glMateriali(face,pname,param);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMateriali");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMaterialiv(GLenum face,GLenum pname,const GLint* params)
    {
    
    glad_glMaterialiv(face,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMaterialiv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMatrixMode(GLenum mode)
    {
    
    glad_glMatrixMode(mode);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMatrixMode");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMultMatrixd(const GLdouble* m)
    {
    
    glad_glMultMatrixd(m);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMultMatrixd");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMultMatrixf(const GLfloat* m)
    {
    
    glad_glMultMatrixf(m);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMultMatrixf");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glNewList(GLuint list,GLenum mode)
    {
    
    glad_glNewList(list,mode);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glNewList");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glNormal3b(GLbyte nx,GLbyte ny,GLbyte nz)
    {
    
    glad_glNormal3b(nx,ny,nz);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glNormal3b");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glNormal3bv(const GLbyte* v)
    {
    
    glad_glNormal3bv(v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glNormal3bv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glNormal3d(GLdouble nx,GLdouble ny,GLdouble nz)
    {
    
    glad_glNormal3d(nx,ny,nz);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glNormal3d");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glNormal3dv(const GLdouble* v)
    {
    
    glad_glNormal3dv(v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glNormal3dv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glNormal3f(GLfloat nx,GLfloat ny,GLfloat nz)
    {
    
    glad_glNormal3f(nx,ny,nz);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glNormal3f");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glNormal3fv(const GLfloat* v)
    {
    
    glad_glNormal3fv(v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glNormal3fv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glNormal3i(GLint nx,GLint ny,GLint nz)
    {
    
    glad_glNormal3i(nx,ny,nz);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glNormal3i");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glNormal3iv(const GLint* v)
    {
    
    glad_glNormal3iv(v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glNormal3iv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glNormal3s(GLshort nx,GLshort ny,GLshort nz)
    {
    
    glad_glNormal3s(nx,ny,nz);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glNormal3s");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glNormal3sv(const GLshort* v)
    {
    
    glad_glNormal3sv(v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glNormal3sv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glNormalPointer(GLenum type,GLsizei stride,const GLvoid* pointer)
    {
    
    glad_glNormalPointer(type,stride,pointer);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glNormalPointer");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glOrtho(GLdouble left,GLdouble right,GLdouble bottom,GLdouble top,GLdouble zNear,GLdouble zFar)
    {
    
    glad_glOrtho(left,right,bottom,top,zNear,zFar);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glOrtho");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glPassThrough(GLfloat token)
    {
    
    glad_glPassThrough(token);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glPassThrough");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glPixelMapfv(GLenum map,GLsizei mapsize,const GLfloat* values)
    {
    
    glad_glPixelMapfv(map,mapsize,values);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glPixelMapfv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glPixelMapuiv(GLenum map,GLsizei mapsize,const GLuint* values)
    {
    
    glad_glPixelMapuiv(map,mapsize,values);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glPixelMapuiv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glPixelMapusv(GLenum map,GLsizei mapsize,const GLushort* values)
    {
    
    glad_glPixelMapusv(map,mapsize,values);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glPixelMapusv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glPixelStoref(GLenum pname,GLfloat param)
    {
    
    glad_glPixelStoref(pname,param);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glPixelStoref");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glPixelStorei(GLenum pname,GLint param)
    {
    
    glad_glPixelStorei(pname,param);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glPixelStorei");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glPixelTransferf(GLenum pname,GLfloat param)
    {
    
    glad_glPixelTransferf(pname,param);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glPixelTransferf");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glPixelTransferi(GLenum pname,GLint param)
    {
    
    glad_glPixelTransferi(pname,param);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glPixelTransferi");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glPixelZoom(GLfloat xfactor,GLfloat yfactor)
    {
    
    glad_glPixelZoom(xfactor,yfactor);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glPixelZoom");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glPointSize(GLfloat size)
    {
    
    glad_glPointSize(size);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glPointSize");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glPolygonMode(GLenum face,GLenum mode)
    {
    
    glad_glPolygonMode(face,mode);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glPolygonMode");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glPolygonOffset(GLfloat factor,GLfloat units)
    {
    
    glad_glPolygonOffset(factor,units);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glPolygonOffset");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glPolygonStipple(const GLubyte* mask)
    {
    
    glad_glPolygonStipple(mask);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glPolygonStipple");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glPopAttrib()
    {
    
    glad_glPopAttrib();
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glPopAttrib");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glPopClientAttrib()
    {
    
    glad_glPopClientAttrib();
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glPopClientAttrib");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glPopMatrix()
    {
    
    glad_glPopMatrix();
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glPopMatrix");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glPopName()
    {
    
    glad_glPopName();
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glPopName");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glPrioritizeTextures(GLsizei n,const GLuint* textures,const GLclampf* priorities)
    {
    
    glad_glPrioritizeTextures(n,textures,priorities);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glPrioritizeTextures");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glPushAttrib(GLbitfield mask)
    {
    
    glad_glPushAttrib(mask);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glPushAttrib");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glPushClientAttrib(GLbitfield mask)
    {
    
    glad_glPushClientAttrib(mask);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glPushClientAttrib");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glPushMatrix()
    {
    
    glad_glPushMatrix();
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glPushMatrix");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glPushName(GLuint name)
    {
    
    glad_glPushName(name);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glPushName");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glRasterPos2d(GLdouble x,GLdouble y)
    {
    
    glad_glRasterPos2d(x,y);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glRasterPos2d");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glRasterPos2dv(const GLdouble* v)
    {
    
    glad_glRasterPos2dv(v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glRasterPos2dv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glRasterPos2f(GLfloat x,GLfloat y)
    {
    
    glad_glRasterPos2f(x,y);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glRasterPos2f");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glRasterPos2fv(const GLfloat* v)
    {
    
    glad_glRasterPos2fv(v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glRasterPos2fv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glRasterPos2i(GLint x,GLint y)
    {
    
    glad_glRasterPos2i(x,y);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glRasterPos2i");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glRasterPos2iv(const GLint* v)
    {
    
    glad_glRasterPos2iv(v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glRasterPos2iv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glRasterPos2s(GLshort x,GLshort y)
    {
    
    glad_glRasterPos2s(x,y);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glRasterPos2s");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glRasterPos2sv(const GLshort* v)
    {
    
    glad_glRasterPos2sv(v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glRasterPos2sv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glRasterPos3d(GLdouble x,GLdouble y,GLdouble z)
    {
    
    glad_glRasterPos3d(x,y,z);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glRasterPos3d");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glRasterPos3dv(const GLdouble* v)
    {
    
    glad_glRasterPos3dv(v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glRasterPos3dv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glRasterPos3f(GLfloat x,GLfloat y,GLfloat z)
    {
    
    glad_glRasterPos3f(x,y,z);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glRasterPos3f");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glRasterPos3fv(const GLfloat* v)
    {
    
    glad_glRasterPos3fv(v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glRasterPos3fv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glRasterPos3i(GLint x,GLint y,GLint z)
    {
    
    glad_glRasterPos3i(x,y,z);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glRasterPos3i");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glRasterPos3iv(const GLint* v)
    {
    
    glad_glRasterPos3iv(v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glRasterPos3iv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glRasterPos3s(GLshort x,GLshort y,GLshort z)
    {
    
    glad_glRasterPos3s(x,y,z);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glRasterPos3s");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glRasterPos3sv(const GLshort* v)
    {
    
    glad_glRasterPos3sv(v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glRasterPos3sv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glRasterPos4d(GLdouble x,GLdouble y,GLdouble z,GLdouble w)
    {
    
    glad_glRasterPos4d(x,y,z,w);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glRasterPos4d");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glRasterPos4dv(const GLdouble* v)
    {
    
    glad_glRasterPos4dv(v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glRasterPos4dv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glRasterPos4f(GLfloat x,GLfloat y,GLfloat z,GLfloat w)
    {
    
    glad_glRasterPos4f(x,y,z,w);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glRasterPos4f");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glRasterPos4fv(const GLfloat* v)
    {
    
    glad_glRasterPos4fv(v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glRasterPos4fv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glRasterPos4i(GLint x,GLint y,GLint z,GLint w)
    {
    
    glad_glRasterPos4i(x,y,z,w);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glRasterPos4i");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glRasterPos4iv(const GLint* v)
    {
    
    glad_glRasterPos4iv(v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glRasterPos4iv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glRasterPos4s(GLshort x,GLshort y,GLshort z,GLshort w)
    {
    
    glad_glRasterPos4s(x,y,z,w);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glRasterPos4s");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glRasterPos4sv(const GLshort* v)
    {
    
    glad_glRasterPos4sv(v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glRasterPos4sv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glReadBuffer(GLenum mode)
    {
    
    glad_glReadBuffer(mode);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glReadBuffer");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glReadPixels(GLint x,GLint y,GLsizei width,GLsizei height,GLenum format,GLenum type,GLvoid* pixels)
    {
    
    glad_glReadPixels(x,y,width,height,format,type,pixels);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glReadPixels");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glRectd(GLdouble x1,GLdouble y1,GLdouble x2,GLdouble y2)
    {
    
    glad_glRectd(x1,y1,x2,y2);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glRectd");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glRectdv(const GLdouble* v1,const GLdouble* v2)
    {
    
    glad_glRectdv(v1,v2);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glRectdv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glRectf(GLfloat x1,GLfloat y1,GLfloat x2,GLfloat y2)
    {
    
    glad_glRectf(x1,y1,x2,y2);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glRectf");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glRectfv(const GLfloat* v1,const GLfloat* v2)
    {
    
    glad_glRectfv(v1,v2);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glRectfv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glRecti(GLint x1,GLint y1,GLint x2,GLint y2)
    {
    
    glad_glRecti(x1,y1,x2,y2);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glRecti");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glRectiv(const GLint* v1,const GLint* v2)
    {
    
    glad_glRectiv(v1,v2);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glRectiv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glRects(GLshort x1,GLshort y1,GLshort x2,GLshort y2)
    {
    
    glad_glRects(x1,y1,x2,y2);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glRects");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glRectsv(const GLshort* v1,const GLshort* v2)
    {
    
    glad_glRectsv(v1,v2);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glRectsv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    GLint __cdecl glwrap_glRenderMode(GLenum mode)
    {
    
    GLint ret = glad_glRenderMode(mode);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glRenderMode");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	return ret;
    }

    void __cdecl glwrap_glRotated(GLdouble angle,GLdouble x,GLdouble y,GLdouble z)
    {
    
    glad_glRotated(angle,x,y,z);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glRotated");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glRotatef(GLfloat angle,GLfloat x,GLfloat y,GLfloat z)
    {
    
    glad_glRotatef(angle,x,y,z);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glRotatef");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glScaled(GLdouble x,GLdouble y,GLdouble z)
    {
    
    glad_glScaled(x,y,z);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glScaled");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glScalef(GLfloat x,GLfloat y,GLfloat z)
    {
    
    glad_glScalef(x,y,z);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glScalef");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glScissor(GLint x,GLint y,GLsizei width,GLsizei height)
    {
    
    glad_glScissor(x,y,width,height);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glScissor");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glSelectBuffer(GLsizei size,GLuint* buffer)
    {
    
    glad_glSelectBuffer(size,buffer);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glSelectBuffer");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glShadeModel(GLenum mode)
    {
    
    glad_glShadeModel(mode);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glShadeModel");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glStencilFunc(GLenum func,GLint ref,GLuint mask)
    {
    
    glad_glStencilFunc(func,ref,mask);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glStencilFunc");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glStencilMask(GLuint mask)
    {
    
    glad_glStencilMask(mask);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glStencilMask");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glStencilOp(GLenum fail,GLenum zfail,GLenum zpass)
    {
    
    glad_glStencilOp(fail,zfail,zpass);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glStencilOp");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTexCoord1d(GLdouble s)
    {
    
    glad_glTexCoord1d(s);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTexCoord1d");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTexCoord1dv(const GLdouble* v)
    {
    
    glad_glTexCoord1dv(v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTexCoord1dv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTexCoord1f(GLfloat s)
    {
    
    glad_glTexCoord1f(s);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTexCoord1f");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTexCoord1fv(const GLfloat* v)
    {
    
    glad_glTexCoord1fv(v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTexCoord1fv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTexCoord1i(GLint s)
    {
    
    glad_glTexCoord1i(s);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTexCoord1i");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTexCoord1iv(const GLint* v)
    {
    
    glad_glTexCoord1iv(v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTexCoord1iv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTexCoord1s(GLshort s)
    {
    
    glad_glTexCoord1s(s);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTexCoord1s");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTexCoord1sv(const GLshort* v)
    {
    
    glad_glTexCoord1sv(v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTexCoord1sv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTexCoord2d(GLdouble s,GLdouble t)
    {
    
    glad_glTexCoord2d(s,t);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTexCoord2d");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTexCoord2dv(const GLdouble* v)
    {
    
    glad_glTexCoord2dv(v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTexCoord2dv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTexCoord2f(GLfloat s,GLfloat t)
    {
    
    glad_glTexCoord2f(s,t);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTexCoord2f");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTexCoord2fv(const GLfloat* v)
    {
    
    glad_glTexCoord2fv(v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTexCoord2fv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTexCoord2i(GLint s,GLint t)
    {
    
    glad_glTexCoord2i(s,t);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTexCoord2i");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTexCoord2iv(const GLint* v)
    {
    
    glad_glTexCoord2iv(v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTexCoord2iv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTexCoord2s(GLshort s,GLshort t)
    {
    
    glad_glTexCoord2s(s,t);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTexCoord2s");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTexCoord2sv(const GLshort* v)
    {
    
    glad_glTexCoord2sv(v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTexCoord2sv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTexCoord3d(GLdouble s,GLdouble t,GLdouble r)
    {
    
    glad_glTexCoord3d(s,t,r);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTexCoord3d");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTexCoord3dv(const GLdouble* v)
    {
    
    glad_glTexCoord3dv(v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTexCoord3dv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTexCoord3f(GLfloat s,GLfloat t,GLfloat r)
    {
    
    glad_glTexCoord3f(s,t,r);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTexCoord3f");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTexCoord3fv(const GLfloat* v)
    {
    
    glad_glTexCoord3fv(v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTexCoord3fv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTexCoord3i(GLint s,GLint t,GLint r)
    {
    
    glad_glTexCoord3i(s,t,r);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTexCoord3i");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTexCoord3iv(const GLint* v)
    {
    
    glad_glTexCoord3iv(v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTexCoord3iv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTexCoord3s(GLshort s,GLshort t,GLshort r)
    {
    
    glad_glTexCoord3s(s,t,r);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTexCoord3s");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTexCoord3sv(const GLshort* v)
    {
    
    glad_glTexCoord3sv(v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTexCoord3sv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTexCoord4d(GLdouble s,GLdouble t,GLdouble r,GLdouble q)
    {
    
    glad_glTexCoord4d(s,t,r,q);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTexCoord4d");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTexCoord4dv(const GLdouble* v)
    {
    
    glad_glTexCoord4dv(v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTexCoord4dv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTexCoord4f(GLfloat s,GLfloat t,GLfloat r,GLfloat q)
    {
    
    glad_glTexCoord4f(s,t,r,q);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTexCoord4f");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTexCoord4fv(const GLfloat* v)
    {
    
    glad_glTexCoord4fv(v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTexCoord4fv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTexCoord4i(GLint s,GLint t,GLint r,GLint q)
    {
    
    glad_glTexCoord4i(s,t,r,q);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTexCoord4i");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTexCoord4iv(const GLint* v)
    {
    
    glad_glTexCoord4iv(v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTexCoord4iv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTexCoord4s(GLshort s,GLshort t,GLshort r,GLshort q)
    {
    
    glad_glTexCoord4s(s,t,r,q);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTexCoord4s");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTexCoord4sv(const GLshort* v)
    {
    
    glad_glTexCoord4sv(v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTexCoord4sv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTexCoordPointer(GLint size,GLenum type,GLsizei stride,const GLvoid* pointer)
    {
    
    glad_glTexCoordPointer(size,type,stride,pointer);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTexCoordPointer");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTexEnvf(GLenum target,GLenum pname,GLfloat param)
    {
    
    glad_glTexEnvf(target,pname,param);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTexEnvf");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTexEnvfv(GLenum target,GLenum pname,const GLfloat* params)
    {
    
    glad_glTexEnvfv(target,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTexEnvfv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTexEnvi(GLenum target,GLenum pname,GLint param)
    {
    
    glad_glTexEnvi(target,pname,param);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTexEnvi");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTexEnviv(GLenum target,GLenum pname,const GLint* params)
    {
    
    glad_glTexEnviv(target,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTexEnviv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTexGend(GLenum coord,GLenum pname,GLdouble param)
    {
    
    glad_glTexGend(coord,pname,param);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTexGend");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTexGendv(GLenum coord,GLenum pname,const GLdouble* params)
    {
    
    glad_glTexGendv(coord,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTexGendv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTexGenf(GLenum coord,GLenum pname,GLfloat param)
    {
    
    glad_glTexGenf(coord,pname,param);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTexGenf");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTexGenfv(GLenum coord,GLenum pname,const GLfloat* params)
    {
    
    glad_glTexGenfv(coord,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTexGenfv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTexGeni(GLenum coord,GLenum pname,GLint param)
    {
    
    glad_glTexGeni(coord,pname,param);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTexGeni");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTexGeniv(GLenum coord,GLenum pname,const GLint* params)
    {
    
    glad_glTexGeniv(coord,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTexGeniv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTexImage1D(GLenum target,GLint level,GLint internalformat,GLsizei width,GLint border,GLenum format,GLenum type,const GLvoid* pixels)
    {
    
    glad_glTexImage1D(target,level,internalformat,width,border,format,type,pixels);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTexImage1D");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTexImage2D(GLenum target,GLint level,GLint internalformat,GLsizei width,GLsizei height,GLint border,GLenum format,GLenum type,const GLvoid* pixels)
    {
    
    glad_glTexImage2D(target,level,internalformat,width,height,border,format,type,pixels);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTexImage2D");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTexParameterf(GLenum target,GLenum pname,GLfloat param)
    {
    
    glad_glTexParameterf(target,pname,param);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTexParameterf");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTexParameterfv(GLenum target,GLenum pname,const GLfloat* params)
    {
    
    glad_glTexParameterfv(target,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTexParameterfv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTexParameteri(GLenum target,GLenum pname,GLint param)
    {
    
    glad_glTexParameteri(target,pname,param);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTexParameteri");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTexParameteriv(GLenum target,GLenum pname,const GLint* params)
    {
    
    glad_glTexParameteriv(target,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTexParameteriv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTexSubImage1D(GLenum target,GLint level,GLint xoffset,GLsizei width,GLenum format,GLenum type,const GLvoid* pixels)
    {
    
    glad_glTexSubImage1D(target,level,xoffset,width,format,type,pixels);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTexSubImage1D");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTexSubImage2D(GLenum target,GLint level,GLint xoffset,GLint yoffset,GLsizei width,GLsizei height,GLenum format,GLenum type,const GLvoid* pixels)
    {
    
    glad_glTexSubImage2D(target,level,xoffset,yoffset,width,height,format,type,pixels);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTexSubImage2D");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTranslated(GLdouble x,GLdouble y,GLdouble z)
    {
    
    glad_glTranslated(x,y,z);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTranslated");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTranslatef(GLfloat x,GLfloat y,GLfloat z)
    {
    
    glad_glTranslatef(x,y,z);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTranslatef");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertex2d(GLdouble x,GLdouble y)
    {
    
    glad_glVertex2d(x,y);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertex2d");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertex2dv(const GLdouble* v)
    {
    
    glad_glVertex2dv(v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertex2dv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertex2f(GLfloat x,GLfloat y)
    {
    
    glad_glVertex2f(x,y);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertex2f");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertex2fv(const GLfloat* v)
    {
    
    glad_glVertex2fv(v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertex2fv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertex2i(GLint x,GLint y)
    {
    
    glad_glVertex2i(x,y);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertex2i");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertex2iv(const GLint* v)
    {
    
    glad_glVertex2iv(v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertex2iv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertex2s(GLshort x,GLshort y)
    {
    
    glad_glVertex2s(x,y);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertex2s");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertex2sv(const GLshort* v)
    {
    
    glad_glVertex2sv(v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertex2sv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertex3d(GLdouble x,GLdouble y,GLdouble z)
    {
    
    glad_glVertex3d(x,y,z);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertex3d");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertex3dv(const GLdouble* v)
    {
    
    glad_glVertex3dv(v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertex3dv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertex3f(GLfloat x,GLfloat y,GLfloat z)
    {
    
    glad_glVertex3f(x,y,z);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertex3f");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertex3fv(const GLfloat* v)
    {
    
    glad_glVertex3fv(v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertex3fv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertex3i(GLint x,GLint y,GLint z)
    {
    
    glad_glVertex3i(x,y,z);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertex3i");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertex3iv(const GLint* v)
    {
    
    glad_glVertex3iv(v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertex3iv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertex3s(GLshort x,GLshort y,GLshort z)
    {
    
    glad_glVertex3s(x,y,z);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertex3s");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertex3sv(const GLshort* v)
    {
    
    glad_glVertex3sv(v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertex3sv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertex4d(GLdouble x,GLdouble y,GLdouble z,GLdouble w)
    {
    
    glad_glVertex4d(x,y,z,w);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertex4d");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertex4dv(const GLdouble* v)
    {
    
    glad_glVertex4dv(v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertex4dv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertex4f(GLfloat x,GLfloat y,GLfloat z,GLfloat w)
    {
    
    glad_glVertex4f(x,y,z,w);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertex4f");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertex4fv(const GLfloat* v)
    {
    
    glad_glVertex4fv(v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertex4fv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertex4i(GLint x,GLint y,GLint z,GLint w)
    {
    
    glad_glVertex4i(x,y,z,w);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertex4i");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertex4iv(const GLint* v)
    {
    
    glad_glVertex4iv(v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertex4iv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertex4s(GLshort x,GLshort y,GLshort z,GLshort w)
    {
    
    glad_glVertex4s(x,y,z,w);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertex4s");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertex4sv(const GLshort* v)
    {
    
    glad_glVertex4sv(v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertex4sv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexPointer(GLint size,GLenum type,GLsizei stride,const GLvoid* pointer)
    {
    
    glad_glVertexPointer(size,type,stride,pointer);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexPointer");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glViewport(GLint x,GLint y,GLsizei width,GLsizei height)
    {
    
    glad_glViewport(x,y,width,height);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glViewport");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glDrawRangeElements(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void* indices)
    {
    
    glad_glDrawRangeElements(mode,start,end,count,type,indices);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glDrawRangeElements");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTexImage3D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void* pixels)
    {
    
    glad_glTexImage3D(target,level,internalformat,width,height,depth,border,format,type,pixels);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTexImage3D");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void* pixels)
    {
    
    glad_glTexSubImage3D(target,level,xoffset,yoffset,zoffset,width,height,depth,format,type,pixels);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTexSubImage3D");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glCopyTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)
    {
    
    glad_glCopyTexSubImage3D(target,level,xoffset,yoffset,zoffset,x,y,width,height);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glCopyTexSubImage3D");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glActiveTexture(GLenum texture)
    {
    
    glad_glActiveTexture(texture);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glActiveTexture");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glSampleCoverage(GLfloat value, GLboolean invert)
    {
    
    glad_glSampleCoverage(value,invert);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glSampleCoverage");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glCompressedTexImage3D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void* data)
    {
    
    glad_glCompressedTexImage3D(target,level,internalformat,width,height,depth,border,imageSize,data);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glCompressedTexImage3D");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glCompressedTexImage2D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void* data)
    {
    
    glad_glCompressedTexImage2D(target,level,internalformat,width,height,border,imageSize,data);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glCompressedTexImage2D");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glCompressedTexImage1D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void* data)
    {
    
    glad_glCompressedTexImage1D(target,level,internalformat,width,border,imageSize,data);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glCompressedTexImage1D");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glCompressedTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void* data)
    {
    
    glad_glCompressedTexSubImage3D(target,level,xoffset,yoffset,zoffset,width,height,depth,format,imageSize,data);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glCompressedTexSubImage3D");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glCompressedTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void* data)
    {
    
    glad_glCompressedTexSubImage2D(target,level,xoffset,yoffset,width,height,format,imageSize,data);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glCompressedTexSubImage2D");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glCompressedTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void* data)
    {
    
    glad_glCompressedTexSubImage1D(target,level,xoffset,width,format,imageSize,data);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glCompressedTexSubImage1D");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetCompressedTexImage(GLenum target, GLint level, void* img)
    {
    
    glad_glGetCompressedTexImage(target,level,img);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetCompressedTexImage");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glClientActiveTexture(GLenum texture)
    {
    
    glad_glClientActiveTexture(texture);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glClientActiveTexture");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMultiTexCoord1d(GLenum target, GLdouble s)
    {
    
    glad_glMultiTexCoord1d(target,s);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMultiTexCoord1d");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMultiTexCoord1dv(GLenum target, const GLdouble* v)
    {
    
    glad_glMultiTexCoord1dv(target,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMultiTexCoord1dv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMultiTexCoord1f(GLenum target, GLfloat s)
    {
    
    glad_glMultiTexCoord1f(target,s);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMultiTexCoord1f");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMultiTexCoord1fv(GLenum target, const GLfloat* v)
    {
    
    glad_glMultiTexCoord1fv(target,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMultiTexCoord1fv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMultiTexCoord1i(GLenum target, GLint s)
    {
    
    glad_glMultiTexCoord1i(target,s);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMultiTexCoord1i");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMultiTexCoord1iv(GLenum target, const GLint* v)
    {
    
    glad_glMultiTexCoord1iv(target,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMultiTexCoord1iv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMultiTexCoord1s(GLenum target, GLshort s)
    {
    
    glad_glMultiTexCoord1s(target,s);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMultiTexCoord1s");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMultiTexCoord1sv(GLenum target, const GLshort* v)
    {
    
    glad_glMultiTexCoord1sv(target,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMultiTexCoord1sv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMultiTexCoord2d(GLenum target, GLdouble s, GLdouble t)
    {
    
    glad_glMultiTexCoord2d(target,s,t);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMultiTexCoord2d");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMultiTexCoord2dv(GLenum target, const GLdouble* v)
    {
    
    glad_glMultiTexCoord2dv(target,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMultiTexCoord2dv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMultiTexCoord2f(GLenum target, GLfloat s, GLfloat t)
    {
    
    glad_glMultiTexCoord2f(target,s,t);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMultiTexCoord2f");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMultiTexCoord2fv(GLenum target, const GLfloat* v)
    {
    
    glad_glMultiTexCoord2fv(target,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMultiTexCoord2fv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMultiTexCoord2i(GLenum target, GLint s, GLint t)
    {
    
    glad_glMultiTexCoord2i(target,s,t);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMultiTexCoord2i");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMultiTexCoord2iv(GLenum target, const GLint* v)
    {
    
    glad_glMultiTexCoord2iv(target,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMultiTexCoord2iv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMultiTexCoord2s(GLenum target, GLshort s, GLshort t)
    {
    
    glad_glMultiTexCoord2s(target,s,t);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMultiTexCoord2s");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMultiTexCoord2sv(GLenum target, const GLshort* v)
    {
    
    glad_glMultiTexCoord2sv(target,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMultiTexCoord2sv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMultiTexCoord3d(GLenum target, GLdouble s, GLdouble t, GLdouble r)
    {
    
    glad_glMultiTexCoord3d(target,s,t,r);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMultiTexCoord3d");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMultiTexCoord3dv(GLenum target, const GLdouble* v)
    {
    
    glad_glMultiTexCoord3dv(target,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMultiTexCoord3dv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMultiTexCoord3f(GLenum target, GLfloat s, GLfloat t, GLfloat r)
    {
    
    glad_glMultiTexCoord3f(target,s,t,r);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMultiTexCoord3f");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMultiTexCoord3fv(GLenum target, const GLfloat* v)
    {
    
    glad_glMultiTexCoord3fv(target,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMultiTexCoord3fv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMultiTexCoord3i(GLenum target, GLint s, GLint t, GLint r)
    {
    
    glad_glMultiTexCoord3i(target,s,t,r);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMultiTexCoord3i");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMultiTexCoord3iv(GLenum target, const GLint* v)
    {
    
    glad_glMultiTexCoord3iv(target,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMultiTexCoord3iv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMultiTexCoord3s(GLenum target, GLshort s, GLshort t, GLshort r)
    {
    
    glad_glMultiTexCoord3s(target,s,t,r);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMultiTexCoord3s");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMultiTexCoord3sv(GLenum target, const GLshort* v)
    {
    
    glad_glMultiTexCoord3sv(target,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMultiTexCoord3sv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMultiTexCoord4d(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q)
    {
    
    glad_glMultiTexCoord4d(target,s,t,r,q);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMultiTexCoord4d");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMultiTexCoord4dv(GLenum target, const GLdouble* v)
    {
    
    glad_glMultiTexCoord4dv(target,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMultiTexCoord4dv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMultiTexCoord4f(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q)
    {
    
    glad_glMultiTexCoord4f(target,s,t,r,q);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMultiTexCoord4f");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMultiTexCoord4fv(GLenum target, const GLfloat* v)
    {
    
    glad_glMultiTexCoord4fv(target,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMultiTexCoord4fv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMultiTexCoord4i(GLenum target, GLint s, GLint t, GLint r, GLint q)
    {
    
    glad_glMultiTexCoord4i(target,s,t,r,q);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMultiTexCoord4i");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMultiTexCoord4iv(GLenum target, const GLint* v)
    {
    
    glad_glMultiTexCoord4iv(target,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMultiTexCoord4iv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMultiTexCoord4s(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q)
    {
    
    glad_glMultiTexCoord4s(target,s,t,r,q);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMultiTexCoord4s");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMultiTexCoord4sv(GLenum target, const GLshort* v)
    {
    
    glad_glMultiTexCoord4sv(target,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMultiTexCoord4sv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glLoadTransposeMatrixf(const GLfloat* m)
    {
    
    glad_glLoadTransposeMatrixf(m);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glLoadTransposeMatrixf");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glLoadTransposeMatrixd(const GLdouble* m)
    {
    
    glad_glLoadTransposeMatrixd(m);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glLoadTransposeMatrixd");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMultTransposeMatrixf(const GLfloat* m)
    {
    
    glad_glMultTransposeMatrixf(m);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMultTransposeMatrixf");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMultTransposeMatrixd(const GLdouble* m)
    {
    
    glad_glMultTransposeMatrixd(m);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMultTransposeMatrixd");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glBlendFuncSeparate(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha)
    {
    
    glad_glBlendFuncSeparate(sfactorRGB,dfactorRGB,sfactorAlpha,dfactorAlpha);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glBlendFuncSeparate");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMultiDrawArrays(GLenum mode, const GLint* first, const GLsizei* count, GLsizei drawcount)
    {
    
    glad_glMultiDrawArrays(mode,first,count,drawcount);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMultiDrawArrays");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMultiDrawElements(GLenum mode, const GLsizei* count, GLenum type, const void** constindices, GLsizei drawcount)
    {
    
    glad_glMultiDrawElements(mode,count,type,constindices,drawcount);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMultiDrawElements");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glPointParameterf(GLenum pname, GLfloat param)
    {
    
    glad_glPointParameterf(pname,param);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glPointParameterf");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glPointParameterfv(GLenum pname, const GLfloat* params)
    {
    
    glad_glPointParameterfv(pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glPointParameterfv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glPointParameteri(GLenum pname, GLint param)
    {
    
    glad_glPointParameteri(pname,param);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glPointParameteri");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glPointParameteriv(GLenum pname, const GLint* params)
    {
    
    glad_glPointParameteriv(pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glPointParameteriv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glFogCoordf(GLfloat coord)
    {
    
    glad_glFogCoordf(coord);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glFogCoordf");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glFogCoordfv(const GLfloat* coord)
    {
    
    glad_glFogCoordfv(coord);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glFogCoordfv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glFogCoordd(GLdouble coord)
    {
    
    glad_glFogCoordd(coord);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glFogCoordd");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glFogCoorddv(const GLdouble* coord)
    {
    
    glad_glFogCoorddv(coord);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glFogCoorddv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glFogCoordPointer(GLenum type, GLsizei stride, const void* pointer)
    {
    
    glad_glFogCoordPointer(type,stride,pointer);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glFogCoordPointer");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glSecondaryColor3b(GLbyte red, GLbyte green, GLbyte blue)
    {
    
    glad_glSecondaryColor3b(red,green,blue);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glSecondaryColor3b");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glSecondaryColor3bv(const GLbyte* v)
    {
    
    glad_glSecondaryColor3bv(v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glSecondaryColor3bv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glSecondaryColor3d(GLdouble red, GLdouble green, GLdouble blue)
    {
    
    glad_glSecondaryColor3d(red,green,blue);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glSecondaryColor3d");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glSecondaryColor3dv(const GLdouble* v)
    {
    
    glad_glSecondaryColor3dv(v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glSecondaryColor3dv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glSecondaryColor3f(GLfloat red, GLfloat green, GLfloat blue)
    {
    
    glad_glSecondaryColor3f(red,green,blue);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glSecondaryColor3f");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glSecondaryColor3fv(const GLfloat* v)
    {
    
    glad_glSecondaryColor3fv(v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glSecondaryColor3fv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glSecondaryColor3i(GLint red, GLint green, GLint blue)
    {
    
    glad_glSecondaryColor3i(red,green,blue);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glSecondaryColor3i");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glSecondaryColor3iv(const GLint* v)
    {
    
    glad_glSecondaryColor3iv(v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glSecondaryColor3iv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glSecondaryColor3s(GLshort red, GLshort green, GLshort blue)
    {
    
    glad_glSecondaryColor3s(red,green,blue);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glSecondaryColor3s");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glSecondaryColor3sv(const GLshort* v)
    {
    
    glad_glSecondaryColor3sv(v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glSecondaryColor3sv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glSecondaryColor3ub(GLubyte red, GLubyte green, GLubyte blue)
    {
    
    glad_glSecondaryColor3ub(red,green,blue);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glSecondaryColor3ub");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glSecondaryColor3ubv(const GLubyte* v)
    {
    
    glad_glSecondaryColor3ubv(v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glSecondaryColor3ubv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glSecondaryColor3ui(GLuint red, GLuint green, GLuint blue)
    {
    
    glad_glSecondaryColor3ui(red,green,blue);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glSecondaryColor3ui");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glSecondaryColor3uiv(const GLuint* v)
    {
    
    glad_glSecondaryColor3uiv(v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glSecondaryColor3uiv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glSecondaryColor3us(GLushort red, GLushort green, GLushort blue)
    {
    
    glad_glSecondaryColor3us(red,green,blue);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glSecondaryColor3us");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glSecondaryColor3usv(const GLushort* v)
    {
    
    glad_glSecondaryColor3usv(v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glSecondaryColor3usv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glSecondaryColorPointer(GLint size, GLenum type, GLsizei stride, const void* pointer)
    {
    
    glad_glSecondaryColorPointer(size,type,stride,pointer);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glSecondaryColorPointer");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glWindowPos2d(GLdouble x, GLdouble y)
    {
    
    glad_glWindowPos2d(x,y);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glWindowPos2d");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glWindowPos2dv(const GLdouble* v)
    {
    
    glad_glWindowPos2dv(v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glWindowPos2dv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glWindowPos2f(GLfloat x, GLfloat y)
    {
    
    glad_glWindowPos2f(x,y);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glWindowPos2f");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glWindowPos2fv(const GLfloat* v)
    {
    
    glad_glWindowPos2fv(v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glWindowPos2fv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glWindowPos2i(GLint x, GLint y)
    {
    
    glad_glWindowPos2i(x,y);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glWindowPos2i");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glWindowPos2iv(const GLint* v)
    {
    
    glad_glWindowPos2iv(v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glWindowPos2iv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glWindowPos2s(GLshort x, GLshort y)
    {
    
    glad_glWindowPos2s(x,y);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glWindowPos2s");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glWindowPos2sv(const GLshort* v)
    {
    
    glad_glWindowPos2sv(v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glWindowPos2sv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glWindowPos3d(GLdouble x, GLdouble y, GLdouble z)
    {
    
    glad_glWindowPos3d(x,y,z);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glWindowPos3d");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glWindowPos3dv(const GLdouble* v)
    {
    
    glad_glWindowPos3dv(v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glWindowPos3dv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glWindowPos3f(GLfloat x, GLfloat y, GLfloat z)
    {
    
    glad_glWindowPos3f(x,y,z);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glWindowPos3f");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glWindowPos3fv(const GLfloat* v)
    {
    
    glad_glWindowPos3fv(v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glWindowPos3fv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glWindowPos3i(GLint x, GLint y, GLint z)
    {
    
    glad_glWindowPos3i(x,y,z);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glWindowPos3i");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glWindowPos3iv(const GLint* v)
    {
    
    glad_glWindowPos3iv(v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glWindowPos3iv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glWindowPos3s(GLshort x, GLshort y, GLshort z)
    {
    
    glad_glWindowPos3s(x,y,z);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glWindowPos3s");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glWindowPos3sv(const GLshort* v)
    {
    
    glad_glWindowPos3sv(v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glWindowPos3sv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glBlendColor(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)
    {
    
    glad_glBlendColor(red,green,blue,alpha);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glBlendColor");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glBlendEquation(GLenum mode)
    {
    
    glad_glBlendEquation(mode);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glBlendEquation");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGenQueries(GLsizei n, GLuint* ids)
    {
    
    glad_glGenQueries(n,ids);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGenQueries");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glDeleteQueries(GLsizei n, const GLuint* ids)
    {
    
    glad_glDeleteQueries(n,ids);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glDeleteQueries");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    GLboolean __cdecl glwrap_glIsQuery(GLuint id)
    {
    
    GLboolean ret = glad_glIsQuery(id);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glIsQuery");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	return ret;
    }

    void __cdecl glwrap_glBeginQuery(GLenum target, GLuint id)
    {
    
    glad_glBeginQuery(target,id);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glBeginQuery");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glEndQuery(GLenum target)
    {
    
    glad_glEndQuery(target);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glEndQuery");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetQueryiv(GLenum target, GLenum pname, GLint* params)
    {
    
    glad_glGetQueryiv(target,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetQueryiv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetQueryObjectiv(GLuint id, GLenum pname, GLint* params)
    {
    
    glad_glGetQueryObjectiv(id,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetQueryObjectiv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetQueryObjectuiv(GLuint id, GLenum pname, GLuint* params)
    {
    
    glad_glGetQueryObjectuiv(id,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetQueryObjectuiv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glBindBuffer(GLenum target, GLuint buffer)
    {
    
    glad_glBindBuffer(target,buffer);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glBindBuffer");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glDeleteBuffers(GLsizei n, const GLuint* buffers)
    {
    
    glad_glDeleteBuffers(n,buffers);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glDeleteBuffers");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGenBuffers(GLsizei n, GLuint* buffers)
    {
    
    glad_glGenBuffers(n,buffers);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGenBuffers");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    GLboolean __cdecl glwrap_glIsBuffer(GLuint buffer)
    {
    
    GLboolean ret = glad_glIsBuffer(buffer);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glIsBuffer");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	return ret;
    }

    void __cdecl glwrap_glBufferData(GLenum target, GLsizeiptr size, const void* data, GLenum usage)
    {
    
    glad_glBufferData(target,size,data,usage);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glBufferData");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, const void* data)
    {
    
    glad_glBufferSubData(target,offset,size,data);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glBufferSubData");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, void* data)
    {
    
    glad_glGetBufferSubData(target,offset,size,data);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetBufferSubData");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void * __cdecl glwrap_glMapBuffer(GLenum target, GLenum access)
    {
    
    void * ret = glad_glMapBuffer(target,access);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMapBuffer");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	return ret;
    }

    GLboolean __cdecl glwrap_glUnmapBuffer(GLenum target)
    {
    
    GLboolean ret = glad_glUnmapBuffer(target);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glUnmapBuffer");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	return ret;
    }

    void __cdecl glwrap_glGetBufferParameteriv(GLenum target, GLenum pname, GLint* params)
    {
    
    glad_glGetBufferParameteriv(target,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetBufferParameteriv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetBufferPointerv(GLenum target, GLenum pname, void** params)
    {
    
    glad_glGetBufferPointerv(target,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetBufferPointerv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glBlendEquationSeparate(GLenum modeRGB, GLenum modeAlpha)
    {
    
    glad_glBlendEquationSeparate(modeRGB,modeAlpha);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glBlendEquationSeparate");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glDrawBuffers(GLsizei n, const GLenum* bufs)
    {
    
    glad_glDrawBuffers(n,bufs);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glDrawBuffers");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glStencilOpSeparate(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass)
    {
    
    glad_glStencilOpSeparate(face,sfail,dpfail,dppass);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glStencilOpSeparate");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glStencilFuncSeparate(GLenum face, GLenum func, GLint ref, GLuint mask)
    {
    
    glad_glStencilFuncSeparate(face,func,ref,mask);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glStencilFuncSeparate");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glStencilMaskSeparate(GLenum face, GLuint mask)
    {
    
    glad_glStencilMaskSeparate(face,mask);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glStencilMaskSeparate");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glAttachShader(GLuint program, GLuint shader)
    {
    
    glad_glAttachShader(program,shader);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glAttachShader");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glBindAttribLocation(GLuint program, GLuint index, const GLchar* name)
    {
    
    glad_glBindAttribLocation(program,index,name);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glBindAttribLocation");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glCompileShader(GLuint shader)
    {
    
    glad_glCompileShader(shader);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glCompileShader");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    GLuint __cdecl glwrap_glCreateProgram()
    {
    
    GLuint ret = glad_glCreateProgram();
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glCreateProgram");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	return ret;
    }

    GLuint __cdecl glwrap_glCreateShader(GLenum type)
    {
    
    GLuint ret = glad_glCreateShader(type);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glCreateShader");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	return ret;
    }

    void __cdecl glwrap_glDeleteProgram(GLuint program)
    {
    
    glad_glDeleteProgram(program);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glDeleteProgram");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glDeleteShader(GLuint shader)
    {
    
    glad_glDeleteShader(shader);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glDeleteShader");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glDetachShader(GLuint program, GLuint shader)
    {
    
    glad_glDetachShader(program,shader);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glDetachShader");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glDisableVertexAttribArray(GLuint index)
    {
    
    glad_glDisableVertexAttribArray(index);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glDisableVertexAttribArray");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glEnableVertexAttribArray(GLuint index)
    {
    
    glad_glEnableVertexAttribArray(index);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glEnableVertexAttribArray");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei* length, GLint* size, GLenum* type, GLchar* name)
    {
    
    glad_glGetActiveAttrib(program,index,bufSize,length,size,type,name);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetActiveAttrib");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei* length, GLint* size, GLenum* type, GLchar* name)
    {
    
    glad_glGetActiveUniform(program,index,bufSize,length,size,type,name);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetActiveUniform");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetAttachedShaders(GLuint program, GLsizei maxCount, GLsizei* count, GLuint* shaders)
    {
    
    glad_glGetAttachedShaders(program,maxCount,count,shaders);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetAttachedShaders");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    GLint __cdecl glwrap_glGetAttribLocation(GLuint program, const GLchar* name)
    {
    
    GLint ret = glad_glGetAttribLocation(program,name);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetAttribLocation");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	return ret;
    }

    void __cdecl glwrap_glGetProgramiv(GLuint program, GLenum pname, GLint* params)
    {
    
    glad_glGetProgramiv(program,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetProgramiv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetProgramInfoLog(GLuint program, GLsizei bufSize, GLsizei* length, GLchar* infoLog)
    {
    
    glad_glGetProgramInfoLog(program,bufSize,length,infoLog);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetProgramInfoLog");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetShaderiv(GLuint shader, GLenum pname, GLint* params)
    {
    
    glad_glGetShaderiv(shader,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetShaderiv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetShaderInfoLog(GLuint shader, GLsizei bufSize, GLsizei* length, GLchar* infoLog)
    {
    
    glad_glGetShaderInfoLog(shader,bufSize,length,infoLog);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetShaderInfoLog");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetShaderSource(GLuint shader, GLsizei bufSize, GLsizei* length, GLchar* source)
    {
    
    glad_glGetShaderSource(shader,bufSize,length,source);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetShaderSource");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    GLint __cdecl glwrap_glGetUniformLocation(GLuint program, const GLchar* name)
    {
    
    GLint ret = glad_glGetUniformLocation(program,name);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetUniformLocation");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	return ret;
    }

    void __cdecl glwrap_glGetUniformfv(GLuint program, GLint location, GLfloat* params)
    {
    
    glad_glGetUniformfv(program,location,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetUniformfv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetUniformiv(GLuint program, GLint location, GLint* params)
    {
    
    glad_glGetUniformiv(program,location,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetUniformiv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetVertexAttribdv(GLuint index, GLenum pname, GLdouble* params)
    {
    
    glad_glGetVertexAttribdv(index,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetVertexAttribdv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetVertexAttribfv(GLuint index, GLenum pname, GLfloat* params)
    {
    
    glad_glGetVertexAttribfv(index,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetVertexAttribfv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetVertexAttribiv(GLuint index, GLenum pname, GLint* params)
    {
    
    glad_glGetVertexAttribiv(index,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetVertexAttribiv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetVertexAttribPointerv(GLuint index, GLenum pname, void** pointer)
    {
    
    glad_glGetVertexAttribPointerv(index,pname,pointer);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetVertexAttribPointerv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    GLboolean __cdecl glwrap_glIsProgram(GLuint program)
    {
    
    GLboolean ret = glad_glIsProgram(program);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glIsProgram");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	return ret;
    }

    GLboolean __cdecl glwrap_glIsShader(GLuint shader)
    {
    
    GLboolean ret = glad_glIsShader(shader);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glIsShader");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	return ret;
    }

    void __cdecl glwrap_glLinkProgram(GLuint program)
    {
    
    glad_glLinkProgram(program);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glLinkProgram");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glShaderSource(GLuint shader, GLsizei count, const GLchar** conststring, const GLint* length)
    {
    
    glad_glShaderSource(shader,count,conststring,length);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glShaderSource");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glUseProgram(GLuint program)
    {
    
    glad_glUseProgram(program);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glUseProgram");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glUniform1f(GLint location, GLfloat v0)
    {
    
    glad_glUniform1f(location,v0);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glUniform1f");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glUniform2f(GLint location, GLfloat v0, GLfloat v1)
    {
    
    glad_glUniform2f(location,v0,v1);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glUniform2f");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glUniform3f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2)
    {
    
    glad_glUniform3f(location,v0,v1,v2);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glUniform3f");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glUniform4f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)
    {
    
    glad_glUniform4f(location,v0,v1,v2,v3);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glUniform4f");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glUniform1i(GLint location, GLint v0)
    {
    
    glad_glUniform1i(location,v0);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glUniform1i");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glUniform2i(GLint location, GLint v0, GLint v1)
    {
    
    glad_glUniform2i(location,v0,v1);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glUniform2i");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glUniform3i(GLint location, GLint v0, GLint v1, GLint v2)
    {
    
    glad_glUniform3i(location,v0,v1,v2);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glUniform3i");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glUniform4i(GLint location, GLint v0, GLint v1, GLint v2, GLint v3)
    {
    
    glad_glUniform4i(location,v0,v1,v2,v3);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glUniform4i");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glUniform1fv(GLint location, GLsizei count, const GLfloat* value)
    {
    
    glad_glUniform1fv(location,count,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glUniform1fv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glUniform2fv(GLint location, GLsizei count, const GLfloat* value)
    {
    
    glad_glUniform2fv(location,count,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glUniform2fv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glUniform3fv(GLint location, GLsizei count, const GLfloat* value)
    {
    
    glad_glUniform3fv(location,count,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glUniform3fv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glUniform4fv(GLint location, GLsizei count, const GLfloat* value)
    {
    
    glad_glUniform4fv(location,count,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glUniform4fv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glUniform1iv(GLint location, GLsizei count, const GLint* value)
    {
    
    glad_glUniform1iv(location,count,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glUniform1iv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glUniform2iv(GLint location, GLsizei count, const GLint* value)
    {
    
    glad_glUniform2iv(location,count,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glUniform2iv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glUniform3iv(GLint location, GLsizei count, const GLint* value)
    {
    
    glad_glUniform3iv(location,count,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glUniform3iv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glUniform4iv(GLint location, GLsizei count, const GLint* value)
    {
    
    glad_glUniform4iv(location,count,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glUniform4iv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glUniformMatrix2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)
    {
    
    glad_glUniformMatrix2fv(location,count,transpose,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glUniformMatrix2fv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glUniformMatrix3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)
    {
    
    glad_glUniformMatrix3fv(location,count,transpose,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glUniformMatrix3fv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glUniformMatrix4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)
    {
    
    glad_glUniformMatrix4fv(location,count,transpose,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glUniformMatrix4fv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glValidateProgram(GLuint program)
    {
    
    glad_glValidateProgram(program);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glValidateProgram");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttrib1d(GLuint index, GLdouble x)
    {
    
    glad_glVertexAttrib1d(index,x);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttrib1d");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttrib1dv(GLuint index, const GLdouble* v)
    {
    
    glad_glVertexAttrib1dv(index,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttrib1dv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttrib1f(GLuint index, GLfloat x)
    {
    
    glad_glVertexAttrib1f(index,x);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttrib1f");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttrib1fv(GLuint index, const GLfloat* v)
    {
    
    glad_glVertexAttrib1fv(index,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttrib1fv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttrib1s(GLuint index, GLshort x)
    {
    
    glad_glVertexAttrib1s(index,x);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttrib1s");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttrib1sv(GLuint index, const GLshort* v)
    {
    
    glad_glVertexAttrib1sv(index,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttrib1sv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttrib2d(GLuint index, GLdouble x, GLdouble y)
    {
    
    glad_glVertexAttrib2d(index,x,y);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttrib2d");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttrib2dv(GLuint index, const GLdouble* v)
    {
    
    glad_glVertexAttrib2dv(index,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttrib2dv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttrib2f(GLuint index, GLfloat x, GLfloat y)
    {
    
    glad_glVertexAttrib2f(index,x,y);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttrib2f");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttrib2fv(GLuint index, const GLfloat* v)
    {
    
    glad_glVertexAttrib2fv(index,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttrib2fv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttrib2s(GLuint index, GLshort x, GLshort y)
    {
    
    glad_glVertexAttrib2s(index,x,y);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttrib2s");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttrib2sv(GLuint index, const GLshort* v)
    {
    
    glad_glVertexAttrib2sv(index,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttrib2sv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttrib3d(GLuint index, GLdouble x, GLdouble y, GLdouble z)
    {
    
    glad_glVertexAttrib3d(index,x,y,z);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttrib3d");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttrib3dv(GLuint index, const GLdouble* v)
    {
    
    glad_glVertexAttrib3dv(index,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttrib3dv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttrib3f(GLuint index, GLfloat x, GLfloat y, GLfloat z)
    {
    
    glad_glVertexAttrib3f(index,x,y,z);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttrib3f");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttrib3fv(GLuint index, const GLfloat* v)
    {
    
    glad_glVertexAttrib3fv(index,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttrib3fv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttrib3s(GLuint index, GLshort x, GLshort y, GLshort z)
    {
    
    glad_glVertexAttrib3s(index,x,y,z);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttrib3s");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttrib3sv(GLuint index, const GLshort* v)
    {
    
    glad_glVertexAttrib3sv(index,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttrib3sv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttrib4Nbv(GLuint index, const GLbyte* v)
    {
    
    glad_glVertexAttrib4Nbv(index,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttrib4Nbv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttrib4Niv(GLuint index, const GLint* v)
    {
    
    glad_glVertexAttrib4Niv(index,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttrib4Niv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttrib4Nsv(GLuint index, const GLshort* v)
    {
    
    glad_glVertexAttrib4Nsv(index,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttrib4Nsv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttrib4Nub(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w)
    {
    
    glad_glVertexAttrib4Nub(index,x,y,z,w);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttrib4Nub");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttrib4Nubv(GLuint index, const GLubyte* v)
    {
    
    glad_glVertexAttrib4Nubv(index,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttrib4Nubv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttrib4Nuiv(GLuint index, const GLuint* v)
    {
    
    glad_glVertexAttrib4Nuiv(index,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttrib4Nuiv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttrib4Nusv(GLuint index, const GLushort* v)
    {
    
    glad_glVertexAttrib4Nusv(index,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttrib4Nusv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttrib4bv(GLuint index, const GLbyte* v)
    {
    
    glad_glVertexAttrib4bv(index,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttrib4bv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttrib4d(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
    {
    
    glad_glVertexAttrib4d(index,x,y,z,w);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttrib4d");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttrib4dv(GLuint index, const GLdouble* v)
    {
    
    glad_glVertexAttrib4dv(index,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttrib4dv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttrib4f(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
    {
    
    glad_glVertexAttrib4f(index,x,y,z,w);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttrib4f");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttrib4fv(GLuint index, const GLfloat* v)
    {
    
    glad_glVertexAttrib4fv(index,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttrib4fv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttrib4iv(GLuint index, const GLint* v)
    {
    
    glad_glVertexAttrib4iv(index,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttrib4iv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttrib4s(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w)
    {
    
    glad_glVertexAttrib4s(index,x,y,z,w);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttrib4s");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttrib4sv(GLuint index, const GLshort* v)
    {
    
    glad_glVertexAttrib4sv(index,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttrib4sv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttrib4ubv(GLuint index, const GLubyte* v)
    {
    
    glad_glVertexAttrib4ubv(index,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttrib4ubv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttrib4uiv(GLuint index, const GLuint* v)
    {
    
    glad_glVertexAttrib4uiv(index,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttrib4uiv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttrib4usv(GLuint index, const GLushort* v)
    {
    
    glad_glVertexAttrib4usv(index,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttrib4usv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttribPointer(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void* pointer)
    {
    
    glad_glVertexAttribPointer(index,size,type,normalized,stride,pointer);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttribPointer");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glUniformMatrix2x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)
    {
    
    glad_glUniformMatrix2x3fv(location,count,transpose,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glUniformMatrix2x3fv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glUniformMatrix3x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)
    {
    
    glad_glUniformMatrix3x2fv(location,count,transpose,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glUniformMatrix3x2fv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glUniformMatrix2x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)
    {
    
    glad_glUniformMatrix2x4fv(location,count,transpose,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glUniformMatrix2x4fv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glUniformMatrix4x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)
    {
    
    glad_glUniformMatrix4x2fv(location,count,transpose,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glUniformMatrix4x2fv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glUniformMatrix3x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)
    {
    
    glad_glUniformMatrix3x4fv(location,count,transpose,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glUniformMatrix3x4fv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glUniformMatrix4x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)
    {
    
    glad_glUniformMatrix4x3fv(location,count,transpose,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glUniformMatrix4x3fv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glColorMaski(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a)
    {
    
    glad_glColorMaski(index,r,g,b,a);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glColorMaski");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetBooleani_v(GLenum target, GLuint index, GLboolean* data)
    {
    
    glad_glGetBooleani_v(target,index,data);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetBooleani_v");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetIntegeri_v(GLenum target, GLuint index, GLint* data)
    {
    
    glad_glGetIntegeri_v(target,index,data);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetIntegeri_v");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glEnablei(GLenum target, GLuint index)
    {
    
    glad_glEnablei(target,index);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glEnablei");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glDisablei(GLenum target, GLuint index)
    {
    
    glad_glDisablei(target,index);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glDisablei");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    GLboolean __cdecl glwrap_glIsEnabledi(GLenum target, GLuint index)
    {
    
    GLboolean ret = glad_glIsEnabledi(target,index);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glIsEnabledi");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	return ret;
    }

    void __cdecl glwrap_glBeginTransformFeedback(GLenum primitiveMode)
    {
    
    glad_glBeginTransformFeedback(primitiveMode);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glBeginTransformFeedback");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glEndTransformFeedback()
    {
    
    glad_glEndTransformFeedback();
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glEndTransformFeedback");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glBindBufferRange(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size)
    {
    
    glad_glBindBufferRange(target,index,buffer,offset,size);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glBindBufferRange");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glBindBufferBase(GLenum target, GLuint index, GLuint buffer)
    {
    
    glad_glBindBufferBase(target,index,buffer);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glBindBufferBase");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTransformFeedbackVaryings(GLuint program, GLsizei count, const GLchar** constvaryings, GLenum bufferMode)
    {
    
    glad_glTransformFeedbackVaryings(program,count,constvaryings,bufferMode);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTransformFeedbackVaryings");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetTransformFeedbackVarying(GLuint program, GLuint index, GLsizei bufSize, GLsizei* length, GLsizei* size, GLenum* type, GLchar* name)
    {
    
    glad_glGetTransformFeedbackVarying(program,index,bufSize,length,size,type,name);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetTransformFeedbackVarying");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glClampColor(GLenum target, GLenum clamp)
    {
    
    glad_glClampColor(target,clamp);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glClampColor");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glBeginConditionalRender(GLuint id, GLenum mode)
    {
    
    glad_glBeginConditionalRender(id,mode);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glBeginConditionalRender");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glEndConditionalRender()
    {
    
    glad_glEndConditionalRender();
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glEndConditionalRender");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttribIPointer(GLuint index, GLint size, GLenum type, GLsizei stride, const void* pointer)
    {
    
    glad_glVertexAttribIPointer(index,size,type,stride,pointer);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttribIPointer");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetVertexAttribIiv(GLuint index, GLenum pname, GLint* params)
    {
    
    glad_glGetVertexAttribIiv(index,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetVertexAttribIiv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetVertexAttribIuiv(GLuint index, GLenum pname, GLuint* params)
    {
    
    glad_glGetVertexAttribIuiv(index,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetVertexAttribIuiv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttribI1i(GLuint index, GLint x)
    {
    
    glad_glVertexAttribI1i(index,x);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttribI1i");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttribI2i(GLuint index, GLint x, GLint y)
    {
    
    glad_glVertexAttribI2i(index,x,y);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttribI2i");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttribI3i(GLuint index, GLint x, GLint y, GLint z)
    {
    
    glad_glVertexAttribI3i(index,x,y,z);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttribI3i");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttribI4i(GLuint index, GLint x, GLint y, GLint z, GLint w)
    {
    
    glad_glVertexAttribI4i(index,x,y,z,w);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttribI4i");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttribI1ui(GLuint index, GLuint x)
    {
    
    glad_glVertexAttribI1ui(index,x);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttribI1ui");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttribI2ui(GLuint index, GLuint x, GLuint y)
    {
    
    glad_glVertexAttribI2ui(index,x,y);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttribI2ui");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttribI3ui(GLuint index, GLuint x, GLuint y, GLuint z)
    {
    
    glad_glVertexAttribI3ui(index,x,y,z);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttribI3ui");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttribI4ui(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)
    {
    
    glad_glVertexAttribI4ui(index,x,y,z,w);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttribI4ui");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttribI1iv(GLuint index, const GLint* v)
    {
    
    glad_glVertexAttribI1iv(index,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttribI1iv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttribI2iv(GLuint index, const GLint* v)
    {
    
    glad_glVertexAttribI2iv(index,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttribI2iv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttribI3iv(GLuint index, const GLint* v)
    {
    
    glad_glVertexAttribI3iv(index,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttribI3iv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttribI4iv(GLuint index, const GLint* v)
    {
    
    glad_glVertexAttribI4iv(index,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttribI4iv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttribI1uiv(GLuint index, const GLuint* v)
    {
    
    glad_glVertexAttribI1uiv(index,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttribI1uiv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttribI2uiv(GLuint index, const GLuint* v)
    {
    
    glad_glVertexAttribI2uiv(index,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttribI2uiv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttribI3uiv(GLuint index, const GLuint* v)
    {
    
    glad_glVertexAttribI3uiv(index,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttribI3uiv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttribI4uiv(GLuint index, const GLuint* v)
    {
    
    glad_glVertexAttribI4uiv(index,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttribI4uiv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttribI4bv(GLuint index, const GLbyte* v)
    {
    
    glad_glVertexAttribI4bv(index,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttribI4bv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttribI4sv(GLuint index, const GLshort* v)
    {
    
    glad_glVertexAttribI4sv(index,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttribI4sv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttribI4ubv(GLuint index, const GLubyte* v)
    {
    
    glad_glVertexAttribI4ubv(index,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttribI4ubv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttribI4usv(GLuint index, const GLushort* v)
    {
    
    glad_glVertexAttribI4usv(index,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttribI4usv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetUniformuiv(GLuint program, GLint location, GLuint* params)
    {
    
    glad_glGetUniformuiv(program,location,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetUniformuiv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glBindFragDataLocation(GLuint program, GLuint color, const GLchar* name)
    {
    
    glad_glBindFragDataLocation(program,color,name);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glBindFragDataLocation");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    GLint __cdecl glwrap_glGetFragDataLocation(GLuint program, const GLchar* name)
    {
    
    GLint ret = glad_glGetFragDataLocation(program,name);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetFragDataLocation");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	return ret;
    }

    void __cdecl glwrap_glUniform1ui(GLint location, GLuint v0)
    {
    
    glad_glUniform1ui(location,v0);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glUniform1ui");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glUniform2ui(GLint location, GLuint v0, GLuint v1)
    {
    
    glad_glUniform2ui(location,v0,v1);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glUniform2ui");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glUniform3ui(GLint location, GLuint v0, GLuint v1, GLuint v2)
    {
    
    glad_glUniform3ui(location,v0,v1,v2);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glUniform3ui");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glUniform4ui(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3)
    {
    
    glad_glUniform4ui(location,v0,v1,v2,v3);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glUniform4ui");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glUniform1uiv(GLint location, GLsizei count, const GLuint* value)
    {
    
    glad_glUniform1uiv(location,count,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glUniform1uiv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glUniform2uiv(GLint location, GLsizei count, const GLuint* value)
    {
    
    glad_glUniform2uiv(location,count,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glUniform2uiv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glUniform3uiv(GLint location, GLsizei count, const GLuint* value)
    {
    
    glad_glUniform3uiv(location,count,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glUniform3uiv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glUniform4uiv(GLint location, GLsizei count, const GLuint* value)
    {
    
    glad_glUniform4uiv(location,count,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glUniform4uiv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTexParameterIiv(GLenum target, GLenum pname, const GLint* params)
    {
    
    glad_glTexParameterIiv(target,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTexParameterIiv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTexParameterIuiv(GLenum target, GLenum pname, const GLuint* params)
    {
    
    glad_glTexParameterIuiv(target,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTexParameterIuiv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetTexParameterIiv(GLenum target, GLenum pname, GLint* params)
    {
    
    glad_glGetTexParameterIiv(target,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetTexParameterIiv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetTexParameterIuiv(GLenum target, GLenum pname, GLuint* params)
    {
    
    glad_glGetTexParameterIuiv(target,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetTexParameterIuiv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glClearBufferiv(GLenum buffer, GLint drawbuffer, const GLint* value)
    {
    
    glad_glClearBufferiv(buffer,drawbuffer,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glClearBufferiv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glClearBufferuiv(GLenum buffer, GLint drawbuffer, const GLuint* value)
    {
    
    glad_glClearBufferuiv(buffer,drawbuffer,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glClearBufferuiv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glClearBufferfv(GLenum buffer, GLint drawbuffer, const GLfloat* value)
    {
    
    glad_glClearBufferfv(buffer,drawbuffer,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glClearBufferfv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glClearBufferfi(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil)
    {
    
    glad_glClearBufferfi(buffer,drawbuffer,depth,stencil);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glClearBufferfi");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    const GLubyte * __cdecl glwrap_glGetStringi(GLenum name, GLuint index)
    {
    
    const GLubyte * ret = glad_glGetStringi(name,index);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetStringi");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	return ret;
    }

    GLboolean __cdecl glwrap_glIsRenderbuffer(GLuint renderbuffer)
    {
    
    GLboolean ret = glad_glIsRenderbuffer(renderbuffer);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glIsRenderbuffer");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	return ret;
    }

    void __cdecl glwrap_glBindRenderbuffer(GLenum target, GLuint renderbuffer)
    {
    
    glad_glBindRenderbuffer(target,renderbuffer);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glBindRenderbuffer");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glDeleteRenderbuffers(GLsizei n, const GLuint* renderbuffers)
    {
    
    glad_glDeleteRenderbuffers(n,renderbuffers);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glDeleteRenderbuffers");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGenRenderbuffers(GLsizei n, GLuint* renderbuffers)
    {
    
    glad_glGenRenderbuffers(n,renderbuffers);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGenRenderbuffers");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glRenderbufferStorage(GLenum target, GLenum internalformat, GLsizei width, GLsizei height)
    {
    
    glad_glRenderbufferStorage(target,internalformat,width,height);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glRenderbufferStorage");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetRenderbufferParameteriv(GLenum target, GLenum pname, GLint* params)
    {
    
    glad_glGetRenderbufferParameteriv(target,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetRenderbufferParameteriv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    GLboolean __cdecl glwrap_glIsFramebuffer(GLuint framebuffer)
    {
    
    GLboolean ret = glad_glIsFramebuffer(framebuffer);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glIsFramebuffer");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	return ret;
    }

    void __cdecl glwrap_glBindFramebuffer(GLenum target, GLuint framebuffer)
    {
    
    glad_glBindFramebuffer(target,framebuffer);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glBindFramebuffer");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glDeleteFramebuffers(GLsizei n, const GLuint* framebuffers)
    {
    
    glad_glDeleteFramebuffers(n,framebuffers);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glDeleteFramebuffers");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGenFramebuffers(GLsizei n, GLuint* framebuffers)
    {
    
    glad_glGenFramebuffers(n,framebuffers);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGenFramebuffers");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    GLenum __cdecl glwrap_glCheckFramebufferStatus(GLenum target)
    {
    
    GLenum ret = glad_glCheckFramebufferStatus(target);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glCheckFramebufferStatus");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	return ret;
    }

    void __cdecl glwrap_glFramebufferTexture1D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
    {
    
    glad_glFramebufferTexture1D(target,attachment,textarget,texture,level);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glFramebufferTexture1D");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glFramebufferTexture2D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
    {
    
    glad_glFramebufferTexture2D(target,attachment,textarget,texture,level);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glFramebufferTexture2D");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glFramebufferTexture3D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset)
    {
    
    glad_glFramebufferTexture3D(target,attachment,textarget,texture,level,zoffset);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glFramebufferTexture3D");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glFramebufferRenderbuffer(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)
    {
    
    glad_glFramebufferRenderbuffer(target,attachment,renderbuffertarget,renderbuffer);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glFramebufferRenderbuffer");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetFramebufferAttachmentParameteriv(GLenum target, GLenum attachment, GLenum pname, GLint* params)
    {
    
    glad_glGetFramebufferAttachmentParameteriv(target,attachment,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetFramebufferAttachmentParameteriv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGenerateMipmap(GLenum target)
    {
    
    glad_glGenerateMipmap(target);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGenerateMipmap");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glBlitFramebuffer(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)
    {
    
    glad_glBlitFramebuffer(srcX0,srcY0,srcX1,srcY1,dstX0,dstY0,dstX1,dstY1,mask,filter);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glBlitFramebuffer");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glRenderbufferStorageMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
    {
    
    glad_glRenderbufferStorageMultisample(target,samples,internalformat,width,height);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glRenderbufferStorageMultisample");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glFramebufferTextureLayer(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer)
    {
    
    glad_glFramebufferTextureLayer(target,attachment,texture,level,layer);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glFramebufferTextureLayer");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void * __cdecl glwrap_glMapBufferRange(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access)
    {
    
    void * ret = glad_glMapBufferRange(target,offset,length,access);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMapBufferRange");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	return ret;
    }

    void __cdecl glwrap_glFlushMappedBufferRange(GLenum target, GLintptr offset, GLsizeiptr length)
    {
    
    glad_glFlushMappedBufferRange(target,offset,length);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glFlushMappedBufferRange");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glBindVertexArray(GLuint array)
    {
    
    glad_glBindVertexArray(array);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glBindVertexArray");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glDeleteVertexArrays(GLsizei n, const GLuint* arrays)
    {
    
    glad_glDeleteVertexArrays(n,arrays);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glDeleteVertexArrays");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGenVertexArrays(GLsizei n, GLuint* arrays)
    {
    
    glad_glGenVertexArrays(n,arrays);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGenVertexArrays");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    GLboolean __cdecl glwrap_glIsVertexArray(GLuint array)
    {
    
    GLboolean ret = glad_glIsVertexArray(array);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glIsVertexArray");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	return ret;
    }

    void __cdecl glwrap_glDrawArraysInstanced(GLenum mode, GLint first, GLsizei count, GLsizei instancecount)
    {
    
    glad_glDrawArraysInstanced(mode,first,count,instancecount);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glDrawArraysInstanced");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glDrawElementsInstanced(GLenum mode, GLsizei count, GLenum type, const void* indices, GLsizei instancecount)
    {
    
    glad_glDrawElementsInstanced(mode,count,type,indices,instancecount);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glDrawElementsInstanced");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTexBuffer(GLenum target, GLenum internalformat, GLuint buffer)
    {
    
    glad_glTexBuffer(target,internalformat,buffer);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTexBuffer");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glPrimitiveRestartIndex(GLuint index)
    {
    
    glad_glPrimitiveRestartIndex(index);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glPrimitiveRestartIndex");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glCopyBufferSubData(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size)
    {
    
    glad_glCopyBufferSubData(readTarget,writeTarget,readOffset,writeOffset,size);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glCopyBufferSubData");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetUniformIndices(GLuint program, GLsizei uniformCount, const GLchar** constuniformNames, GLuint* uniformIndices)
    {
    
    glad_glGetUniformIndices(program,uniformCount,constuniformNames,uniformIndices);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetUniformIndices");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetActiveUniformsiv(GLuint program, GLsizei uniformCount, const GLuint* uniformIndices, GLenum pname, GLint* params)
    {
    
    glad_glGetActiveUniformsiv(program,uniformCount,uniformIndices,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetActiveUniformsiv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetActiveUniformName(GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei* length, GLchar* uniformName)
    {
    
    glad_glGetActiveUniformName(program,uniformIndex,bufSize,length,uniformName);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetActiveUniformName");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    GLuint __cdecl glwrap_glGetUniformBlockIndex(GLuint program, const GLchar* uniformBlockName)
    {
    
    GLuint ret = glad_glGetUniformBlockIndex(program,uniformBlockName);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetUniformBlockIndex");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	return ret;
    }

    void __cdecl glwrap_glGetActiveUniformBlockiv(GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint* params)
    {
    
    glad_glGetActiveUniformBlockiv(program,uniformBlockIndex,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetActiveUniformBlockiv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetActiveUniformBlockName(GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei* length, GLchar* uniformBlockName)
    {
    
    glad_glGetActiveUniformBlockName(program,uniformBlockIndex,bufSize,length,uniformBlockName);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetActiveUniformBlockName");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glUniformBlockBinding(GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding)
    {
    
    glad_glUniformBlockBinding(program,uniformBlockIndex,uniformBlockBinding);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glUniformBlockBinding");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glDrawElementsBaseVertex(GLenum mode, GLsizei count, GLenum type, const void* indices, GLint basevertex)
    {
    
    glad_glDrawElementsBaseVertex(mode,count,type,indices,basevertex);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glDrawElementsBaseVertex");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glDrawRangeElementsBaseVertex(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void* indices, GLint basevertex)
    {
    
    glad_glDrawRangeElementsBaseVertex(mode,start,end,count,type,indices,basevertex);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glDrawRangeElementsBaseVertex");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glDrawElementsInstancedBaseVertex(GLenum mode, GLsizei count, GLenum type, const void* indices, GLsizei instancecount, GLint basevertex)
    {
    
    glad_glDrawElementsInstancedBaseVertex(mode,count,type,indices,instancecount,basevertex);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glDrawElementsInstancedBaseVertex");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMultiDrawElementsBaseVertex(GLenum mode, const GLsizei* count, GLenum type, const void** constindices, GLsizei drawcount, const GLint* basevertex)
    {
    
    glad_glMultiDrawElementsBaseVertex(mode,count,type,constindices,drawcount,basevertex);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMultiDrawElementsBaseVertex");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProvokingVertex(GLenum mode)
    {
    
    glad_glProvokingVertex(mode);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProvokingVertex");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    GLsync __cdecl glwrap_glFenceSync(GLenum condition, GLbitfield flags)
    {
    
    GLsync ret = glad_glFenceSync(condition,flags);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glFenceSync");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	return ret;
    }

    GLboolean __cdecl glwrap_glIsSync(GLsync sync)
    {
    
    GLboolean ret = glad_glIsSync(sync);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glIsSync");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	return ret;
    }

    void __cdecl glwrap_glDeleteSync(GLsync sync)
    {
    
    glad_glDeleteSync(sync);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glDeleteSync");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    GLenum __cdecl glwrap_glClientWaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout)
    {
    
    GLenum ret = glad_glClientWaitSync(sync,flags,timeout);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glClientWaitSync");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	return ret;
    }

    void __cdecl glwrap_glWaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout)
    {
    
    glad_glWaitSync(sync,flags,timeout);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glWaitSync");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetInteger64v(GLenum pname, GLint64* data)
    {
    
    glad_glGetInteger64v(pname,data);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetInteger64v");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetSynciv(GLsync sync, GLenum pname, GLsizei bufSize, GLsizei* length, GLint* values)
    {
    
    glad_glGetSynciv(sync,pname,bufSize,length,values);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetSynciv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetInteger64i_v(GLenum target, GLuint index, GLint64* data)
    {
    
    glad_glGetInteger64i_v(target,index,data);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetInteger64i_v");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetBufferParameteri64v(GLenum target, GLenum pname, GLint64* params)
    {
    
    glad_glGetBufferParameteri64v(target,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetBufferParameteri64v");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glFramebufferTexture(GLenum target, GLenum attachment, GLuint texture, GLint level)
    {
    
    glad_glFramebufferTexture(target,attachment,texture,level);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glFramebufferTexture");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTexImage2DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations)
    {
    
    glad_glTexImage2DMultisample(target,samples,internalformat,width,height,fixedsamplelocations);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTexImage2DMultisample");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTexImage3DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations)
    {
    
    glad_glTexImage3DMultisample(target,samples,internalformat,width,height,depth,fixedsamplelocations);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTexImage3DMultisample");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetMultisamplefv(GLenum pname, GLuint index, GLfloat* val)
    {
    
    glad_glGetMultisamplefv(pname,index,val);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetMultisamplefv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glSampleMaski(GLuint maskNumber, GLbitfield mask)
    {
    
    glad_glSampleMaski(maskNumber,mask);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glSampleMaski");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glBindFragDataLocationIndexed(GLuint program, GLuint colorNumber, GLuint index, const GLchar* name)
    {
    
    glad_glBindFragDataLocationIndexed(program,colorNumber,index,name);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glBindFragDataLocationIndexed");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    GLint __cdecl glwrap_glGetFragDataIndex(GLuint program, const GLchar* name)
    {
    
    GLint ret = glad_glGetFragDataIndex(program,name);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetFragDataIndex");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	return ret;
    }

    void __cdecl glwrap_glGenSamplers(GLsizei count, GLuint* samplers)
    {
    
    glad_glGenSamplers(count,samplers);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGenSamplers");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glDeleteSamplers(GLsizei count, const GLuint* samplers)
    {
    
    glad_glDeleteSamplers(count,samplers);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glDeleteSamplers");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    GLboolean __cdecl glwrap_glIsSampler(GLuint sampler)
    {
    
    GLboolean ret = glad_glIsSampler(sampler);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glIsSampler");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	return ret;
    }

    void __cdecl glwrap_glBindSampler(GLuint unit, GLuint sampler)
    {
    
    glad_glBindSampler(unit,sampler);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glBindSampler");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glSamplerParameteri(GLuint sampler, GLenum pname, GLint param)
    {
    
    glad_glSamplerParameteri(sampler,pname,param);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glSamplerParameteri");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glSamplerParameteriv(GLuint sampler, GLenum pname, const GLint* param)
    {
    
    glad_glSamplerParameteriv(sampler,pname,param);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glSamplerParameteriv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glSamplerParameterf(GLuint sampler, GLenum pname, GLfloat param)
    {
    
    glad_glSamplerParameterf(sampler,pname,param);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glSamplerParameterf");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glSamplerParameterfv(GLuint sampler, GLenum pname, const GLfloat* param)
    {
    
    glad_glSamplerParameterfv(sampler,pname,param);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glSamplerParameterfv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glSamplerParameterIiv(GLuint sampler, GLenum pname, const GLint* param)
    {
    
    glad_glSamplerParameterIiv(sampler,pname,param);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glSamplerParameterIiv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glSamplerParameterIuiv(GLuint sampler, GLenum pname, const GLuint* param)
    {
    
    glad_glSamplerParameterIuiv(sampler,pname,param);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glSamplerParameterIuiv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetSamplerParameteriv(GLuint sampler, GLenum pname, GLint* params)
    {
    
    glad_glGetSamplerParameteriv(sampler,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetSamplerParameteriv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetSamplerParameterIiv(GLuint sampler, GLenum pname, GLint* params)
    {
    
    glad_glGetSamplerParameterIiv(sampler,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetSamplerParameterIiv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetSamplerParameterfv(GLuint sampler, GLenum pname, GLfloat* params)
    {
    
    glad_glGetSamplerParameterfv(sampler,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetSamplerParameterfv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetSamplerParameterIuiv(GLuint sampler, GLenum pname, GLuint* params)
    {
    
    glad_glGetSamplerParameterIuiv(sampler,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetSamplerParameterIuiv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glQueryCounter(GLuint id, GLenum target)
    {
    
    glad_glQueryCounter(id,target);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glQueryCounter");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetQueryObjecti64v(GLuint id, GLenum pname, GLint64* params)
    {
    
    glad_glGetQueryObjecti64v(id,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetQueryObjecti64v");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetQueryObjectui64v(GLuint id, GLenum pname, GLuint64* params)
    {
    
    glad_glGetQueryObjectui64v(id,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetQueryObjectui64v");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttribDivisor(GLuint index, GLuint divisor)
    {
    
    glad_glVertexAttribDivisor(index,divisor);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttribDivisor");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttribP1ui(GLuint index, GLenum type, GLboolean normalized, GLuint value)
    {
    
    glad_glVertexAttribP1ui(index,type,normalized,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttribP1ui");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttribP1uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint* value)
    {
    
    glad_glVertexAttribP1uiv(index,type,normalized,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttribP1uiv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttribP2ui(GLuint index, GLenum type, GLboolean normalized, GLuint value)
    {
    
    glad_glVertexAttribP2ui(index,type,normalized,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttribP2ui");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttribP2uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint* value)
    {
    
    glad_glVertexAttribP2uiv(index,type,normalized,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttribP2uiv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttribP3ui(GLuint index, GLenum type, GLboolean normalized, GLuint value)
    {
    
    glad_glVertexAttribP3ui(index,type,normalized,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttribP3ui");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttribP3uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint* value)
    {
    
    glad_glVertexAttribP3uiv(index,type,normalized,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttribP3uiv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttribP4ui(GLuint index, GLenum type, GLboolean normalized, GLuint value)
    {
    
    glad_glVertexAttribP4ui(index,type,normalized,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttribP4ui");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttribP4uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint* value)
    {
    
    glad_glVertexAttribP4uiv(index,type,normalized,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttribP4uiv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexP2ui(GLenum type, GLuint value)
    {
    
    glad_glVertexP2ui(type,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexP2ui");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexP2uiv(GLenum type, const GLuint* value)
    {
    
    glad_glVertexP2uiv(type,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexP2uiv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexP3ui(GLenum type, GLuint value)
    {
    
    glad_glVertexP3ui(type,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexP3ui");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexP3uiv(GLenum type, const GLuint* value)
    {
    
    glad_glVertexP3uiv(type,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexP3uiv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexP4ui(GLenum type, GLuint value)
    {
    
    glad_glVertexP4ui(type,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexP4ui");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexP4uiv(GLenum type, const GLuint* value)
    {
    
    glad_glVertexP4uiv(type,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexP4uiv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTexCoordP1ui(GLenum type, GLuint coords)
    {
    
    glad_glTexCoordP1ui(type,coords);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTexCoordP1ui");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTexCoordP1uiv(GLenum type, const GLuint* coords)
    {
    
    glad_glTexCoordP1uiv(type,coords);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTexCoordP1uiv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTexCoordP2ui(GLenum type, GLuint coords)
    {
    
    glad_glTexCoordP2ui(type,coords);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTexCoordP2ui");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTexCoordP2uiv(GLenum type, const GLuint* coords)
    {
    
    glad_glTexCoordP2uiv(type,coords);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTexCoordP2uiv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTexCoordP3ui(GLenum type, GLuint coords)
    {
    
    glad_glTexCoordP3ui(type,coords);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTexCoordP3ui");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTexCoordP3uiv(GLenum type, const GLuint* coords)
    {
    
    glad_glTexCoordP3uiv(type,coords);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTexCoordP3uiv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTexCoordP4ui(GLenum type, GLuint coords)
    {
    
    glad_glTexCoordP4ui(type,coords);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTexCoordP4ui");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTexCoordP4uiv(GLenum type, const GLuint* coords)
    {
    
    glad_glTexCoordP4uiv(type,coords);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTexCoordP4uiv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMultiTexCoordP1ui(GLenum texture, GLenum type, GLuint coords)
    {
    
    glad_glMultiTexCoordP1ui(texture,type,coords);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMultiTexCoordP1ui");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMultiTexCoordP1uiv(GLenum texture, GLenum type, const GLuint* coords)
    {
    
    glad_glMultiTexCoordP1uiv(texture,type,coords);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMultiTexCoordP1uiv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMultiTexCoordP2ui(GLenum texture, GLenum type, GLuint coords)
    {
    
    glad_glMultiTexCoordP2ui(texture,type,coords);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMultiTexCoordP2ui");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMultiTexCoordP2uiv(GLenum texture, GLenum type, const GLuint* coords)
    {
    
    glad_glMultiTexCoordP2uiv(texture,type,coords);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMultiTexCoordP2uiv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMultiTexCoordP3ui(GLenum texture, GLenum type, GLuint coords)
    {
    
    glad_glMultiTexCoordP3ui(texture,type,coords);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMultiTexCoordP3ui");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMultiTexCoordP3uiv(GLenum texture, GLenum type, const GLuint* coords)
    {
    
    glad_glMultiTexCoordP3uiv(texture,type,coords);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMultiTexCoordP3uiv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMultiTexCoordP4ui(GLenum texture, GLenum type, GLuint coords)
    {
    
    glad_glMultiTexCoordP4ui(texture,type,coords);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMultiTexCoordP4ui");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMultiTexCoordP4uiv(GLenum texture, GLenum type, const GLuint* coords)
    {
    
    glad_glMultiTexCoordP4uiv(texture,type,coords);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMultiTexCoordP4uiv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glNormalP3ui(GLenum type, GLuint coords)
    {
    
    glad_glNormalP3ui(type,coords);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glNormalP3ui");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glNormalP3uiv(GLenum type, const GLuint* coords)
    {
    
    glad_glNormalP3uiv(type,coords);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glNormalP3uiv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glColorP3ui(GLenum type, GLuint color)
    {
    
    glad_glColorP3ui(type,color);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glColorP3ui");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glColorP3uiv(GLenum type, const GLuint* color)
    {
    
    glad_glColorP3uiv(type,color);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glColorP3uiv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glColorP4ui(GLenum type, GLuint color)
    {
    
    glad_glColorP4ui(type,color);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glColorP4ui");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glColorP4uiv(GLenum type, const GLuint* color)
    {
    
    glad_glColorP4uiv(type,color);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glColorP4uiv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glSecondaryColorP3ui(GLenum type, GLuint color)
    {
    
    glad_glSecondaryColorP3ui(type,color);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glSecondaryColorP3ui");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glSecondaryColorP3uiv(GLenum type, const GLuint* color)
    {
    
    glad_glSecondaryColorP3uiv(type,color);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glSecondaryColorP3uiv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMinSampleShading(GLfloat value)
    {
    
    glad_glMinSampleShading(value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMinSampleShading");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glBlendEquationi(GLuint buf, GLenum mode)
    {
    
    glad_glBlendEquationi(buf,mode);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glBlendEquationi");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glBlendEquationSeparatei(GLuint buf, GLenum modeRGB, GLenum modeAlpha)
    {
    
    glad_glBlendEquationSeparatei(buf,modeRGB,modeAlpha);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glBlendEquationSeparatei");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glBlendFunci(GLuint buf, GLenum src, GLenum dst)
    {
    
    glad_glBlendFunci(buf,src,dst);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glBlendFunci");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glBlendFuncSeparatei(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha)
    {
    
    glad_glBlendFuncSeparatei(buf,srcRGB,dstRGB,srcAlpha,dstAlpha);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glBlendFuncSeparatei");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glDrawArraysIndirect(GLenum mode, const void* indirect)
    {
    
    glad_glDrawArraysIndirect(mode,indirect);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glDrawArraysIndirect");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glDrawElementsIndirect(GLenum mode, GLenum type, const void* indirect)
    {
    
    glad_glDrawElementsIndirect(mode,type,indirect);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glDrawElementsIndirect");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glUniform1d(GLint location, GLdouble x)
    {
    
    glad_glUniform1d(location,x);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glUniform1d");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glUniform2d(GLint location, GLdouble x, GLdouble y)
    {
    
    glad_glUniform2d(location,x,y);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glUniform2d");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glUniform3d(GLint location, GLdouble x, GLdouble y, GLdouble z)
    {
    
    glad_glUniform3d(location,x,y,z);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glUniform3d");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glUniform4d(GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
    {
    
    glad_glUniform4d(location,x,y,z,w);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glUniform4d");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glUniform1dv(GLint location, GLsizei count, const GLdouble* value)
    {
    
    glad_glUniform1dv(location,count,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glUniform1dv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glUniform2dv(GLint location, GLsizei count, const GLdouble* value)
    {
    
    glad_glUniform2dv(location,count,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glUniform2dv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glUniform3dv(GLint location, GLsizei count, const GLdouble* value)
    {
    
    glad_glUniform3dv(location,count,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glUniform3dv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glUniform4dv(GLint location, GLsizei count, const GLdouble* value)
    {
    
    glad_glUniform4dv(location,count,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glUniform4dv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glUniformMatrix2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble* value)
    {
    
    glad_glUniformMatrix2dv(location,count,transpose,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glUniformMatrix2dv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glUniformMatrix3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble* value)
    {
    
    glad_glUniformMatrix3dv(location,count,transpose,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glUniformMatrix3dv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glUniformMatrix4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble* value)
    {
    
    glad_glUniformMatrix4dv(location,count,transpose,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glUniformMatrix4dv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glUniformMatrix2x3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble* value)
    {
    
    glad_glUniformMatrix2x3dv(location,count,transpose,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glUniformMatrix2x3dv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glUniformMatrix2x4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble* value)
    {
    
    glad_glUniformMatrix2x4dv(location,count,transpose,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glUniformMatrix2x4dv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glUniformMatrix3x2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble* value)
    {
    
    glad_glUniformMatrix3x2dv(location,count,transpose,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glUniformMatrix3x2dv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glUniformMatrix3x4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble* value)
    {
    
    glad_glUniformMatrix3x4dv(location,count,transpose,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glUniformMatrix3x4dv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glUniformMatrix4x2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble* value)
    {
    
    glad_glUniformMatrix4x2dv(location,count,transpose,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glUniformMatrix4x2dv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glUniformMatrix4x3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble* value)
    {
    
    glad_glUniformMatrix4x3dv(location,count,transpose,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glUniformMatrix4x3dv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetUniformdv(GLuint program, GLint location, GLdouble* params)
    {
    
    glad_glGetUniformdv(program,location,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetUniformdv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    GLint __cdecl glwrap_glGetSubroutineUniformLocation(GLuint program, GLenum shadertype, const GLchar* name)
    {
    
    GLint ret = glad_glGetSubroutineUniformLocation(program,shadertype,name);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetSubroutineUniformLocation");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	return ret;
    }

    GLuint __cdecl glwrap_glGetSubroutineIndex(GLuint program, GLenum shadertype, const GLchar* name)
    {
    
    GLuint ret = glad_glGetSubroutineIndex(program,shadertype,name);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetSubroutineIndex");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	return ret;
    }

    void __cdecl glwrap_glGetActiveSubroutineUniformiv(GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint* values)
    {
    
    glad_glGetActiveSubroutineUniformiv(program,shadertype,index,pname,values);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetActiveSubroutineUniformiv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetActiveSubroutineUniformName(GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei* length, GLchar* name)
    {
    
    glad_glGetActiveSubroutineUniformName(program,shadertype,index,bufsize,length,name);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetActiveSubroutineUniformName");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetActiveSubroutineName(GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei* length, GLchar* name)
    {
    
    glad_glGetActiveSubroutineName(program,shadertype,index,bufsize,length,name);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetActiveSubroutineName");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glUniformSubroutinesuiv(GLenum shadertype, GLsizei count, const GLuint* indices)
    {
    
    glad_glUniformSubroutinesuiv(shadertype,count,indices);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glUniformSubroutinesuiv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetUniformSubroutineuiv(GLenum shadertype, GLint location, GLuint* params)
    {
    
    glad_glGetUniformSubroutineuiv(shadertype,location,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetUniformSubroutineuiv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetProgramStageiv(GLuint program, GLenum shadertype, GLenum pname, GLint* values)
    {
    
    glad_glGetProgramStageiv(program,shadertype,pname,values);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetProgramStageiv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glPatchParameteri(GLenum pname, GLint value)
    {
    
    glad_glPatchParameteri(pname,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glPatchParameteri");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glPatchParameterfv(GLenum pname, const GLfloat* values)
    {
    
    glad_glPatchParameterfv(pname,values);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glPatchParameterfv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glBindTransformFeedback(GLenum target, GLuint id)
    {
    
    glad_glBindTransformFeedback(target,id);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glBindTransformFeedback");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glDeleteTransformFeedbacks(GLsizei n, const GLuint* ids)
    {
    
    glad_glDeleteTransformFeedbacks(n,ids);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glDeleteTransformFeedbacks");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGenTransformFeedbacks(GLsizei n, GLuint* ids)
    {
    
    glad_glGenTransformFeedbacks(n,ids);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGenTransformFeedbacks");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    GLboolean __cdecl glwrap_glIsTransformFeedback(GLuint id)
    {
    
    GLboolean ret = glad_glIsTransformFeedback(id);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glIsTransformFeedback");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	return ret;
    }

    void __cdecl glwrap_glPauseTransformFeedback()
    {
    
    glad_glPauseTransformFeedback();
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glPauseTransformFeedback");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glResumeTransformFeedback()
    {
    
    glad_glResumeTransformFeedback();
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glResumeTransformFeedback");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glDrawTransformFeedback(GLenum mode, GLuint id)
    {
    
    glad_glDrawTransformFeedback(mode,id);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glDrawTransformFeedback");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glDrawTransformFeedbackStream(GLenum mode, GLuint id, GLuint stream)
    {
    
    glad_glDrawTransformFeedbackStream(mode,id,stream);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glDrawTransformFeedbackStream");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glBeginQueryIndexed(GLenum target, GLuint index, GLuint id)
    {
    
    glad_glBeginQueryIndexed(target,index,id);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glBeginQueryIndexed");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glEndQueryIndexed(GLenum target, GLuint index)
    {
    
    glad_glEndQueryIndexed(target,index);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glEndQueryIndexed");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetQueryIndexediv(GLenum target, GLuint index, GLenum pname, GLint* params)
    {
    
    glad_glGetQueryIndexediv(target,index,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetQueryIndexediv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glReleaseShaderCompiler()
    {
    
    glad_glReleaseShaderCompiler();
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glReleaseShaderCompiler");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glShaderBinary(GLsizei count, const GLuint* shaders, GLenum binaryformat, const void* binary, GLsizei length)
    {
    
    glad_glShaderBinary(count,shaders,binaryformat,binary,length);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glShaderBinary");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetShaderPrecisionFormat(GLenum shadertype, GLenum precisiontype, GLint* range, GLint* precision)
    {
    
    glad_glGetShaderPrecisionFormat(shadertype,precisiontype,range,precision);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetShaderPrecisionFormat");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glDepthRangef(GLfloat n, GLfloat f)
    {
    
    glad_glDepthRangef(n,f);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glDepthRangef");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glClearDepthf(GLfloat d)
    {
    
    glad_glClearDepthf(d);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glClearDepthf");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetProgramBinary(GLuint program, GLsizei bufSize, GLsizei* length, GLenum* binaryFormat, void* binary)
    {
    
    glad_glGetProgramBinary(program,bufSize,length,binaryFormat,binary);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetProgramBinary");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramBinary(GLuint program, GLenum binaryFormat, const void* binary, GLsizei length)
    {
    
    glad_glProgramBinary(program,binaryFormat,binary,length);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramBinary");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramParameteri(GLuint program, GLenum pname, GLint value)
    {
    
    glad_glProgramParameteri(program,pname,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramParameteri");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glUseProgramStages(GLuint pipeline, GLbitfield stages, GLuint program)
    {
    
    glad_glUseProgramStages(pipeline,stages,program);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glUseProgramStages");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glActiveShaderProgram(GLuint pipeline, GLuint program)
    {
    
    glad_glActiveShaderProgram(pipeline,program);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glActiveShaderProgram");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    GLuint __cdecl glwrap_glCreateShaderProgramv(GLenum type, GLsizei count, const GLchar** conststrings)
    {
    
    GLuint ret = glad_glCreateShaderProgramv(type,count,conststrings);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glCreateShaderProgramv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	return ret;
    }

    void __cdecl glwrap_glBindProgramPipeline(GLuint pipeline)
    {
    
    glad_glBindProgramPipeline(pipeline);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glBindProgramPipeline");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glDeleteProgramPipelines(GLsizei n, const GLuint* pipelines)
    {
    
    glad_glDeleteProgramPipelines(n,pipelines);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glDeleteProgramPipelines");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGenProgramPipelines(GLsizei n, GLuint* pipelines)
    {
    
    glad_glGenProgramPipelines(n,pipelines);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGenProgramPipelines");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    GLboolean __cdecl glwrap_glIsProgramPipeline(GLuint pipeline)
    {
    
    GLboolean ret = glad_glIsProgramPipeline(pipeline);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glIsProgramPipeline");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	return ret;
    }

    void __cdecl glwrap_glGetProgramPipelineiv(GLuint pipeline, GLenum pname, GLint* params)
    {
    
    glad_glGetProgramPipelineiv(pipeline,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetProgramPipelineiv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramUniform1i(GLuint program, GLint location, GLint v0)
    {
    
    glad_glProgramUniform1i(program,location,v0);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramUniform1i");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramUniform1iv(GLuint program, GLint location, GLsizei count, const GLint* value)
    {
    
    glad_glProgramUniform1iv(program,location,count,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramUniform1iv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramUniform1f(GLuint program, GLint location, GLfloat v0)
    {
    
    glad_glProgramUniform1f(program,location,v0);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramUniform1f");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramUniform1fv(GLuint program, GLint location, GLsizei count, const GLfloat* value)
    {
    
    glad_glProgramUniform1fv(program,location,count,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramUniform1fv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramUniform1d(GLuint program, GLint location, GLdouble v0)
    {
    
    glad_glProgramUniform1d(program,location,v0);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramUniform1d");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramUniform1dv(GLuint program, GLint location, GLsizei count, const GLdouble* value)
    {
    
    glad_glProgramUniform1dv(program,location,count,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramUniform1dv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramUniform1ui(GLuint program, GLint location, GLuint v0)
    {
    
    glad_glProgramUniform1ui(program,location,v0);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramUniform1ui");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramUniform1uiv(GLuint program, GLint location, GLsizei count, const GLuint* value)
    {
    
    glad_glProgramUniform1uiv(program,location,count,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramUniform1uiv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramUniform2i(GLuint program, GLint location, GLint v0, GLint v1)
    {
    
    glad_glProgramUniform2i(program,location,v0,v1);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramUniform2i");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramUniform2iv(GLuint program, GLint location, GLsizei count, const GLint* value)
    {
    
    glad_glProgramUniform2iv(program,location,count,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramUniform2iv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramUniform2f(GLuint program, GLint location, GLfloat v0, GLfloat v1)
    {
    
    glad_glProgramUniform2f(program,location,v0,v1);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramUniform2f");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramUniform2fv(GLuint program, GLint location, GLsizei count, const GLfloat* value)
    {
    
    glad_glProgramUniform2fv(program,location,count,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramUniform2fv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramUniform2d(GLuint program, GLint location, GLdouble v0, GLdouble v1)
    {
    
    glad_glProgramUniform2d(program,location,v0,v1);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramUniform2d");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramUniform2dv(GLuint program, GLint location, GLsizei count, const GLdouble* value)
    {
    
    glad_glProgramUniform2dv(program,location,count,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramUniform2dv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramUniform2ui(GLuint program, GLint location, GLuint v0, GLuint v1)
    {
    
    glad_glProgramUniform2ui(program,location,v0,v1);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramUniform2ui");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramUniform2uiv(GLuint program, GLint location, GLsizei count, const GLuint* value)
    {
    
    glad_glProgramUniform2uiv(program,location,count,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramUniform2uiv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramUniform3i(GLuint program, GLint location, GLint v0, GLint v1, GLint v2)
    {
    
    glad_glProgramUniform3i(program,location,v0,v1,v2);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramUniform3i");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramUniform3iv(GLuint program, GLint location, GLsizei count, const GLint* value)
    {
    
    glad_glProgramUniform3iv(program,location,count,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramUniform3iv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramUniform3f(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2)
    {
    
    glad_glProgramUniform3f(program,location,v0,v1,v2);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramUniform3f");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramUniform3fv(GLuint program, GLint location, GLsizei count, const GLfloat* value)
    {
    
    glad_glProgramUniform3fv(program,location,count,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramUniform3fv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramUniform3d(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2)
    {
    
    glad_glProgramUniform3d(program,location,v0,v1,v2);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramUniform3d");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramUniform3dv(GLuint program, GLint location, GLsizei count, const GLdouble* value)
    {
    
    glad_glProgramUniform3dv(program,location,count,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramUniform3dv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramUniform3ui(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2)
    {
    
    glad_glProgramUniform3ui(program,location,v0,v1,v2);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramUniform3ui");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramUniform3uiv(GLuint program, GLint location, GLsizei count, const GLuint* value)
    {
    
    glad_glProgramUniform3uiv(program,location,count,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramUniform3uiv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramUniform4i(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3)
    {
    
    glad_glProgramUniform4i(program,location,v0,v1,v2,v3);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramUniform4i");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramUniform4iv(GLuint program, GLint location, GLsizei count, const GLint* value)
    {
    
    glad_glProgramUniform4iv(program,location,count,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramUniform4iv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramUniform4f(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)
    {
    
    glad_glProgramUniform4f(program,location,v0,v1,v2,v3);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramUniform4f");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramUniform4fv(GLuint program, GLint location, GLsizei count, const GLfloat* value)
    {
    
    glad_glProgramUniform4fv(program,location,count,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramUniform4fv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramUniform4d(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3)
    {
    
    glad_glProgramUniform4d(program,location,v0,v1,v2,v3);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramUniform4d");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramUniform4dv(GLuint program, GLint location, GLsizei count, const GLdouble* value)
    {
    
    glad_glProgramUniform4dv(program,location,count,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramUniform4dv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramUniform4ui(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3)
    {
    
    glad_glProgramUniform4ui(program,location,v0,v1,v2,v3);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramUniform4ui");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramUniform4uiv(GLuint program, GLint location, GLsizei count, const GLuint* value)
    {
    
    glad_glProgramUniform4uiv(program,location,count,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramUniform4uiv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramUniformMatrix2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)
    {
    
    glad_glProgramUniformMatrix2fv(program,location,count,transpose,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramUniformMatrix2fv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramUniformMatrix3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)
    {
    
    glad_glProgramUniformMatrix3fv(program,location,count,transpose,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramUniformMatrix3fv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramUniformMatrix4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)
    {
    
    glad_glProgramUniformMatrix4fv(program,location,count,transpose,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramUniformMatrix4fv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramUniformMatrix2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value)
    {
    
    glad_glProgramUniformMatrix2dv(program,location,count,transpose,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramUniformMatrix2dv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramUniformMatrix3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value)
    {
    
    glad_glProgramUniformMatrix3dv(program,location,count,transpose,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramUniformMatrix3dv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramUniformMatrix4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value)
    {
    
    glad_glProgramUniformMatrix4dv(program,location,count,transpose,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramUniformMatrix4dv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramUniformMatrix2x3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)
    {
    
    glad_glProgramUniformMatrix2x3fv(program,location,count,transpose,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramUniformMatrix2x3fv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramUniformMatrix3x2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)
    {
    
    glad_glProgramUniformMatrix3x2fv(program,location,count,transpose,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramUniformMatrix3x2fv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramUniformMatrix2x4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)
    {
    
    glad_glProgramUniformMatrix2x4fv(program,location,count,transpose,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramUniformMatrix2x4fv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramUniformMatrix4x2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)
    {
    
    glad_glProgramUniformMatrix4x2fv(program,location,count,transpose,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramUniformMatrix4x2fv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramUniformMatrix3x4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)
    {
    
    glad_glProgramUniformMatrix3x4fv(program,location,count,transpose,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramUniformMatrix3x4fv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramUniformMatrix4x3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)
    {
    
    glad_glProgramUniformMatrix4x3fv(program,location,count,transpose,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramUniformMatrix4x3fv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramUniformMatrix2x3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value)
    {
    
    glad_glProgramUniformMatrix2x3dv(program,location,count,transpose,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramUniformMatrix2x3dv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramUniformMatrix3x2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value)
    {
    
    glad_glProgramUniformMatrix3x2dv(program,location,count,transpose,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramUniformMatrix3x2dv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramUniformMatrix2x4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value)
    {
    
    glad_glProgramUniformMatrix2x4dv(program,location,count,transpose,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramUniformMatrix2x4dv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramUniformMatrix4x2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value)
    {
    
    glad_glProgramUniformMatrix4x2dv(program,location,count,transpose,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramUniformMatrix4x2dv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramUniformMatrix3x4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value)
    {
    
    glad_glProgramUniformMatrix3x4dv(program,location,count,transpose,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramUniformMatrix3x4dv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramUniformMatrix4x3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value)
    {
    
    glad_glProgramUniformMatrix4x3dv(program,location,count,transpose,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramUniformMatrix4x3dv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glValidateProgramPipeline(GLuint pipeline)
    {
    
    glad_glValidateProgramPipeline(pipeline);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glValidateProgramPipeline");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetProgramPipelineInfoLog(GLuint pipeline, GLsizei bufSize, GLsizei* length, GLchar* infoLog)
    {
    
    glad_glGetProgramPipelineInfoLog(pipeline,bufSize,length,infoLog);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetProgramPipelineInfoLog");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttribL1d(GLuint index, GLdouble x)
    {
    
    glad_glVertexAttribL1d(index,x);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttribL1d");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttribL2d(GLuint index, GLdouble x, GLdouble y)
    {
    
    glad_glVertexAttribL2d(index,x,y);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttribL2d");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttribL3d(GLuint index, GLdouble x, GLdouble y, GLdouble z)
    {
    
    glad_glVertexAttribL3d(index,x,y,z);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttribL3d");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttribL4d(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
    {
    
    glad_glVertexAttribL4d(index,x,y,z,w);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttribL4d");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttribL1dv(GLuint index, const GLdouble* v)
    {
    
    glad_glVertexAttribL1dv(index,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttribL1dv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttribL2dv(GLuint index, const GLdouble* v)
    {
    
    glad_glVertexAttribL2dv(index,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttribL2dv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttribL3dv(GLuint index, const GLdouble* v)
    {
    
    glad_glVertexAttribL3dv(index,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttribL3dv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttribL4dv(GLuint index, const GLdouble* v)
    {
    
    glad_glVertexAttribL4dv(index,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttribL4dv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttribLPointer(GLuint index, GLint size, GLenum type, GLsizei stride, const void* pointer)
    {
    
    glad_glVertexAttribLPointer(index,size,type,stride,pointer);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttribLPointer");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetVertexAttribLdv(GLuint index, GLenum pname, GLdouble* params)
    {
    
    glad_glGetVertexAttribLdv(index,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetVertexAttribLdv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glViewportArrayv(GLuint first, GLsizei count, const GLfloat* v)
    {
    
    glad_glViewportArrayv(first,count,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glViewportArrayv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glViewportIndexedf(GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h)
    {
    
    glad_glViewportIndexedf(index,x,y,w,h);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glViewportIndexedf");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glViewportIndexedfv(GLuint index, const GLfloat* v)
    {
    
    glad_glViewportIndexedfv(index,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glViewportIndexedfv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glScissorArrayv(GLuint first, GLsizei count, const GLint* v)
    {
    
    glad_glScissorArrayv(first,count,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glScissorArrayv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glScissorIndexed(GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height)
    {
    
    glad_glScissorIndexed(index,left,bottom,width,height);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glScissorIndexed");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glScissorIndexedv(GLuint index, const GLint* v)
    {
    
    glad_glScissorIndexedv(index,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glScissorIndexedv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glDepthRangeArrayv(GLuint first, GLsizei count, const GLdouble* v)
    {
    
    glad_glDepthRangeArrayv(first,count,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glDepthRangeArrayv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glDepthRangeIndexed(GLuint index, GLdouble n, GLdouble f)
    {
    
    glad_glDepthRangeIndexed(index,n,f);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glDepthRangeIndexed");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetFloati_v(GLenum target, GLuint index, GLfloat* data)
    {
    
    glad_glGetFloati_v(target,index,data);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetFloati_v");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetDoublei_v(GLenum target, GLuint index, GLdouble* data)
    {
    
    glad_glGetDoublei_v(target,index,data);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetDoublei_v");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glDrawArraysInstancedBaseInstance(GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance)
    {
    
    glad_glDrawArraysInstancedBaseInstance(mode,first,count,instancecount,baseinstance);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glDrawArraysInstancedBaseInstance");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glDrawElementsInstancedBaseInstance(GLenum mode, GLsizei count, GLenum type, const void* indices, GLsizei instancecount, GLuint baseinstance)
    {
    
    glad_glDrawElementsInstancedBaseInstance(mode,count,type,indices,instancecount,baseinstance);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glDrawElementsInstancedBaseInstance");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glDrawElementsInstancedBaseVertexBaseInstance(GLenum mode, GLsizei count, GLenum type, const void* indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance)
    {
    
    glad_glDrawElementsInstancedBaseVertexBaseInstance(mode,count,type,indices,instancecount,basevertex,baseinstance);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glDrawElementsInstancedBaseVertexBaseInstance");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetInternalformativ(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint* params)
    {
    
    glad_glGetInternalformativ(target,internalformat,pname,bufSize,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetInternalformativ");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetActiveAtomicCounterBufferiv(GLuint program, GLuint bufferIndex, GLenum pname, GLint* params)
    {
    
    glad_glGetActiveAtomicCounterBufferiv(program,bufferIndex,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetActiveAtomicCounterBufferiv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glBindImageTexture(GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format)
    {
    
    glad_glBindImageTexture(unit,texture,level,layered,layer,access,format);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glBindImageTexture");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMemoryBarrier(GLbitfield barriers)
    {
    
    glad_glMemoryBarrier(barriers);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMemoryBarrier");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTexStorage1D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width)
    {
    
    glad_glTexStorage1D(target,levels,internalformat,width);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTexStorage1D");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTexStorage2D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height)
    {
    
    glad_glTexStorage2D(target,levels,internalformat,width,height);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTexStorage2D");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTexStorage3D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth)
    {
    
    glad_glTexStorage3D(target,levels,internalformat,width,height,depth);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTexStorage3D");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glDrawTransformFeedbackInstanced(GLenum mode, GLuint id, GLsizei instancecount)
    {
    
    glad_glDrawTransformFeedbackInstanced(mode,id,instancecount);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glDrawTransformFeedbackInstanced");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glDrawTransformFeedbackStreamInstanced(GLenum mode, GLuint id, GLuint stream, GLsizei instancecount)
    {
    
    glad_glDrawTransformFeedbackStreamInstanced(mode,id,stream,instancecount);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glDrawTransformFeedbackStreamInstanced");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glClearBufferData(GLenum target, GLenum internalformat, GLenum format, GLenum type, const void* data)
    {
    
    glad_glClearBufferData(target,internalformat,format,type,data);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glClearBufferData");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glClearBufferSubData(GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void* data)
    {
    
    glad_glClearBufferSubData(target,internalformat,offset,size,format,type,data);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glClearBufferSubData");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glDispatchCompute(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z)
    {
    
    glad_glDispatchCompute(num_groups_x,num_groups_y,num_groups_z);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glDispatchCompute");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glDispatchComputeIndirect(GLintptr indirect)
    {
    
    glad_glDispatchComputeIndirect(indirect);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glDispatchComputeIndirect");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glCopyImageSubData(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth)
    {
    
    glad_glCopyImageSubData(srcName,srcTarget,srcLevel,srcX,srcY,srcZ,dstName,dstTarget,dstLevel,dstX,dstY,dstZ,srcWidth,srcHeight,srcDepth);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glCopyImageSubData");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glFramebufferParameteri(GLenum target, GLenum pname, GLint param)
    {
    
    glad_glFramebufferParameteri(target,pname,param);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glFramebufferParameteri");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetFramebufferParameteriv(GLenum target, GLenum pname, GLint* params)
    {
    
    glad_glGetFramebufferParameteriv(target,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetFramebufferParameteriv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetInternalformati64v(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint64* params)
    {
    
    glad_glGetInternalformati64v(target,internalformat,pname,bufSize,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetInternalformati64v");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glInvalidateTexSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth)
    {
    
    glad_glInvalidateTexSubImage(texture,level,xoffset,yoffset,zoffset,width,height,depth);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glInvalidateTexSubImage");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glInvalidateTexImage(GLuint texture, GLint level)
    {
    
    glad_glInvalidateTexImage(texture,level);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glInvalidateTexImage");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glInvalidateBufferSubData(GLuint buffer, GLintptr offset, GLsizeiptr length)
    {
    
    glad_glInvalidateBufferSubData(buffer,offset,length);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glInvalidateBufferSubData");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glInvalidateBufferData(GLuint buffer)
    {
    
    glad_glInvalidateBufferData(buffer);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glInvalidateBufferData");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glInvalidateFramebuffer(GLenum target, GLsizei numAttachments, const GLenum* attachments)
    {
    
    glad_glInvalidateFramebuffer(target,numAttachments,attachments);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glInvalidateFramebuffer");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glInvalidateSubFramebuffer(GLenum target, GLsizei numAttachments, const GLenum* attachments, GLint x, GLint y, GLsizei width, GLsizei height)
    {
    
    glad_glInvalidateSubFramebuffer(target,numAttachments,attachments,x,y,width,height);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glInvalidateSubFramebuffer");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMultiDrawArraysIndirect(GLenum mode, const void* indirect, GLsizei drawcount, GLsizei stride)
    {
    
    glad_glMultiDrawArraysIndirect(mode,indirect,drawcount,stride);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMultiDrawArraysIndirect");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMultiDrawElementsIndirect(GLenum mode, GLenum type, const void* indirect, GLsizei drawcount, GLsizei stride)
    {
    
    glad_glMultiDrawElementsIndirect(mode,type,indirect,drawcount,stride);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMultiDrawElementsIndirect");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetProgramInterfaceiv(GLuint program, GLenum programInterface, GLenum pname, GLint* params)
    {
    
    glad_glGetProgramInterfaceiv(program,programInterface,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetProgramInterfaceiv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    GLuint __cdecl glwrap_glGetProgramResourceIndex(GLuint program, GLenum programInterface, const GLchar* name)
    {
    
    GLuint ret = glad_glGetProgramResourceIndex(program,programInterface,name);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetProgramResourceIndex");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	return ret;
    }

    void __cdecl glwrap_glGetProgramResourceName(GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei* length, GLchar* name)
    {
    
    glad_glGetProgramResourceName(program,programInterface,index,bufSize,length,name);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetProgramResourceName");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetProgramResourceiv(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum* props, GLsizei bufSize, GLsizei* length, GLint* params)
    {
    
    glad_glGetProgramResourceiv(program,programInterface,index,propCount,props,bufSize,length,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetProgramResourceiv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    GLint __cdecl glwrap_glGetProgramResourceLocation(GLuint program, GLenum programInterface, const GLchar* name)
    {
    
    GLint ret = glad_glGetProgramResourceLocation(program,programInterface,name);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetProgramResourceLocation");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	return ret;
    }

    GLint __cdecl glwrap_glGetProgramResourceLocationIndex(GLuint program, GLenum programInterface, const GLchar* name)
    {
    
    GLint ret = glad_glGetProgramResourceLocationIndex(program,programInterface,name);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetProgramResourceLocationIndex");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	return ret;
    }

    void __cdecl glwrap_glShaderStorageBlockBinding(GLuint program, GLuint storageBlockIndex, GLuint storageBlockBinding)
    {
    
    glad_glShaderStorageBlockBinding(program,storageBlockIndex,storageBlockBinding);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glShaderStorageBlockBinding");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTexBufferRange(GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size)
    {
    
    glad_glTexBufferRange(target,internalformat,buffer,offset,size);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTexBufferRange");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTexStorage2DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations)
    {
    
    glad_glTexStorage2DMultisample(target,samples,internalformat,width,height,fixedsamplelocations);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTexStorage2DMultisample");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTexStorage3DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations)
    {
    
    glad_glTexStorage3DMultisample(target,samples,internalformat,width,height,depth,fixedsamplelocations);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTexStorage3DMultisample");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTextureView(GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers)
    {
    
    glad_glTextureView(texture,target,origtexture,internalformat,minlevel,numlevels,minlayer,numlayers);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTextureView");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glBindVertexBuffer(GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride)
    {
    
    glad_glBindVertexBuffer(bindingindex,buffer,offset,stride);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glBindVertexBuffer");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttribFormat(GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset)
    {
    
    glad_glVertexAttribFormat(attribindex,size,type,normalized,relativeoffset);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttribFormat");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttribIFormat(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)
    {
    
    glad_glVertexAttribIFormat(attribindex,size,type,relativeoffset);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttribIFormat");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttribLFormat(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)
    {
    
    glad_glVertexAttribLFormat(attribindex,size,type,relativeoffset);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttribLFormat");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttribBinding(GLuint attribindex, GLuint bindingindex)
    {
    
    glad_glVertexAttribBinding(attribindex,bindingindex);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttribBinding");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexBindingDivisor(GLuint bindingindex, GLuint divisor)
    {
    
    glad_glVertexBindingDivisor(bindingindex,divisor);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexBindingDivisor");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glDebugMessageControl(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint* ids, GLboolean enabled)
    {
    
    glad_glDebugMessageControl(source,type,severity,count,ids,enabled);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glDebugMessageControl");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glDebugMessageInsert(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar* buf)
    {
    
    glad_glDebugMessageInsert(source,type,id,severity,length,buf);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glDebugMessageInsert");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glDebugMessageCallback(GLDEBUGPROC callback, const void* userParam)
    {
    
    glad_glDebugMessageCallback(callback,userParam);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glDebugMessageCallback");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    GLuint __cdecl glwrap_glGetDebugMessageLog(GLuint count, GLsizei bufSize, GLenum* sources, GLenum* types, GLuint* ids, GLenum* severities, GLsizei* lengths, GLchar* messageLog)
    {
    
    GLuint ret = glad_glGetDebugMessageLog(count,bufSize,sources,types,ids,severities,lengths,messageLog);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetDebugMessageLog");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	return ret;
    }

    void __cdecl glwrap_glPushDebugGroup(GLenum source, GLuint id, GLsizei length, const GLchar* message)
    {
    
    glad_glPushDebugGroup(source,id,length,message);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glPushDebugGroup");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glPopDebugGroup()
    {
    
    glad_glPopDebugGroup();
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glPopDebugGroup");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glObjectLabel(GLenum identifier, GLuint name, GLsizei length, const GLchar* label)
    {
    
    glad_glObjectLabel(identifier,name,length,label);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glObjectLabel");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetObjectLabel(GLenum identifier, GLuint name, GLsizei bufSize, GLsizei* length, GLchar* label)
    {
    
    glad_glGetObjectLabel(identifier,name,bufSize,length,label);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetObjectLabel");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glObjectPtrLabel(const void* ptr, GLsizei length, const GLchar* label)
    {
    
    glad_glObjectPtrLabel(ptr,length,label);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glObjectPtrLabel");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetObjectPtrLabel(const void* ptr, GLsizei bufSize, GLsizei* length, GLchar* label)
    {
    
    glad_glGetObjectPtrLabel(ptr,bufSize,length,label);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetObjectPtrLabel");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glBufferStorage(GLenum target, GLsizeiptr size, const void* data, GLbitfield flags)
    {
    
    glad_glBufferStorage(target,size,data,flags);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glBufferStorage");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glClearTexImage(GLuint texture, GLint level, GLenum format, GLenum type, const void* data)
    {
    
    glad_glClearTexImage(texture,level,format,type,data);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glClearTexImage");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glClearTexSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void* data)
    {
    
    glad_glClearTexSubImage(texture,level,xoffset,yoffset,zoffset,width,height,depth,format,type,data);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glClearTexSubImage");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glBindBuffersBase(GLenum target, GLuint first, GLsizei count, const GLuint* buffers)
    {
    
    glad_glBindBuffersBase(target,first,count,buffers);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glBindBuffersBase");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glBindBuffersRange(GLenum target, GLuint first, GLsizei count, const GLuint* buffers, const GLintptr* offsets, const GLsizeiptr* sizes)
    {
    
    glad_glBindBuffersRange(target,first,count,buffers,offsets,sizes);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glBindBuffersRange");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glBindTextures(GLuint first, GLsizei count, const GLuint* textures)
    {
    
    glad_glBindTextures(first,count,textures);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glBindTextures");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glBindSamplers(GLuint first, GLsizei count, const GLuint* samplers)
    {
    
    glad_glBindSamplers(first,count,samplers);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glBindSamplers");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glBindImageTextures(GLuint first, GLsizei count, const GLuint* textures)
    {
    
    glad_glBindImageTextures(first,count,textures);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glBindImageTextures");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glBindVertexBuffers(GLuint first, GLsizei count, const GLuint* buffers, const GLintptr* offsets, const GLsizei* strides)
    {
    
    glad_glBindVertexBuffers(first,count,buffers,offsets,strides);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glBindVertexBuffers");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glClipControl(GLenum origin, GLenum depth)
    {
    
    glad_glClipControl(origin,depth);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glClipControl");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glCreateTransformFeedbacks(GLsizei n, GLuint* ids)
    {
    
    glad_glCreateTransformFeedbacks(n,ids);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glCreateTransformFeedbacks");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTransformFeedbackBufferBase(GLuint xfb, GLuint index, GLuint buffer)
    {
    
    glad_glTransformFeedbackBufferBase(xfb,index,buffer);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTransformFeedbackBufferBase");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTransformFeedbackBufferRange(GLuint xfb, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size)
    {
    
    glad_glTransformFeedbackBufferRange(xfb,index,buffer,offset,size);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTransformFeedbackBufferRange");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetTransformFeedbackiv(GLuint xfb, GLenum pname, GLint* param)
    {
    
    glad_glGetTransformFeedbackiv(xfb,pname,param);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetTransformFeedbackiv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetTransformFeedbacki_v(GLuint xfb, GLenum pname, GLuint index, GLint* param)
    {
    
    glad_glGetTransformFeedbacki_v(xfb,pname,index,param);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetTransformFeedbacki_v");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetTransformFeedbacki64_v(GLuint xfb, GLenum pname, GLuint index, GLint64* param)
    {
    
    glad_glGetTransformFeedbacki64_v(xfb,pname,index,param);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetTransformFeedbacki64_v");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glCreateBuffers(GLsizei n, GLuint* buffers)
    {
    
    glad_glCreateBuffers(n,buffers);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glCreateBuffers");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glNamedBufferStorage(GLuint buffer, GLsizeiptr size, const void* data, GLbitfield flags)
    {
    
    glad_glNamedBufferStorage(buffer,size,data,flags);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glNamedBufferStorage");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glNamedBufferData(GLuint buffer, GLsizeiptr size, const void* data, GLenum usage)
    {
    
    glad_glNamedBufferData(buffer,size,data,usage);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glNamedBufferData");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glNamedBufferSubData(GLuint buffer, GLintptr offset, GLsizeiptr size, const void* data)
    {
    
    glad_glNamedBufferSubData(buffer,offset,size,data);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glNamedBufferSubData");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glCopyNamedBufferSubData(GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size)
    {
    
    glad_glCopyNamedBufferSubData(readBuffer,writeBuffer,readOffset,writeOffset,size);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glCopyNamedBufferSubData");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glClearNamedBufferData(GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void* data)
    {
    
    glad_glClearNamedBufferData(buffer,internalformat,format,type,data);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glClearNamedBufferData");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glClearNamedBufferSubData(GLuint buffer, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void* data)
    {
    
    glad_glClearNamedBufferSubData(buffer,internalformat,offset,size,format,type,data);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glClearNamedBufferSubData");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void * __cdecl glwrap_glMapNamedBuffer(GLuint buffer, GLenum access)
    {
    
    void * ret = glad_glMapNamedBuffer(buffer,access);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMapNamedBuffer");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	return ret;
    }

    void * __cdecl glwrap_glMapNamedBufferRange(GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access)
    {
    
    void * ret = glad_glMapNamedBufferRange(buffer,offset,length,access);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMapNamedBufferRange");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	return ret;
    }

    GLboolean __cdecl glwrap_glUnmapNamedBuffer(GLuint buffer)
    {
    
    GLboolean ret = glad_glUnmapNamedBuffer(buffer);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glUnmapNamedBuffer");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	return ret;
    }

    void __cdecl glwrap_glFlushMappedNamedBufferRange(GLuint buffer, GLintptr offset, GLsizeiptr length)
    {
    
    glad_glFlushMappedNamedBufferRange(buffer,offset,length);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glFlushMappedNamedBufferRange");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetNamedBufferParameteriv(GLuint buffer, GLenum pname, GLint* params)
    {
    
    glad_glGetNamedBufferParameteriv(buffer,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetNamedBufferParameteriv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetNamedBufferParameteri64v(GLuint buffer, GLenum pname, GLint64* params)
    {
    
    glad_glGetNamedBufferParameteri64v(buffer,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetNamedBufferParameteri64v");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetNamedBufferPointerv(GLuint buffer, GLenum pname, void** params)
    {
    
    glad_glGetNamedBufferPointerv(buffer,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetNamedBufferPointerv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetNamedBufferSubData(GLuint buffer, GLintptr offset, GLsizeiptr size, void* data)
    {
    
    glad_glGetNamedBufferSubData(buffer,offset,size,data);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetNamedBufferSubData");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glCreateFramebuffers(GLsizei n, GLuint* framebuffers)
    {
    
    glad_glCreateFramebuffers(n,framebuffers);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glCreateFramebuffers");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glNamedFramebufferRenderbuffer(GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)
    {
    
    glad_glNamedFramebufferRenderbuffer(framebuffer,attachment,renderbuffertarget,renderbuffer);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glNamedFramebufferRenderbuffer");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glNamedFramebufferParameteri(GLuint framebuffer, GLenum pname, GLint param)
    {
    
    glad_glNamedFramebufferParameteri(framebuffer,pname,param);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glNamedFramebufferParameteri");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glNamedFramebufferTexture(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level)
    {
    
    glad_glNamedFramebufferTexture(framebuffer,attachment,texture,level);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glNamedFramebufferTexture");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glNamedFramebufferTextureLayer(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer)
    {
    
    glad_glNamedFramebufferTextureLayer(framebuffer,attachment,texture,level,layer);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glNamedFramebufferTextureLayer");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glNamedFramebufferDrawBuffer(GLuint framebuffer, GLenum buf)
    {
    
    glad_glNamedFramebufferDrawBuffer(framebuffer,buf);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glNamedFramebufferDrawBuffer");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glNamedFramebufferDrawBuffers(GLuint framebuffer, GLsizei n, const GLenum* bufs)
    {
    
    glad_glNamedFramebufferDrawBuffers(framebuffer,n,bufs);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glNamedFramebufferDrawBuffers");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glNamedFramebufferReadBuffer(GLuint framebuffer, GLenum src)
    {
    
    glad_glNamedFramebufferReadBuffer(framebuffer,src);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glNamedFramebufferReadBuffer");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glInvalidateNamedFramebufferData(GLuint framebuffer, GLsizei numAttachments, const GLenum* attachments)
    {
    
    glad_glInvalidateNamedFramebufferData(framebuffer,numAttachments,attachments);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glInvalidateNamedFramebufferData");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glInvalidateNamedFramebufferSubData(GLuint framebuffer, GLsizei numAttachments, const GLenum* attachments, GLint x, GLint y, GLsizei width, GLsizei height)
    {
    
    glad_glInvalidateNamedFramebufferSubData(framebuffer,numAttachments,attachments,x,y,width,height);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glInvalidateNamedFramebufferSubData");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glClearNamedFramebufferiv(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLint* value)
    {
    
    glad_glClearNamedFramebufferiv(framebuffer,buffer,drawbuffer,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glClearNamedFramebufferiv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glClearNamedFramebufferuiv(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLuint* value)
    {
    
    glad_glClearNamedFramebufferuiv(framebuffer,buffer,drawbuffer,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glClearNamedFramebufferuiv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glClearNamedFramebufferfv(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLfloat* value)
    {
    
    glad_glClearNamedFramebufferfv(framebuffer,buffer,drawbuffer,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glClearNamedFramebufferfv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glClearNamedFramebufferfi(GLuint framebuffer, GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil)
    {
    
    glad_glClearNamedFramebufferfi(framebuffer,buffer,drawbuffer,depth,stencil);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glClearNamedFramebufferfi");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glBlitNamedFramebuffer(GLuint readFramebuffer, GLuint drawFramebuffer, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)
    {
    
    glad_glBlitNamedFramebuffer(readFramebuffer,drawFramebuffer,srcX0,srcY0,srcX1,srcY1,dstX0,dstY0,dstX1,dstY1,mask,filter);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glBlitNamedFramebuffer");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    GLenum __cdecl glwrap_glCheckNamedFramebufferStatus(GLuint framebuffer, GLenum target)
    {
    
    GLenum ret = glad_glCheckNamedFramebufferStatus(framebuffer,target);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glCheckNamedFramebufferStatus");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	return ret;
    }

    void __cdecl glwrap_glGetNamedFramebufferParameteriv(GLuint framebuffer, GLenum pname, GLint* param)
    {
    
    glad_glGetNamedFramebufferParameteriv(framebuffer,pname,param);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetNamedFramebufferParameteriv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetNamedFramebufferAttachmentParameteriv(GLuint framebuffer, GLenum attachment, GLenum pname, GLint* params)
    {
    
    glad_glGetNamedFramebufferAttachmentParameteriv(framebuffer,attachment,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetNamedFramebufferAttachmentParameteriv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glCreateRenderbuffers(GLsizei n, GLuint* renderbuffers)
    {
    
    glad_glCreateRenderbuffers(n,renderbuffers);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glCreateRenderbuffers");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glNamedRenderbufferStorage(GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height)
    {
    
    glad_glNamedRenderbufferStorage(renderbuffer,internalformat,width,height);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glNamedRenderbufferStorage");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glNamedRenderbufferStorageMultisample(GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
    {
    
    glad_glNamedRenderbufferStorageMultisample(renderbuffer,samples,internalformat,width,height);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glNamedRenderbufferStorageMultisample");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetNamedRenderbufferParameteriv(GLuint renderbuffer, GLenum pname, GLint* params)
    {
    
    glad_glGetNamedRenderbufferParameteriv(renderbuffer,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetNamedRenderbufferParameteriv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glCreateTextures(GLenum target, GLsizei n, GLuint* textures)
    {
    
    glad_glCreateTextures(target,n,textures);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glCreateTextures");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTextureBuffer(GLuint texture, GLenum internalformat, GLuint buffer)
    {
    
    glad_glTextureBuffer(texture,internalformat,buffer);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTextureBuffer");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTextureBufferRange(GLuint texture, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size)
    {
    
    glad_glTextureBufferRange(texture,internalformat,buffer,offset,size);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTextureBufferRange");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTextureStorage1D(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width)
    {
    
    glad_glTextureStorage1D(texture,levels,internalformat,width);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTextureStorage1D");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTextureStorage2D(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height)
    {
    
    glad_glTextureStorage2D(texture,levels,internalformat,width,height);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTextureStorage2D");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTextureStorage3D(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth)
    {
    
    glad_glTextureStorage3D(texture,levels,internalformat,width,height,depth);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTextureStorage3D");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTextureStorage2DMultisample(GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations)
    {
    
    glad_glTextureStorage2DMultisample(texture,samples,internalformat,width,height,fixedsamplelocations);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTextureStorage2DMultisample");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTextureStorage3DMultisample(GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations)
    {
    
    glad_glTextureStorage3DMultisample(texture,samples,internalformat,width,height,depth,fixedsamplelocations);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTextureStorage3DMultisample");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTextureSubImage1D(GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void* pixels)
    {
    
    glad_glTextureSubImage1D(texture,level,xoffset,width,format,type,pixels);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTextureSubImage1D");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTextureSubImage2D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void* pixels)
    {
    
    glad_glTextureSubImage2D(texture,level,xoffset,yoffset,width,height,format,type,pixels);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTextureSubImage2D");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTextureSubImage3D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void* pixels)
    {
    
    glad_glTextureSubImage3D(texture,level,xoffset,yoffset,zoffset,width,height,depth,format,type,pixels);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTextureSubImage3D");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glCompressedTextureSubImage1D(GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void* data)
    {
    
    glad_glCompressedTextureSubImage1D(texture,level,xoffset,width,format,imageSize,data);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glCompressedTextureSubImage1D");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glCompressedTextureSubImage2D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void* data)
    {
    
    glad_glCompressedTextureSubImage2D(texture,level,xoffset,yoffset,width,height,format,imageSize,data);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glCompressedTextureSubImage2D");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glCompressedTextureSubImage3D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void* data)
    {
    
    glad_glCompressedTextureSubImage3D(texture,level,xoffset,yoffset,zoffset,width,height,depth,format,imageSize,data);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glCompressedTextureSubImage3D");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glCopyTextureSubImage1D(GLuint texture, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)
    {
    
    glad_glCopyTextureSubImage1D(texture,level,xoffset,x,y,width);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glCopyTextureSubImage1D");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glCopyTextureSubImage2D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)
    {
    
    glad_glCopyTextureSubImage2D(texture,level,xoffset,yoffset,x,y,width,height);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glCopyTextureSubImage2D");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glCopyTextureSubImage3D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)
    {
    
    glad_glCopyTextureSubImage3D(texture,level,xoffset,yoffset,zoffset,x,y,width,height);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glCopyTextureSubImage3D");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTextureParameterf(GLuint texture, GLenum pname, GLfloat param)
    {
    
    glad_glTextureParameterf(texture,pname,param);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTextureParameterf");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTextureParameterfv(GLuint texture, GLenum pname, const GLfloat* param)
    {
    
    glad_glTextureParameterfv(texture,pname,param);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTextureParameterfv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTextureParameteri(GLuint texture, GLenum pname, GLint param)
    {
    
    glad_glTextureParameteri(texture,pname,param);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTextureParameteri");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTextureParameterIiv(GLuint texture, GLenum pname, const GLint* params)
    {
    
    glad_glTextureParameterIiv(texture,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTextureParameterIiv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTextureParameterIuiv(GLuint texture, GLenum pname, const GLuint* params)
    {
    
    glad_glTextureParameterIuiv(texture,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTextureParameterIuiv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTextureParameteriv(GLuint texture, GLenum pname, const GLint* param)
    {
    
    glad_glTextureParameteriv(texture,pname,param);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTextureParameteriv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGenerateTextureMipmap(GLuint texture)
    {
    
    glad_glGenerateTextureMipmap(texture);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGenerateTextureMipmap");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glBindTextureUnit(GLuint unit, GLuint texture)
    {
    
    glad_glBindTextureUnit(unit,texture);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glBindTextureUnit");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetTextureImage(GLuint texture, GLint level, GLenum format, GLenum type, GLsizei bufSize, void* pixels)
    {
    
    glad_glGetTextureImage(texture,level,format,type,bufSize,pixels);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetTextureImage");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetCompressedTextureImage(GLuint texture, GLint level, GLsizei bufSize, void* pixels)
    {
    
    glad_glGetCompressedTextureImage(texture,level,bufSize,pixels);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetCompressedTextureImage");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetTextureLevelParameterfv(GLuint texture, GLint level, GLenum pname, GLfloat* params)
    {
    
    glad_glGetTextureLevelParameterfv(texture,level,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetTextureLevelParameterfv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetTextureLevelParameteriv(GLuint texture, GLint level, GLenum pname, GLint* params)
    {
    
    glad_glGetTextureLevelParameteriv(texture,level,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetTextureLevelParameteriv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetTextureParameterfv(GLuint texture, GLenum pname, GLfloat* params)
    {
    
    glad_glGetTextureParameterfv(texture,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetTextureParameterfv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetTextureParameterIiv(GLuint texture, GLenum pname, GLint* params)
    {
    
    glad_glGetTextureParameterIiv(texture,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetTextureParameterIiv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetTextureParameterIuiv(GLuint texture, GLenum pname, GLuint* params)
    {
    
    glad_glGetTextureParameterIuiv(texture,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetTextureParameterIuiv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetTextureParameteriv(GLuint texture, GLenum pname, GLint* params)
    {
    
    glad_glGetTextureParameteriv(texture,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetTextureParameteriv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glCreateVertexArrays(GLsizei n, GLuint* arrays)
    {
    
    glad_glCreateVertexArrays(n,arrays);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glCreateVertexArrays");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glDisableVertexArrayAttrib(GLuint vaobj, GLuint index)
    {
    
    glad_glDisableVertexArrayAttrib(vaobj,index);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glDisableVertexArrayAttrib");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glEnableVertexArrayAttrib(GLuint vaobj, GLuint index)
    {
    
    glad_glEnableVertexArrayAttrib(vaobj,index);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glEnableVertexArrayAttrib");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexArrayElementBuffer(GLuint vaobj, GLuint buffer)
    {
    
    glad_glVertexArrayElementBuffer(vaobj,buffer);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexArrayElementBuffer");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexArrayVertexBuffer(GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride)
    {
    
    glad_glVertexArrayVertexBuffer(vaobj,bindingindex,buffer,offset,stride);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexArrayVertexBuffer");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexArrayVertexBuffers(GLuint vaobj, GLuint first, GLsizei count, const GLuint* buffers, const GLintptr* offsets, const GLsizei* strides)
    {
    
    glad_glVertexArrayVertexBuffers(vaobj,first,count,buffers,offsets,strides);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexArrayVertexBuffers");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexArrayAttribBinding(GLuint vaobj, GLuint attribindex, GLuint bindingindex)
    {
    
    glad_glVertexArrayAttribBinding(vaobj,attribindex,bindingindex);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexArrayAttribBinding");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexArrayAttribFormat(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset)
    {
    
    glad_glVertexArrayAttribFormat(vaobj,attribindex,size,type,normalized,relativeoffset);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexArrayAttribFormat");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexArrayAttribIFormat(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)
    {
    
    glad_glVertexArrayAttribIFormat(vaobj,attribindex,size,type,relativeoffset);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexArrayAttribIFormat");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexArrayAttribLFormat(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)
    {
    
    glad_glVertexArrayAttribLFormat(vaobj,attribindex,size,type,relativeoffset);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexArrayAttribLFormat");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexArrayBindingDivisor(GLuint vaobj, GLuint bindingindex, GLuint divisor)
    {
    
    glad_glVertexArrayBindingDivisor(vaobj,bindingindex,divisor);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexArrayBindingDivisor");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetVertexArrayiv(GLuint vaobj, GLenum pname, GLint* param)
    {
    
    glad_glGetVertexArrayiv(vaobj,pname,param);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetVertexArrayiv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetVertexArrayIndexediv(GLuint vaobj, GLuint index, GLenum pname, GLint* param)
    {
    
    glad_glGetVertexArrayIndexediv(vaobj,index,pname,param);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetVertexArrayIndexediv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetVertexArrayIndexed64iv(GLuint vaobj, GLuint index, GLenum pname, GLint64* param)
    {
    
    glad_glGetVertexArrayIndexed64iv(vaobj,index,pname,param);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetVertexArrayIndexed64iv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glCreateSamplers(GLsizei n, GLuint* samplers)
    {
    
    glad_glCreateSamplers(n,samplers);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glCreateSamplers");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glCreateProgramPipelines(GLsizei n, GLuint* pipelines)
    {
    
    glad_glCreateProgramPipelines(n,pipelines);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glCreateProgramPipelines");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glCreateQueries(GLenum target, GLsizei n, GLuint* ids)
    {
    
    glad_glCreateQueries(target,n,ids);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glCreateQueries");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetQueryBufferObjecti64v(GLuint id, GLuint buffer, GLenum pname, GLintptr offset)
    {
    
    glad_glGetQueryBufferObjecti64v(id,buffer,pname,offset);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetQueryBufferObjecti64v");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetQueryBufferObjectiv(GLuint id, GLuint buffer, GLenum pname, GLintptr offset)
    {
    
    glad_glGetQueryBufferObjectiv(id,buffer,pname,offset);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetQueryBufferObjectiv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetQueryBufferObjectui64v(GLuint id, GLuint buffer, GLenum pname, GLintptr offset)
    {
    
    glad_glGetQueryBufferObjectui64v(id,buffer,pname,offset);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetQueryBufferObjectui64v");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetQueryBufferObjectuiv(GLuint id, GLuint buffer, GLenum pname, GLintptr offset)
    {
    
    glad_glGetQueryBufferObjectuiv(id,buffer,pname,offset);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetQueryBufferObjectuiv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMemoryBarrierByRegion(GLbitfield barriers)
    {
    
    glad_glMemoryBarrierByRegion(barriers);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMemoryBarrierByRegion");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetTextureSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLsizei bufSize, void* pixels)
    {
    
    glad_glGetTextureSubImage(texture,level,xoffset,yoffset,zoffset,width,height,depth,format,type,bufSize,pixels);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetTextureSubImage");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetCompressedTextureSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei bufSize, void* pixels)
    {
    
    glad_glGetCompressedTextureSubImage(texture,level,xoffset,yoffset,zoffset,width,height,depth,bufSize,pixels);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetCompressedTextureSubImage");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    GLenum __cdecl glwrap_glGetGraphicsResetStatus()
    {
    
    GLenum ret = glad_glGetGraphicsResetStatus();
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetGraphicsResetStatus");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	return ret;
    }

    void __cdecl glwrap_glGetnCompressedTexImage(GLenum target, GLint lod, GLsizei bufSize, void* pixels)
    {
    
    glad_glGetnCompressedTexImage(target,lod,bufSize,pixels);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetnCompressedTexImage");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetnTexImage(GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void* pixels)
    {
    
    glad_glGetnTexImage(target,level,format,type,bufSize,pixels);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetnTexImage");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetnUniformdv(GLuint program, GLint location, GLsizei bufSize, GLdouble* params)
    {
    
    glad_glGetnUniformdv(program,location,bufSize,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetnUniformdv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetnUniformfv(GLuint program, GLint location, GLsizei bufSize, GLfloat* params)
    {
    
    glad_glGetnUniformfv(program,location,bufSize,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetnUniformfv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetnUniformiv(GLuint program, GLint location, GLsizei bufSize, GLint* params)
    {
    
    glad_glGetnUniformiv(program,location,bufSize,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetnUniformiv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetnUniformuiv(GLuint program, GLint location, GLsizei bufSize, GLuint* params)
    {
    
    glad_glGetnUniformuiv(program,location,bufSize,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetnUniformuiv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glReadnPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void* data)
    {
    
    glad_glReadnPixels(x,y,width,height,format,type,bufSize,data);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glReadnPixels");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetnMapdv(GLenum target, GLenum query, GLsizei bufSize, GLdouble* v)
    {
    
    glad_glGetnMapdv(target,query,bufSize,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetnMapdv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetnMapfv(GLenum target, GLenum query, GLsizei bufSize, GLfloat* v)
    {
    
    glad_glGetnMapfv(target,query,bufSize,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetnMapfv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetnMapiv(GLenum target, GLenum query, GLsizei bufSize, GLint* v)
    {
    
    glad_glGetnMapiv(target,query,bufSize,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetnMapiv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetnPixelMapfv(GLenum map, GLsizei bufSize, GLfloat* values)
    {
    
    glad_glGetnPixelMapfv(map,bufSize,values);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetnPixelMapfv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetnPixelMapuiv(GLenum map, GLsizei bufSize, GLuint* values)
    {
    
    glad_glGetnPixelMapuiv(map,bufSize,values);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetnPixelMapuiv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetnPixelMapusv(GLenum map, GLsizei bufSize, GLushort* values)
    {
    
    glad_glGetnPixelMapusv(map,bufSize,values);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetnPixelMapusv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetnPolygonStipple(GLsizei bufSize, GLubyte* pattern)
    {
    
    glad_glGetnPolygonStipple(bufSize,pattern);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetnPolygonStipple");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetnColorTable(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void* table)
    {
    
    glad_glGetnColorTable(target,format,type,bufSize,table);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetnColorTable");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetnConvolutionFilter(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void* image)
    {
    
    glad_glGetnConvolutionFilter(target,format,type,bufSize,image);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetnConvolutionFilter");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetnSeparableFilter(GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, void* row, GLsizei columnBufSize, void* column, void* span)
    {
    
    glad_glGetnSeparableFilter(target,format,type,rowBufSize,row,columnBufSize,column,span);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetnSeparableFilter");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetnHistogram(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void* values)
    {
    
    glad_glGetnHistogram(target,reset,format,type,bufSize,values);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetnHistogram");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetnMinmax(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void* values)
    {
    
    glad_glGetnMinmax(target,reset,format,type,bufSize,values);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetnMinmax");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTextureBarrier()
    {
    
    glad_glTextureBarrier();
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTextureBarrier");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glSpecializeShader(GLuint shader, const GLchar* pEntryPoint, GLuint numSpecializationConstants, const GLuint* pConstantIndex, const GLuint* pConstantValue)
    {
    
    glad_glSpecializeShader(shader,pEntryPoint,numSpecializationConstants,pConstantIndex,pConstantValue);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glSpecializeShader");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMultiDrawArraysIndirectCount(GLenum mode, const void* indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride)
    {
    
    glad_glMultiDrawArraysIndirectCount(mode,indirect,drawcount,maxdrawcount,stride);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMultiDrawArraysIndirectCount");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMultiDrawElementsIndirectCount(GLenum mode, GLenum type, const void* indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride)
    {
    
    glad_glMultiDrawElementsIndirectCount(mode,type,indirect,drawcount,maxdrawcount,stride);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMultiDrawElementsIndirectCount");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glPolygonOffsetClamp(GLfloat factor, GLfloat units, GLfloat clamp)
    {
    
    glad_glPolygonOffsetClamp(factor,units,clamp);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glPolygonOffsetClamp");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glPrimitiveBoundingBoxARB(GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW)
    {
    
    glad_glPrimitiveBoundingBoxARB(minX,minY,minZ,minW,maxX,maxY,maxZ,maxW);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glPrimitiveBoundingBoxARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    GLuint64 __cdecl glwrap_glGetTextureHandleARB(GLuint texture)
    {
    
    GLuint64 ret = glad_glGetTextureHandleARB(texture);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetTextureHandleARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	return ret;
    }

    GLuint64 __cdecl glwrap_glGetTextureSamplerHandleARB(GLuint texture, GLuint sampler)
    {
    
    GLuint64 ret = glad_glGetTextureSamplerHandleARB(texture,sampler);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetTextureSamplerHandleARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	return ret;
    }

    void __cdecl glwrap_glMakeTextureHandleResidentARB(GLuint64 handle)
    {
    
    glad_glMakeTextureHandleResidentARB(handle);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMakeTextureHandleResidentARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMakeTextureHandleNonResidentARB(GLuint64 handle)
    {
    
    glad_glMakeTextureHandleNonResidentARB(handle);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMakeTextureHandleNonResidentARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    GLuint64 __cdecl glwrap_glGetImageHandleARB(GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format)
    {
    
    GLuint64 ret = glad_glGetImageHandleARB(texture,level,layered,layer,format);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetImageHandleARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	return ret;
    }

    void __cdecl glwrap_glMakeImageHandleResidentARB(GLuint64 handle, GLenum access)
    {
    
    glad_glMakeImageHandleResidentARB(handle,access);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMakeImageHandleResidentARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMakeImageHandleNonResidentARB(GLuint64 handle)
    {
    
    glad_glMakeImageHandleNonResidentARB(handle);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMakeImageHandleNonResidentARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glUniformHandleui64ARB(GLint location, GLuint64 value)
    {
    
    glad_glUniformHandleui64ARB(location,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glUniformHandleui64ARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glUniformHandleui64vARB(GLint location, GLsizei count, const GLuint64* value)
    {
    
    glad_glUniformHandleui64vARB(location,count,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glUniformHandleui64vARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramUniformHandleui64ARB(GLuint program, GLint location, GLuint64 value)
    {
    
    glad_glProgramUniformHandleui64ARB(program,location,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramUniformHandleui64ARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramUniformHandleui64vARB(GLuint program, GLint location, GLsizei count, const GLuint64* values)
    {
    
    glad_glProgramUniformHandleui64vARB(program,location,count,values);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramUniformHandleui64vARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    GLboolean __cdecl glwrap_glIsTextureHandleResidentARB(GLuint64 handle)
    {
    
    GLboolean ret = glad_glIsTextureHandleResidentARB(handle);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glIsTextureHandleResidentARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	return ret;
    }

    GLboolean __cdecl glwrap_glIsImageHandleResidentARB(GLuint64 handle)
    {
    
    GLboolean ret = glad_glIsImageHandleResidentARB(handle);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glIsImageHandleResidentARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	return ret;
    }

    void __cdecl glwrap_glVertexAttribL1ui64ARB(GLuint index, GLuint64EXT x)
    {
    
    glad_glVertexAttribL1ui64ARB(index,x);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttribL1ui64ARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttribL1ui64vARB(GLuint index, const GLuint64EXT* v)
    {
    
    glad_glVertexAttribL1ui64vARB(index,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttribL1ui64vARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetVertexAttribLui64vARB(GLuint index, GLenum pname, GLuint64EXT* params)
    {
    
    glad_glGetVertexAttribLui64vARB(index,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetVertexAttribLui64vARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    GLsync __cdecl glwrap_glCreateSyncFromCLeventARB(struct _cl_context* context, struct _cl_event* event, GLbitfield flags)
    {
    
    GLsync ret = glad_glCreateSyncFromCLeventARB(context,event,flags);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glCreateSyncFromCLeventARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	return ret;
    }

    void __cdecl glwrap_glClampColorARB(GLenum target, GLenum clamp)
    {
    
    glad_glClampColorARB(target,clamp);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glClampColorARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glDispatchComputeGroupSizeARB(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z, GLuint group_size_x, GLuint group_size_y, GLuint group_size_z)
    {
    
    glad_glDispatchComputeGroupSizeARB(num_groups_x,num_groups_y,num_groups_z,group_size_x,group_size_y,group_size_z);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glDispatchComputeGroupSizeARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glDebugMessageControlARB(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint* ids, GLboolean enabled)
    {
    
    glad_glDebugMessageControlARB(source,type,severity,count,ids,enabled);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glDebugMessageControlARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glDebugMessageInsertARB(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar* buf)
    {
    
    glad_glDebugMessageInsertARB(source,type,id,severity,length,buf);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glDebugMessageInsertARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glDebugMessageCallbackARB(GLDEBUGPROCARB callback, const void* userParam)
    {
    
    glad_glDebugMessageCallbackARB(callback,userParam);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glDebugMessageCallbackARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    GLuint __cdecl glwrap_glGetDebugMessageLogARB(GLuint count, GLsizei bufSize, GLenum* sources, GLenum* types, GLuint* ids, GLenum* severities, GLsizei* lengths, GLchar* messageLog)
    {
    
    GLuint ret = glad_glGetDebugMessageLogARB(count,bufSize,sources,types,ids,severities,lengths,messageLog);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetDebugMessageLogARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	return ret;
    }

    void __cdecl glwrap_glDrawBuffersARB(GLsizei n, const GLenum* bufs)
    {
    
    glad_glDrawBuffersARB(n,bufs);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glDrawBuffersARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glBlendEquationiARB(GLuint buf, GLenum mode)
    {
    
    glad_glBlendEquationiARB(buf,mode);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glBlendEquationiARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glBlendEquationSeparateiARB(GLuint buf, GLenum modeRGB, GLenum modeAlpha)
    {
    
    glad_glBlendEquationSeparateiARB(buf,modeRGB,modeAlpha);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glBlendEquationSeparateiARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glBlendFunciARB(GLuint buf, GLenum src, GLenum dst)
    {
    
    glad_glBlendFunciARB(buf,src,dst);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glBlendFunciARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glBlendFuncSeparateiARB(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha)
    {
    
    glad_glBlendFuncSeparateiARB(buf,srcRGB,dstRGB,srcAlpha,dstAlpha);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glBlendFuncSeparateiARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glDrawArraysInstancedARB(GLenum mode, GLint first, GLsizei count, GLsizei primcount)
    {
    
    glad_glDrawArraysInstancedARB(mode,first,count,primcount);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glDrawArraysInstancedARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glDrawElementsInstancedARB(GLenum mode, GLsizei count, GLenum type, const void* indices, GLsizei primcount)
    {
    
    glad_glDrawElementsInstancedARB(mode,count,type,indices,primcount);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glDrawElementsInstancedARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramStringARB(GLenum target, GLenum format, GLsizei len, const void* string)
    {
    
    glad_glProgramStringARB(target,format,len,string);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramStringARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glBindProgramARB(GLenum target, GLuint program)
    {
    
    glad_glBindProgramARB(target,program);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glBindProgramARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glDeleteProgramsARB(GLsizei n, const GLuint* programs)
    {
    
    glad_glDeleteProgramsARB(n,programs);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glDeleteProgramsARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGenProgramsARB(GLsizei n, GLuint* programs)
    {
    
    glad_glGenProgramsARB(n,programs);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGenProgramsARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramEnvParameter4dARB(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
    {
    
    glad_glProgramEnvParameter4dARB(target,index,x,y,z,w);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramEnvParameter4dARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramEnvParameter4dvARB(GLenum target, GLuint index, const GLdouble* params)
    {
    
    glad_glProgramEnvParameter4dvARB(target,index,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramEnvParameter4dvARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramEnvParameter4fARB(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
    {
    
    glad_glProgramEnvParameter4fARB(target,index,x,y,z,w);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramEnvParameter4fARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramEnvParameter4fvARB(GLenum target, GLuint index, const GLfloat* params)
    {
    
    glad_glProgramEnvParameter4fvARB(target,index,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramEnvParameter4fvARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramLocalParameter4dARB(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
    {
    
    glad_glProgramLocalParameter4dARB(target,index,x,y,z,w);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramLocalParameter4dARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramLocalParameter4dvARB(GLenum target, GLuint index, const GLdouble* params)
    {
    
    glad_glProgramLocalParameter4dvARB(target,index,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramLocalParameter4dvARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramLocalParameter4fARB(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
    {
    
    glad_glProgramLocalParameter4fARB(target,index,x,y,z,w);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramLocalParameter4fARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramLocalParameter4fvARB(GLenum target, GLuint index, const GLfloat* params)
    {
    
    glad_glProgramLocalParameter4fvARB(target,index,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramLocalParameter4fvARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetProgramEnvParameterdvARB(GLenum target, GLuint index, GLdouble* params)
    {
    
    glad_glGetProgramEnvParameterdvARB(target,index,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetProgramEnvParameterdvARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetProgramEnvParameterfvARB(GLenum target, GLuint index, GLfloat* params)
    {
    
    glad_glGetProgramEnvParameterfvARB(target,index,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetProgramEnvParameterfvARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetProgramLocalParameterdvARB(GLenum target, GLuint index, GLdouble* params)
    {
    
    glad_glGetProgramLocalParameterdvARB(target,index,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetProgramLocalParameterdvARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetProgramLocalParameterfvARB(GLenum target, GLuint index, GLfloat* params)
    {
    
    glad_glGetProgramLocalParameterfvARB(target,index,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetProgramLocalParameterfvARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetProgramivARB(GLenum target, GLenum pname, GLint* params)
    {
    
    glad_glGetProgramivARB(target,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetProgramivARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetProgramStringARB(GLenum target, GLenum pname, void* string)
    {
    
    glad_glGetProgramStringARB(target,pname,string);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetProgramStringARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    GLboolean __cdecl glwrap_glIsProgramARB(GLuint program)
    {
    
    GLboolean ret = glad_glIsProgramARB(program);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glIsProgramARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	return ret;
    }

    void __cdecl glwrap_glProgramParameteriARB(GLuint program, GLenum pname, GLint value)
    {
    
    glad_glProgramParameteriARB(program,pname,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramParameteriARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glFramebufferTextureARB(GLenum target, GLenum attachment, GLuint texture, GLint level)
    {
    
    glad_glFramebufferTextureARB(target,attachment,texture,level);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glFramebufferTextureARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glFramebufferTextureLayerARB(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer)
    {
    
    glad_glFramebufferTextureLayerARB(target,attachment,texture,level,layer);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glFramebufferTextureLayerARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glFramebufferTextureFaceARB(GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face)
    {
    
    glad_glFramebufferTextureFaceARB(target,attachment,texture,level,face);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glFramebufferTextureFaceARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glSpecializeShaderARB(GLuint shader, const GLchar* pEntryPoint, GLuint numSpecializationConstants, const GLuint* pConstantIndex, const GLuint* pConstantValue)
    {
    
    glad_glSpecializeShaderARB(shader,pEntryPoint,numSpecializationConstants,pConstantIndex,pConstantValue);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glSpecializeShaderARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glUniform1i64ARB(GLint location, GLint64 x)
    {
    
    glad_glUniform1i64ARB(location,x);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glUniform1i64ARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glUniform2i64ARB(GLint location, GLint64 x, GLint64 y)
    {
    
    glad_glUniform2i64ARB(location,x,y);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glUniform2i64ARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glUniform3i64ARB(GLint location, GLint64 x, GLint64 y, GLint64 z)
    {
    
    glad_glUniform3i64ARB(location,x,y,z);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glUniform3i64ARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glUniform4i64ARB(GLint location, GLint64 x, GLint64 y, GLint64 z, GLint64 w)
    {
    
    glad_glUniform4i64ARB(location,x,y,z,w);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glUniform4i64ARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glUniform1i64vARB(GLint location, GLsizei count, const GLint64* value)
    {
    
    glad_glUniform1i64vARB(location,count,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glUniform1i64vARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glUniform2i64vARB(GLint location, GLsizei count, const GLint64* value)
    {
    
    glad_glUniform2i64vARB(location,count,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glUniform2i64vARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glUniform3i64vARB(GLint location, GLsizei count, const GLint64* value)
    {
    
    glad_glUniform3i64vARB(location,count,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glUniform3i64vARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glUniform4i64vARB(GLint location, GLsizei count, const GLint64* value)
    {
    
    glad_glUniform4i64vARB(location,count,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glUniform4i64vARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glUniform1ui64ARB(GLint location, GLuint64 x)
    {
    
    glad_glUniform1ui64ARB(location,x);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glUniform1ui64ARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glUniform2ui64ARB(GLint location, GLuint64 x, GLuint64 y)
    {
    
    glad_glUniform2ui64ARB(location,x,y);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glUniform2ui64ARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glUniform3ui64ARB(GLint location, GLuint64 x, GLuint64 y, GLuint64 z)
    {
    
    glad_glUniform3ui64ARB(location,x,y,z);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glUniform3ui64ARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glUniform4ui64ARB(GLint location, GLuint64 x, GLuint64 y, GLuint64 z, GLuint64 w)
    {
    
    glad_glUniform4ui64ARB(location,x,y,z,w);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glUniform4ui64ARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glUniform1ui64vARB(GLint location, GLsizei count, const GLuint64* value)
    {
    
    glad_glUniform1ui64vARB(location,count,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glUniform1ui64vARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glUniform2ui64vARB(GLint location, GLsizei count, const GLuint64* value)
    {
    
    glad_glUniform2ui64vARB(location,count,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glUniform2ui64vARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glUniform3ui64vARB(GLint location, GLsizei count, const GLuint64* value)
    {
    
    glad_glUniform3ui64vARB(location,count,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glUniform3ui64vARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glUniform4ui64vARB(GLint location, GLsizei count, const GLuint64* value)
    {
    
    glad_glUniform4ui64vARB(location,count,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glUniform4ui64vARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetUniformi64vARB(GLuint program, GLint location, GLint64* params)
    {
    
    glad_glGetUniformi64vARB(program,location,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetUniformi64vARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetUniformui64vARB(GLuint program, GLint location, GLuint64* params)
    {
    
    glad_glGetUniformui64vARB(program,location,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetUniformui64vARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetnUniformi64vARB(GLuint program, GLint location, GLsizei bufSize, GLint64* params)
    {
    
    glad_glGetnUniformi64vARB(program,location,bufSize,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetnUniformi64vARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetnUniformui64vARB(GLuint program, GLint location, GLsizei bufSize, GLuint64* params)
    {
    
    glad_glGetnUniformui64vARB(program,location,bufSize,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetnUniformui64vARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramUniform1i64ARB(GLuint program, GLint location, GLint64 x)
    {
    
    glad_glProgramUniform1i64ARB(program,location,x);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramUniform1i64ARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramUniform2i64ARB(GLuint program, GLint location, GLint64 x, GLint64 y)
    {
    
    glad_glProgramUniform2i64ARB(program,location,x,y);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramUniform2i64ARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramUniform3i64ARB(GLuint program, GLint location, GLint64 x, GLint64 y, GLint64 z)
    {
    
    glad_glProgramUniform3i64ARB(program,location,x,y,z);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramUniform3i64ARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramUniform4i64ARB(GLuint program, GLint location, GLint64 x, GLint64 y, GLint64 z, GLint64 w)
    {
    
    glad_glProgramUniform4i64ARB(program,location,x,y,z,w);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramUniform4i64ARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramUniform1i64vARB(GLuint program, GLint location, GLsizei count, const GLint64* value)
    {
    
    glad_glProgramUniform1i64vARB(program,location,count,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramUniform1i64vARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramUniform2i64vARB(GLuint program, GLint location, GLsizei count, const GLint64* value)
    {
    
    glad_glProgramUniform2i64vARB(program,location,count,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramUniform2i64vARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramUniform3i64vARB(GLuint program, GLint location, GLsizei count, const GLint64* value)
    {
    
    glad_glProgramUniform3i64vARB(program,location,count,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramUniform3i64vARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramUniform4i64vARB(GLuint program, GLint location, GLsizei count, const GLint64* value)
    {
    
    glad_glProgramUniform4i64vARB(program,location,count,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramUniform4i64vARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramUniform1ui64ARB(GLuint program, GLint location, GLuint64 x)
    {
    
    glad_glProgramUniform1ui64ARB(program,location,x);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramUniform1ui64ARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramUniform2ui64ARB(GLuint program, GLint location, GLuint64 x, GLuint64 y)
    {
    
    glad_glProgramUniform2ui64ARB(program,location,x,y);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramUniform2ui64ARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramUniform3ui64ARB(GLuint program, GLint location, GLuint64 x, GLuint64 y, GLuint64 z)
    {
    
    glad_glProgramUniform3ui64ARB(program,location,x,y,z);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramUniform3ui64ARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramUniform4ui64ARB(GLuint program, GLint location, GLuint64 x, GLuint64 y, GLuint64 z, GLuint64 w)
    {
    
    glad_glProgramUniform4ui64ARB(program,location,x,y,z,w);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramUniform4ui64ARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramUniform1ui64vARB(GLuint program, GLint location, GLsizei count, const GLuint64* value)
    {
    
    glad_glProgramUniform1ui64vARB(program,location,count,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramUniform1ui64vARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramUniform2ui64vARB(GLuint program, GLint location, GLsizei count, const GLuint64* value)
    {
    
    glad_glProgramUniform2ui64vARB(program,location,count,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramUniform2ui64vARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramUniform3ui64vARB(GLuint program, GLint location, GLsizei count, const GLuint64* value)
    {
    
    glad_glProgramUniform3ui64vARB(program,location,count,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramUniform3ui64vARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramUniform4ui64vARB(GLuint program, GLint location, GLsizei count, const GLuint64* value)
    {
    
    glad_glProgramUniform4ui64vARB(program,location,count,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramUniform4ui64vARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glColorTable(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void* table)
    {
    
    glad_glColorTable(target,internalformat,width,format,type,table);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glColorTable");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glColorTableParameterfv(GLenum target, GLenum pname, const GLfloat* params)
    {
    
    glad_glColorTableParameterfv(target,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glColorTableParameterfv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glColorTableParameteriv(GLenum target, GLenum pname, const GLint* params)
    {
    
    glad_glColorTableParameteriv(target,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glColorTableParameteriv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glCopyColorTable(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width)
    {
    
    glad_glCopyColorTable(target,internalformat,x,y,width);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glCopyColorTable");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetColorTable(GLenum target, GLenum format, GLenum type, void* table)
    {
    
    glad_glGetColorTable(target,format,type,table);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetColorTable");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetColorTableParameterfv(GLenum target, GLenum pname, GLfloat* params)
    {
    
    glad_glGetColorTableParameterfv(target,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetColorTableParameterfv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetColorTableParameteriv(GLenum target, GLenum pname, GLint* params)
    {
    
    glad_glGetColorTableParameteriv(target,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetColorTableParameteriv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glColorSubTable(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const void* data)
    {
    
    glad_glColorSubTable(target,start,count,format,type,data);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glColorSubTable");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glCopyColorSubTable(GLenum target, GLsizei start, GLint x, GLint y, GLsizei width)
    {
    
    glad_glCopyColorSubTable(target,start,x,y,width);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glCopyColorSubTable");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glConvolutionFilter1D(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void* image)
    {
    
    glad_glConvolutionFilter1D(target,internalformat,width,format,type,image);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glConvolutionFilter1D");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glConvolutionFilter2D(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void* image)
    {
    
    glad_glConvolutionFilter2D(target,internalformat,width,height,format,type,image);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glConvolutionFilter2D");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glConvolutionParameterf(GLenum target, GLenum pname, GLfloat params)
    {
    
    glad_glConvolutionParameterf(target,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glConvolutionParameterf");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glConvolutionParameterfv(GLenum target, GLenum pname, const GLfloat* params)
    {
    
    glad_glConvolutionParameterfv(target,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glConvolutionParameterfv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glConvolutionParameteri(GLenum target, GLenum pname, GLint params)
    {
    
    glad_glConvolutionParameteri(target,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glConvolutionParameteri");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glConvolutionParameteriv(GLenum target, GLenum pname, const GLint* params)
    {
    
    glad_glConvolutionParameteriv(target,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glConvolutionParameteriv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glCopyConvolutionFilter1D(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width)
    {
    
    glad_glCopyConvolutionFilter1D(target,internalformat,x,y,width);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glCopyConvolutionFilter1D");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glCopyConvolutionFilter2D(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height)
    {
    
    glad_glCopyConvolutionFilter2D(target,internalformat,x,y,width,height);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glCopyConvolutionFilter2D");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetConvolutionFilter(GLenum target, GLenum format, GLenum type, void* image)
    {
    
    glad_glGetConvolutionFilter(target,format,type,image);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetConvolutionFilter");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetConvolutionParameterfv(GLenum target, GLenum pname, GLfloat* params)
    {
    
    glad_glGetConvolutionParameterfv(target,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetConvolutionParameterfv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetConvolutionParameteriv(GLenum target, GLenum pname, GLint* params)
    {
    
    glad_glGetConvolutionParameteriv(target,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetConvolutionParameteriv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetSeparableFilter(GLenum target, GLenum format, GLenum type, void* row, void* column, void* span)
    {
    
    glad_glGetSeparableFilter(target,format,type,row,column,span);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetSeparableFilter");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glSeparableFilter2D(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void* row, const void* column)
    {
    
    glad_glSeparableFilter2D(target,internalformat,width,height,format,type,row,column);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glSeparableFilter2D");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetHistogram(GLenum target, GLboolean reset, GLenum format, GLenum type, void* values)
    {
    
    glad_glGetHistogram(target,reset,format,type,values);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetHistogram");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetHistogramParameterfv(GLenum target, GLenum pname, GLfloat* params)
    {
    
    glad_glGetHistogramParameterfv(target,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetHistogramParameterfv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetHistogramParameteriv(GLenum target, GLenum pname, GLint* params)
    {
    
    glad_glGetHistogramParameteriv(target,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetHistogramParameteriv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetMinmax(GLenum target, GLboolean reset, GLenum format, GLenum type, void* values)
    {
    
    glad_glGetMinmax(target,reset,format,type,values);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetMinmax");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetMinmaxParameterfv(GLenum target, GLenum pname, GLfloat* params)
    {
    
    glad_glGetMinmaxParameterfv(target,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetMinmaxParameterfv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetMinmaxParameteriv(GLenum target, GLenum pname, GLint* params)
    {
    
    glad_glGetMinmaxParameteriv(target,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetMinmaxParameteriv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glHistogram(GLenum target, GLsizei width, GLenum internalformat, GLboolean sink)
    {
    
    glad_glHistogram(target,width,internalformat,sink);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glHistogram");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMinmax(GLenum target, GLenum internalformat, GLboolean sink)
    {
    
    glad_glMinmax(target,internalformat,sink);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMinmax");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glResetHistogram(GLenum target)
    {
    
    glad_glResetHistogram(target);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glResetHistogram");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glResetMinmax(GLenum target)
    {
    
    glad_glResetMinmax(target);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glResetMinmax");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMultiDrawArraysIndirectCountARB(GLenum mode, const void* indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride)
    {
    
    glad_glMultiDrawArraysIndirectCountARB(mode,indirect,drawcount,maxdrawcount,stride);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMultiDrawArraysIndirectCountARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMultiDrawElementsIndirectCountARB(GLenum mode, GLenum type, const void* indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride)
    {
    
    glad_glMultiDrawElementsIndirectCountARB(mode,type,indirect,drawcount,maxdrawcount,stride);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMultiDrawElementsIndirectCountARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttribDivisorARB(GLuint index, GLuint divisor)
    {
    
    glad_glVertexAttribDivisorARB(index,divisor);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttribDivisorARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glCurrentPaletteMatrixARB(GLint index)
    {
    
    glad_glCurrentPaletteMatrixARB(index);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glCurrentPaletteMatrixARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMatrixIndexubvARB(GLint size, const GLubyte* indices)
    {
    
    glad_glMatrixIndexubvARB(size,indices);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMatrixIndexubvARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMatrixIndexusvARB(GLint size, const GLushort* indices)
    {
    
    glad_glMatrixIndexusvARB(size,indices);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMatrixIndexusvARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMatrixIndexuivARB(GLint size, const GLuint* indices)
    {
    
    glad_glMatrixIndexuivARB(size,indices);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMatrixIndexuivARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMatrixIndexPointerARB(GLint size, GLenum type, GLsizei stride, const void* pointer)
    {
    
    glad_glMatrixIndexPointerARB(size,type,stride,pointer);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMatrixIndexPointerARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glSampleCoverageARB(GLfloat value, GLboolean invert)
    {
    
    glad_glSampleCoverageARB(value,invert);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glSampleCoverageARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glActiveTextureARB(GLenum texture)
    {
    
    glad_glActiveTextureARB(texture);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glActiveTextureARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glClientActiveTextureARB(GLenum texture)
    {
    
    glad_glClientActiveTextureARB(texture);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glClientActiveTextureARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMultiTexCoord1dARB(GLenum target, GLdouble s)
    {
    
    glad_glMultiTexCoord1dARB(target,s);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMultiTexCoord1dARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMultiTexCoord1dvARB(GLenum target, const GLdouble* v)
    {
    
    glad_glMultiTexCoord1dvARB(target,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMultiTexCoord1dvARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMultiTexCoord1fARB(GLenum target, GLfloat s)
    {
    
    glad_glMultiTexCoord1fARB(target,s);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMultiTexCoord1fARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMultiTexCoord1fvARB(GLenum target, const GLfloat* v)
    {
    
    glad_glMultiTexCoord1fvARB(target,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMultiTexCoord1fvARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMultiTexCoord1iARB(GLenum target, GLint s)
    {
    
    glad_glMultiTexCoord1iARB(target,s);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMultiTexCoord1iARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMultiTexCoord1ivARB(GLenum target, const GLint* v)
    {
    
    glad_glMultiTexCoord1ivARB(target,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMultiTexCoord1ivARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMultiTexCoord1sARB(GLenum target, GLshort s)
    {
    
    glad_glMultiTexCoord1sARB(target,s);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMultiTexCoord1sARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMultiTexCoord1svARB(GLenum target, const GLshort* v)
    {
    
    glad_glMultiTexCoord1svARB(target,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMultiTexCoord1svARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMultiTexCoord2dARB(GLenum target, GLdouble s, GLdouble t)
    {
    
    glad_glMultiTexCoord2dARB(target,s,t);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMultiTexCoord2dARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMultiTexCoord2dvARB(GLenum target, const GLdouble* v)
    {
    
    glad_glMultiTexCoord2dvARB(target,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMultiTexCoord2dvARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMultiTexCoord2fARB(GLenum target, GLfloat s, GLfloat t)
    {
    
    glad_glMultiTexCoord2fARB(target,s,t);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMultiTexCoord2fARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMultiTexCoord2fvARB(GLenum target, const GLfloat* v)
    {
    
    glad_glMultiTexCoord2fvARB(target,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMultiTexCoord2fvARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMultiTexCoord2iARB(GLenum target, GLint s, GLint t)
    {
    
    glad_glMultiTexCoord2iARB(target,s,t);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMultiTexCoord2iARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMultiTexCoord2ivARB(GLenum target, const GLint* v)
    {
    
    glad_glMultiTexCoord2ivARB(target,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMultiTexCoord2ivARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMultiTexCoord2sARB(GLenum target, GLshort s, GLshort t)
    {
    
    glad_glMultiTexCoord2sARB(target,s,t);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMultiTexCoord2sARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMultiTexCoord2svARB(GLenum target, const GLshort* v)
    {
    
    glad_glMultiTexCoord2svARB(target,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMultiTexCoord2svARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMultiTexCoord3dARB(GLenum target, GLdouble s, GLdouble t, GLdouble r)
    {
    
    glad_glMultiTexCoord3dARB(target,s,t,r);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMultiTexCoord3dARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMultiTexCoord3dvARB(GLenum target, const GLdouble* v)
    {
    
    glad_glMultiTexCoord3dvARB(target,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMultiTexCoord3dvARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMultiTexCoord3fARB(GLenum target, GLfloat s, GLfloat t, GLfloat r)
    {
    
    glad_glMultiTexCoord3fARB(target,s,t,r);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMultiTexCoord3fARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMultiTexCoord3fvARB(GLenum target, const GLfloat* v)
    {
    
    glad_glMultiTexCoord3fvARB(target,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMultiTexCoord3fvARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMultiTexCoord3iARB(GLenum target, GLint s, GLint t, GLint r)
    {
    
    glad_glMultiTexCoord3iARB(target,s,t,r);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMultiTexCoord3iARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMultiTexCoord3ivARB(GLenum target, const GLint* v)
    {
    
    glad_glMultiTexCoord3ivARB(target,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMultiTexCoord3ivARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMultiTexCoord3sARB(GLenum target, GLshort s, GLshort t, GLshort r)
    {
    
    glad_glMultiTexCoord3sARB(target,s,t,r);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMultiTexCoord3sARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMultiTexCoord3svARB(GLenum target, const GLshort* v)
    {
    
    glad_glMultiTexCoord3svARB(target,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMultiTexCoord3svARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMultiTexCoord4dARB(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q)
    {
    
    glad_glMultiTexCoord4dARB(target,s,t,r,q);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMultiTexCoord4dARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMultiTexCoord4dvARB(GLenum target, const GLdouble* v)
    {
    
    glad_glMultiTexCoord4dvARB(target,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMultiTexCoord4dvARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMultiTexCoord4fARB(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q)
    {
    
    glad_glMultiTexCoord4fARB(target,s,t,r,q);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMultiTexCoord4fARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMultiTexCoord4fvARB(GLenum target, const GLfloat* v)
    {
    
    glad_glMultiTexCoord4fvARB(target,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMultiTexCoord4fvARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMultiTexCoord4iARB(GLenum target, GLint s, GLint t, GLint r, GLint q)
    {
    
    glad_glMultiTexCoord4iARB(target,s,t,r,q);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMultiTexCoord4iARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMultiTexCoord4ivARB(GLenum target, const GLint* v)
    {
    
    glad_glMultiTexCoord4ivARB(target,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMultiTexCoord4ivARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMultiTexCoord4sARB(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q)
    {
    
    glad_glMultiTexCoord4sARB(target,s,t,r,q);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMultiTexCoord4sARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMultiTexCoord4svARB(GLenum target, const GLshort* v)
    {
    
    glad_glMultiTexCoord4svARB(target,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMultiTexCoord4svARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGenQueriesARB(GLsizei n, GLuint* ids)
    {
    
    glad_glGenQueriesARB(n,ids);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGenQueriesARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glDeleteQueriesARB(GLsizei n, const GLuint* ids)
    {
    
    glad_glDeleteQueriesARB(n,ids);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glDeleteQueriesARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    GLboolean __cdecl glwrap_glIsQueryARB(GLuint id)
    {
    
    GLboolean ret = glad_glIsQueryARB(id);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glIsQueryARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	return ret;
    }

    void __cdecl glwrap_glBeginQueryARB(GLenum target, GLuint id)
    {
    
    glad_glBeginQueryARB(target,id);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glBeginQueryARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glEndQueryARB(GLenum target)
    {
    
    glad_glEndQueryARB(target);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glEndQueryARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetQueryivARB(GLenum target, GLenum pname, GLint* params)
    {
    
    glad_glGetQueryivARB(target,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetQueryivARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetQueryObjectivARB(GLuint id, GLenum pname, GLint* params)
    {
    
    glad_glGetQueryObjectivARB(id,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetQueryObjectivARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetQueryObjectuivARB(GLuint id, GLenum pname, GLuint* params)
    {
    
    glad_glGetQueryObjectuivARB(id,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetQueryObjectuivARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMaxShaderCompilerThreadsARB(GLuint count)
    {
    
    glad_glMaxShaderCompilerThreadsARB(count);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMaxShaderCompilerThreadsARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glPointParameterfARB(GLenum pname, GLfloat param)
    {
    
    glad_glPointParameterfARB(pname,param);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glPointParameterfARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glPointParameterfvARB(GLenum pname, const GLfloat* params)
    {
    
    glad_glPointParameterfvARB(pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glPointParameterfvARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    GLenum __cdecl glwrap_glGetGraphicsResetStatusARB()
    {
    
    GLenum ret = glad_glGetGraphicsResetStatusARB();
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetGraphicsResetStatusARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	return ret;
    }

    void __cdecl glwrap_glGetnTexImageARB(GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void* img)
    {
    
    glad_glGetnTexImageARB(target,level,format,type,bufSize,img);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetnTexImageARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glReadnPixelsARB(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void* data)
    {
    
    glad_glReadnPixelsARB(x,y,width,height,format,type,bufSize,data);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glReadnPixelsARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetnCompressedTexImageARB(GLenum target, GLint lod, GLsizei bufSize, void* img)
    {
    
    glad_glGetnCompressedTexImageARB(target,lod,bufSize,img);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetnCompressedTexImageARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetnUniformfvARB(GLuint program, GLint location, GLsizei bufSize, GLfloat* params)
    {
    
    glad_glGetnUniformfvARB(program,location,bufSize,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetnUniformfvARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetnUniformivARB(GLuint program, GLint location, GLsizei bufSize, GLint* params)
    {
    
    glad_glGetnUniformivARB(program,location,bufSize,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetnUniformivARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetnUniformuivARB(GLuint program, GLint location, GLsizei bufSize, GLuint* params)
    {
    
    glad_glGetnUniformuivARB(program,location,bufSize,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetnUniformuivARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetnUniformdvARB(GLuint program, GLint location, GLsizei bufSize, GLdouble* params)
    {
    
    glad_glGetnUniformdvARB(program,location,bufSize,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetnUniformdvARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetnMapdvARB(GLenum target, GLenum query, GLsizei bufSize, GLdouble* v)
    {
    
    glad_glGetnMapdvARB(target,query,bufSize,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetnMapdvARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetnMapfvARB(GLenum target, GLenum query, GLsizei bufSize, GLfloat* v)
    {
    
    glad_glGetnMapfvARB(target,query,bufSize,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetnMapfvARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetnMapivARB(GLenum target, GLenum query, GLsizei bufSize, GLint* v)
    {
    
    glad_glGetnMapivARB(target,query,bufSize,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetnMapivARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetnPixelMapfvARB(GLenum map, GLsizei bufSize, GLfloat* values)
    {
    
    glad_glGetnPixelMapfvARB(map,bufSize,values);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetnPixelMapfvARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetnPixelMapuivARB(GLenum map, GLsizei bufSize, GLuint* values)
    {
    
    glad_glGetnPixelMapuivARB(map,bufSize,values);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetnPixelMapuivARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetnPixelMapusvARB(GLenum map, GLsizei bufSize, GLushort* values)
    {
    
    glad_glGetnPixelMapusvARB(map,bufSize,values);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetnPixelMapusvARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetnPolygonStippleARB(GLsizei bufSize, GLubyte* pattern)
    {
    
    glad_glGetnPolygonStippleARB(bufSize,pattern);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetnPolygonStippleARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetnColorTableARB(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void* table)
    {
    
    glad_glGetnColorTableARB(target,format,type,bufSize,table);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetnColorTableARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetnConvolutionFilterARB(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void* image)
    {
    
    glad_glGetnConvolutionFilterARB(target,format,type,bufSize,image);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetnConvolutionFilterARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetnSeparableFilterARB(GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, void* row, GLsizei columnBufSize, void* column, void* span)
    {
    
    glad_glGetnSeparableFilterARB(target,format,type,rowBufSize,row,columnBufSize,column,span);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetnSeparableFilterARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetnHistogramARB(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void* values)
    {
    
    glad_glGetnHistogramARB(target,reset,format,type,bufSize,values);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetnHistogramARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetnMinmaxARB(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void* values)
    {
    
    glad_glGetnMinmaxARB(target,reset,format,type,bufSize,values);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetnMinmaxARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glFramebufferSampleLocationsfvARB(GLenum target, GLuint start, GLsizei count, const GLfloat* v)
    {
    
    glad_glFramebufferSampleLocationsfvARB(target,start,count,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glFramebufferSampleLocationsfvARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glNamedFramebufferSampleLocationsfvARB(GLuint framebuffer, GLuint start, GLsizei count, const GLfloat* v)
    {
    
    glad_glNamedFramebufferSampleLocationsfvARB(framebuffer,start,count,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glNamedFramebufferSampleLocationsfvARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glEvaluateDepthValuesARB()
    {
    
    glad_glEvaluateDepthValuesARB();
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glEvaluateDepthValuesARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMinSampleShadingARB(GLfloat value)
    {
    
    glad_glMinSampleShadingARB(value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMinSampleShadingARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glDeleteObjectARB(GLhandleARB obj)
    {
    
    glad_glDeleteObjectARB(obj);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glDeleteObjectARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    GLhandleARB __cdecl glwrap_glGetHandleARB(GLenum pname)
    {
    
    GLhandleARB ret = glad_glGetHandleARB(pname);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetHandleARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	return ret;
    }

    void __cdecl glwrap_glDetachObjectARB(GLhandleARB containerObj, GLhandleARB attachedObj)
    {
    
    glad_glDetachObjectARB(containerObj,attachedObj);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glDetachObjectARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    GLhandleARB __cdecl glwrap_glCreateShaderObjectARB(GLenum shaderType)
    {
    
    GLhandleARB ret = glad_glCreateShaderObjectARB(shaderType);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glCreateShaderObjectARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	return ret;
    }

    void __cdecl glwrap_glShaderSourceARB(GLhandleARB shaderObj, GLsizei count, const GLcharARB** string, const GLint* length)
    {
    
    glad_glShaderSourceARB(shaderObj,count,string,length);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glShaderSourceARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glCompileShaderARB(GLhandleARB shaderObj)
    {
    
    glad_glCompileShaderARB(shaderObj);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glCompileShaderARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    GLhandleARB __cdecl glwrap_glCreateProgramObjectARB()
    {
    
    GLhandleARB ret = glad_glCreateProgramObjectARB();
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glCreateProgramObjectARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	return ret;
    }

    void __cdecl glwrap_glAttachObjectARB(GLhandleARB containerObj, GLhandleARB obj)
    {
    
    glad_glAttachObjectARB(containerObj,obj);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glAttachObjectARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glLinkProgramARB(GLhandleARB programObj)
    {
    
    glad_glLinkProgramARB(programObj);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glLinkProgramARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glUseProgramObjectARB(GLhandleARB programObj)
    {
    
    glad_glUseProgramObjectARB(programObj);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glUseProgramObjectARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glValidateProgramARB(GLhandleARB programObj)
    {
    
    glad_glValidateProgramARB(programObj);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glValidateProgramARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glUniform1fARB(GLint location, GLfloat v0)
    {
    
    glad_glUniform1fARB(location,v0);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glUniform1fARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glUniform2fARB(GLint location, GLfloat v0, GLfloat v1)
    {
    
    glad_glUniform2fARB(location,v0,v1);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glUniform2fARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glUniform3fARB(GLint location, GLfloat v0, GLfloat v1, GLfloat v2)
    {
    
    glad_glUniform3fARB(location,v0,v1,v2);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glUniform3fARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glUniform4fARB(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)
    {
    
    glad_glUniform4fARB(location,v0,v1,v2,v3);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glUniform4fARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glUniform1iARB(GLint location, GLint v0)
    {
    
    glad_glUniform1iARB(location,v0);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glUniform1iARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glUniform2iARB(GLint location, GLint v0, GLint v1)
    {
    
    glad_glUniform2iARB(location,v0,v1);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glUniform2iARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glUniform3iARB(GLint location, GLint v0, GLint v1, GLint v2)
    {
    
    glad_glUniform3iARB(location,v0,v1,v2);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glUniform3iARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glUniform4iARB(GLint location, GLint v0, GLint v1, GLint v2, GLint v3)
    {
    
    glad_glUniform4iARB(location,v0,v1,v2,v3);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glUniform4iARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glUniform1fvARB(GLint location, GLsizei count, const GLfloat* value)
    {
    
    glad_glUniform1fvARB(location,count,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glUniform1fvARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glUniform2fvARB(GLint location, GLsizei count, const GLfloat* value)
    {
    
    glad_glUniform2fvARB(location,count,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glUniform2fvARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glUniform3fvARB(GLint location, GLsizei count, const GLfloat* value)
    {
    
    glad_glUniform3fvARB(location,count,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glUniform3fvARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glUniform4fvARB(GLint location, GLsizei count, const GLfloat* value)
    {
    
    glad_glUniform4fvARB(location,count,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glUniform4fvARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glUniform1ivARB(GLint location, GLsizei count, const GLint* value)
    {
    
    glad_glUniform1ivARB(location,count,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glUniform1ivARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glUniform2ivARB(GLint location, GLsizei count, const GLint* value)
    {
    
    glad_glUniform2ivARB(location,count,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glUniform2ivARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glUniform3ivARB(GLint location, GLsizei count, const GLint* value)
    {
    
    glad_glUniform3ivARB(location,count,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glUniform3ivARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glUniform4ivARB(GLint location, GLsizei count, const GLint* value)
    {
    
    glad_glUniform4ivARB(location,count,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glUniform4ivARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glUniformMatrix2fvARB(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)
    {
    
    glad_glUniformMatrix2fvARB(location,count,transpose,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glUniformMatrix2fvARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glUniformMatrix3fvARB(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)
    {
    
    glad_glUniformMatrix3fvARB(location,count,transpose,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glUniformMatrix3fvARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glUniformMatrix4fvARB(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)
    {
    
    glad_glUniformMatrix4fvARB(location,count,transpose,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glUniformMatrix4fvARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetObjectParameterfvARB(GLhandleARB obj, GLenum pname, GLfloat* params)
    {
    
    glad_glGetObjectParameterfvARB(obj,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetObjectParameterfvARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetObjectParameterivARB(GLhandleARB obj, GLenum pname, GLint* params)
    {
    
    glad_glGetObjectParameterivARB(obj,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetObjectParameterivARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetInfoLogARB(GLhandleARB obj, GLsizei maxLength, GLsizei* length, GLcharARB* infoLog)
    {
    
    glad_glGetInfoLogARB(obj,maxLength,length,infoLog);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetInfoLogARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetAttachedObjectsARB(GLhandleARB containerObj, GLsizei maxCount, GLsizei* count, GLhandleARB* obj)
    {
    
    glad_glGetAttachedObjectsARB(containerObj,maxCount,count,obj);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetAttachedObjectsARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    GLint __cdecl glwrap_glGetUniformLocationARB(GLhandleARB programObj, const GLcharARB* name)
    {
    
    GLint ret = glad_glGetUniformLocationARB(programObj,name);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetUniformLocationARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	return ret;
    }

    void __cdecl glwrap_glGetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei* length, GLint* size, GLenum* type, GLcharARB* name)
    {
    
    glad_glGetActiveUniformARB(programObj,index,maxLength,length,size,type,name);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetActiveUniformARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetUniformfvARB(GLhandleARB programObj, GLint location, GLfloat* params)
    {
    
    glad_glGetUniformfvARB(programObj,location,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetUniformfvARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetUniformivARB(GLhandleARB programObj, GLint location, GLint* params)
    {
    
    glad_glGetUniformivARB(programObj,location,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetUniformivARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetShaderSourceARB(GLhandleARB obj, GLsizei maxLength, GLsizei* length, GLcharARB* source)
    {
    
    glad_glGetShaderSourceARB(obj,maxLength,length,source);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetShaderSourceARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glNamedStringARB(GLenum type, GLint namelen, const GLchar* name, GLint stringlen, const GLchar* string)
    {
    
    glad_glNamedStringARB(type,namelen,name,stringlen,string);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glNamedStringARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glDeleteNamedStringARB(GLint namelen, const GLchar* name)
    {
    
    glad_glDeleteNamedStringARB(namelen,name);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glDeleteNamedStringARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glCompileShaderIncludeARB(GLuint shader, GLsizei count, const GLchar** constpath, const GLint* length)
    {
    
    glad_glCompileShaderIncludeARB(shader,count,constpath,length);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glCompileShaderIncludeARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    GLboolean __cdecl glwrap_glIsNamedStringARB(GLint namelen, const GLchar* name)
    {
    
    GLboolean ret = glad_glIsNamedStringARB(namelen,name);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glIsNamedStringARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	return ret;
    }

    void __cdecl glwrap_glGetNamedStringARB(GLint namelen, const GLchar* name, GLsizei bufSize, GLint* stringlen, GLchar* string)
    {
    
    glad_glGetNamedStringARB(namelen,name,bufSize,stringlen,string);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetNamedStringARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetNamedStringivARB(GLint namelen, const GLchar* name, GLenum pname, GLint* params)
    {
    
    glad_glGetNamedStringivARB(namelen,name,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetNamedStringivARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glBufferPageCommitmentARB(GLenum target, GLintptr offset, GLsizeiptr size, GLboolean commit)
    {
    
    glad_glBufferPageCommitmentARB(target,offset,size,commit);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glBufferPageCommitmentARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glNamedBufferPageCommitmentEXT(GLuint buffer, GLintptr offset, GLsizeiptr size, GLboolean commit)
    {
    
    glad_glNamedBufferPageCommitmentEXT(buffer,offset,size,commit);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glNamedBufferPageCommitmentEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glNamedBufferPageCommitmentARB(GLuint buffer, GLintptr offset, GLsizeiptr size, GLboolean commit)
    {
    
    glad_glNamedBufferPageCommitmentARB(buffer,offset,size,commit);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glNamedBufferPageCommitmentARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTexPageCommitmentARB(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit)
    {
    
    glad_glTexPageCommitmentARB(target,level,xoffset,yoffset,zoffset,width,height,depth,commit);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTexPageCommitmentARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTexBufferARB(GLenum target, GLenum internalformat, GLuint buffer)
    {
    
    glad_glTexBufferARB(target,internalformat,buffer);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTexBufferARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glCompressedTexImage3DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void* data)
    {
    
    glad_glCompressedTexImage3DARB(target,level,internalformat,width,height,depth,border,imageSize,data);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glCompressedTexImage3DARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glCompressedTexImage2DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void* data)
    {
    
    glad_glCompressedTexImage2DARB(target,level,internalformat,width,height,border,imageSize,data);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glCompressedTexImage2DARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glCompressedTexImage1DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void* data)
    {
    
    glad_glCompressedTexImage1DARB(target,level,internalformat,width,border,imageSize,data);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glCompressedTexImage1DARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glCompressedTexSubImage3DARB(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void* data)
    {
    
    glad_glCompressedTexSubImage3DARB(target,level,xoffset,yoffset,zoffset,width,height,depth,format,imageSize,data);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glCompressedTexSubImage3DARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glCompressedTexSubImage2DARB(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void* data)
    {
    
    glad_glCompressedTexSubImage2DARB(target,level,xoffset,yoffset,width,height,format,imageSize,data);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glCompressedTexSubImage2DARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glCompressedTexSubImage1DARB(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void* data)
    {
    
    glad_glCompressedTexSubImage1DARB(target,level,xoffset,width,format,imageSize,data);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glCompressedTexSubImage1DARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetCompressedTexImageARB(GLenum target, GLint level, void* img)
    {
    
    glad_glGetCompressedTexImageARB(target,level,img);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetCompressedTexImageARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glLoadTransposeMatrixfARB(const GLfloat* m)
    {
    
    glad_glLoadTransposeMatrixfARB(m);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glLoadTransposeMatrixfARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glLoadTransposeMatrixdARB(const GLdouble* m)
    {
    
    glad_glLoadTransposeMatrixdARB(m);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glLoadTransposeMatrixdARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMultTransposeMatrixfARB(const GLfloat* m)
    {
    
    glad_glMultTransposeMatrixfARB(m);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMultTransposeMatrixfARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMultTransposeMatrixdARB(const GLdouble* m)
    {
    
    glad_glMultTransposeMatrixdARB(m);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMultTransposeMatrixdARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glWeightbvARB(GLint size, const GLbyte* weights)
    {
    
    glad_glWeightbvARB(size,weights);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glWeightbvARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glWeightsvARB(GLint size, const GLshort* weights)
    {
    
    glad_glWeightsvARB(size,weights);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glWeightsvARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glWeightivARB(GLint size, const GLint* weights)
    {
    
    glad_glWeightivARB(size,weights);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glWeightivARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glWeightfvARB(GLint size, const GLfloat* weights)
    {
    
    glad_glWeightfvARB(size,weights);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glWeightfvARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glWeightdvARB(GLint size, const GLdouble* weights)
    {
    
    glad_glWeightdvARB(size,weights);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glWeightdvARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glWeightubvARB(GLint size, const GLubyte* weights)
    {
    
    glad_glWeightubvARB(size,weights);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glWeightubvARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glWeightusvARB(GLint size, const GLushort* weights)
    {
    
    glad_glWeightusvARB(size,weights);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glWeightusvARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glWeightuivARB(GLint size, const GLuint* weights)
    {
    
    glad_glWeightuivARB(size,weights);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glWeightuivARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glWeightPointerARB(GLint size, GLenum type, GLsizei stride, const void* pointer)
    {
    
    glad_glWeightPointerARB(size,type,stride,pointer);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glWeightPointerARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexBlendARB(GLint count)
    {
    
    glad_glVertexBlendARB(count);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexBlendARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glBindBufferARB(GLenum target, GLuint buffer)
    {
    
    glad_glBindBufferARB(target,buffer);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glBindBufferARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glDeleteBuffersARB(GLsizei n, const GLuint* buffers)
    {
    
    glad_glDeleteBuffersARB(n,buffers);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glDeleteBuffersARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGenBuffersARB(GLsizei n, GLuint* buffers)
    {
    
    glad_glGenBuffersARB(n,buffers);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGenBuffersARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    GLboolean __cdecl glwrap_glIsBufferARB(GLuint buffer)
    {
    
    GLboolean ret = glad_glIsBufferARB(buffer);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glIsBufferARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	return ret;
    }

    void __cdecl glwrap_glBufferDataARB(GLenum target, GLsizeiptrARB size, const void* data, GLenum usage)
    {
    
    glad_glBufferDataARB(target,size,data,usage);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glBufferDataARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glBufferSubDataARB(GLenum target, GLintptrARB offset, GLsizeiptrARB size, const void* data)
    {
    
    glad_glBufferSubDataARB(target,offset,size,data);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glBufferSubDataARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetBufferSubDataARB(GLenum target, GLintptrARB offset, GLsizeiptrARB size, void* data)
    {
    
    glad_glGetBufferSubDataARB(target,offset,size,data);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetBufferSubDataARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void * __cdecl glwrap_glMapBufferARB(GLenum target, GLenum access)
    {
    
    void * ret = glad_glMapBufferARB(target,access);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMapBufferARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	return ret;
    }

    GLboolean __cdecl glwrap_glUnmapBufferARB(GLenum target)
    {
    
    GLboolean ret = glad_glUnmapBufferARB(target);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glUnmapBufferARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	return ret;
    }

    void __cdecl glwrap_glGetBufferParameterivARB(GLenum target, GLenum pname, GLint* params)
    {
    
    glad_glGetBufferParameterivARB(target,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetBufferParameterivARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetBufferPointervARB(GLenum target, GLenum pname, void** params)
    {
    
    glad_glGetBufferPointervARB(target,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetBufferPointervARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttrib1dARB(GLuint index, GLdouble x)
    {
    
    glad_glVertexAttrib1dARB(index,x);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttrib1dARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttrib1dvARB(GLuint index, const GLdouble* v)
    {
    
    glad_glVertexAttrib1dvARB(index,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttrib1dvARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttrib1fARB(GLuint index, GLfloat x)
    {
    
    glad_glVertexAttrib1fARB(index,x);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttrib1fARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttrib1fvARB(GLuint index, const GLfloat* v)
    {
    
    glad_glVertexAttrib1fvARB(index,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttrib1fvARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttrib1sARB(GLuint index, GLshort x)
    {
    
    glad_glVertexAttrib1sARB(index,x);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttrib1sARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttrib1svARB(GLuint index, const GLshort* v)
    {
    
    glad_glVertexAttrib1svARB(index,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttrib1svARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttrib2dARB(GLuint index, GLdouble x, GLdouble y)
    {
    
    glad_glVertexAttrib2dARB(index,x,y);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttrib2dARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttrib2dvARB(GLuint index, const GLdouble* v)
    {
    
    glad_glVertexAttrib2dvARB(index,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttrib2dvARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttrib2fARB(GLuint index, GLfloat x, GLfloat y)
    {
    
    glad_glVertexAttrib2fARB(index,x,y);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttrib2fARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttrib2fvARB(GLuint index, const GLfloat* v)
    {
    
    glad_glVertexAttrib2fvARB(index,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttrib2fvARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttrib2sARB(GLuint index, GLshort x, GLshort y)
    {
    
    glad_glVertexAttrib2sARB(index,x,y);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttrib2sARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttrib2svARB(GLuint index, const GLshort* v)
    {
    
    glad_glVertexAttrib2svARB(index,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttrib2svARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttrib3dARB(GLuint index, GLdouble x, GLdouble y, GLdouble z)
    {
    
    glad_glVertexAttrib3dARB(index,x,y,z);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttrib3dARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttrib3dvARB(GLuint index, const GLdouble* v)
    {
    
    glad_glVertexAttrib3dvARB(index,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttrib3dvARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttrib3fARB(GLuint index, GLfloat x, GLfloat y, GLfloat z)
    {
    
    glad_glVertexAttrib3fARB(index,x,y,z);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttrib3fARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttrib3fvARB(GLuint index, const GLfloat* v)
    {
    
    glad_glVertexAttrib3fvARB(index,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttrib3fvARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttrib3sARB(GLuint index, GLshort x, GLshort y, GLshort z)
    {
    
    glad_glVertexAttrib3sARB(index,x,y,z);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttrib3sARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttrib3svARB(GLuint index, const GLshort* v)
    {
    
    glad_glVertexAttrib3svARB(index,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttrib3svARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttrib4NbvARB(GLuint index, const GLbyte* v)
    {
    
    glad_glVertexAttrib4NbvARB(index,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttrib4NbvARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttrib4NivARB(GLuint index, const GLint* v)
    {
    
    glad_glVertexAttrib4NivARB(index,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttrib4NivARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttrib4NsvARB(GLuint index, const GLshort* v)
    {
    
    glad_glVertexAttrib4NsvARB(index,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttrib4NsvARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttrib4NubARB(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w)
    {
    
    glad_glVertexAttrib4NubARB(index,x,y,z,w);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttrib4NubARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttrib4NubvARB(GLuint index, const GLubyte* v)
    {
    
    glad_glVertexAttrib4NubvARB(index,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttrib4NubvARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttrib4NuivARB(GLuint index, const GLuint* v)
    {
    
    glad_glVertexAttrib4NuivARB(index,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttrib4NuivARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttrib4NusvARB(GLuint index, const GLushort* v)
    {
    
    glad_glVertexAttrib4NusvARB(index,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttrib4NusvARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttrib4bvARB(GLuint index, const GLbyte* v)
    {
    
    glad_glVertexAttrib4bvARB(index,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttrib4bvARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttrib4dARB(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
    {
    
    glad_glVertexAttrib4dARB(index,x,y,z,w);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttrib4dARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttrib4dvARB(GLuint index, const GLdouble* v)
    {
    
    glad_glVertexAttrib4dvARB(index,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttrib4dvARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttrib4fARB(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
    {
    
    glad_glVertexAttrib4fARB(index,x,y,z,w);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttrib4fARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttrib4fvARB(GLuint index, const GLfloat* v)
    {
    
    glad_glVertexAttrib4fvARB(index,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttrib4fvARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttrib4ivARB(GLuint index, const GLint* v)
    {
    
    glad_glVertexAttrib4ivARB(index,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttrib4ivARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttrib4sARB(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w)
    {
    
    glad_glVertexAttrib4sARB(index,x,y,z,w);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttrib4sARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttrib4svARB(GLuint index, const GLshort* v)
    {
    
    glad_glVertexAttrib4svARB(index,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttrib4svARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttrib4ubvARB(GLuint index, const GLubyte* v)
    {
    
    glad_glVertexAttrib4ubvARB(index,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttrib4ubvARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttrib4uivARB(GLuint index, const GLuint* v)
    {
    
    glad_glVertexAttrib4uivARB(index,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttrib4uivARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttrib4usvARB(GLuint index, const GLushort* v)
    {
    
    glad_glVertexAttrib4usvARB(index,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttrib4usvARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttribPointerARB(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void* pointer)
    {
    
    glad_glVertexAttribPointerARB(index,size,type,normalized,stride,pointer);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttribPointerARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glEnableVertexAttribArrayARB(GLuint index)
    {
    
    glad_glEnableVertexAttribArrayARB(index);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glEnableVertexAttribArrayARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glDisableVertexAttribArrayARB(GLuint index)
    {
    
    glad_glDisableVertexAttribArrayARB(index);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glDisableVertexAttribArrayARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetVertexAttribdvARB(GLuint index, GLenum pname, GLdouble* params)
    {
    
    glad_glGetVertexAttribdvARB(index,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetVertexAttribdvARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetVertexAttribfvARB(GLuint index, GLenum pname, GLfloat* params)
    {
    
    glad_glGetVertexAttribfvARB(index,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetVertexAttribfvARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetVertexAttribivARB(GLuint index, GLenum pname, GLint* params)
    {
    
    glad_glGetVertexAttribivARB(index,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetVertexAttribivARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetVertexAttribPointervARB(GLuint index, GLenum pname, void** pointer)
    {
    
    glad_glGetVertexAttribPointervARB(index,pname,pointer);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetVertexAttribPointervARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glBindAttribLocationARB(GLhandleARB programObj, GLuint index, const GLcharARB* name)
    {
    
    glad_glBindAttribLocationARB(programObj,index,name);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glBindAttribLocationARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei* length, GLint* size, GLenum* type, GLcharARB* name)
    {
    
    glad_glGetActiveAttribARB(programObj,index,maxLength,length,size,type,name);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetActiveAttribARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    GLint __cdecl glwrap_glGetAttribLocationARB(GLhandleARB programObj, const GLcharARB* name)
    {
    
    GLint ret = glad_glGetAttribLocationARB(programObj,name);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetAttribLocationARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	return ret;
    }

    void __cdecl glwrap_glWindowPos2dARB(GLdouble x, GLdouble y)
    {
    
    glad_glWindowPos2dARB(x,y);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glWindowPos2dARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glWindowPos2dvARB(const GLdouble* v)
    {
    
    glad_glWindowPos2dvARB(v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glWindowPos2dvARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glWindowPos2fARB(GLfloat x, GLfloat y)
    {
    
    glad_glWindowPos2fARB(x,y);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glWindowPos2fARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glWindowPos2fvARB(const GLfloat* v)
    {
    
    glad_glWindowPos2fvARB(v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glWindowPos2fvARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glWindowPos2iARB(GLint x, GLint y)
    {
    
    glad_glWindowPos2iARB(x,y);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glWindowPos2iARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glWindowPos2ivARB(const GLint* v)
    {
    
    glad_glWindowPos2ivARB(v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glWindowPos2ivARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glWindowPos2sARB(GLshort x, GLshort y)
    {
    
    glad_glWindowPos2sARB(x,y);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glWindowPos2sARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glWindowPos2svARB(const GLshort* v)
    {
    
    glad_glWindowPos2svARB(v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glWindowPos2svARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glWindowPos3dARB(GLdouble x, GLdouble y, GLdouble z)
    {
    
    glad_glWindowPos3dARB(x,y,z);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glWindowPos3dARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glWindowPos3dvARB(const GLdouble* v)
    {
    
    glad_glWindowPos3dvARB(v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glWindowPos3dvARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glWindowPos3fARB(GLfloat x, GLfloat y, GLfloat z)
    {
    
    glad_glWindowPos3fARB(x,y,z);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glWindowPos3fARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glWindowPos3fvARB(const GLfloat* v)
    {
    
    glad_glWindowPos3fvARB(v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glWindowPos3fvARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glWindowPos3iARB(GLint x, GLint y, GLint z)
    {
    
    glad_glWindowPos3iARB(x,y,z);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glWindowPos3iARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glWindowPos3ivARB(const GLint* v)
    {
    
    glad_glWindowPos3ivARB(v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glWindowPos3ivARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glWindowPos3sARB(GLshort x, GLshort y, GLshort z)
    {
    
    glad_glWindowPos3sARB(x,y,z);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glWindowPos3sARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glWindowPos3svARB(const GLshort* v)
    {
    
    glad_glWindowPos3svARB(v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glWindowPos3svARB");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glBlendBarrierKHR()
    {
    
    glad_glBlendBarrierKHR();
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glBlendBarrierKHR");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMaxShaderCompilerThreadsKHR(GLuint count)
    {
    
    glad_glMaxShaderCompilerThreadsKHR(count);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMaxShaderCompilerThreadsKHR");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMultiTexCoord1bOES(GLenum texture, GLbyte s)
    {
    
    glad_glMultiTexCoord1bOES(texture,s);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMultiTexCoord1bOES");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMultiTexCoord1bvOES(GLenum texture, const GLbyte* coords)
    {
    
    glad_glMultiTexCoord1bvOES(texture,coords);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMultiTexCoord1bvOES");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMultiTexCoord2bOES(GLenum texture, GLbyte s, GLbyte t)
    {
    
    glad_glMultiTexCoord2bOES(texture,s,t);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMultiTexCoord2bOES");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMultiTexCoord2bvOES(GLenum texture, const GLbyte* coords)
    {
    
    glad_glMultiTexCoord2bvOES(texture,coords);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMultiTexCoord2bvOES");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMultiTexCoord3bOES(GLenum texture, GLbyte s, GLbyte t, GLbyte r)
    {
    
    glad_glMultiTexCoord3bOES(texture,s,t,r);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMultiTexCoord3bOES");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMultiTexCoord3bvOES(GLenum texture, const GLbyte* coords)
    {
    
    glad_glMultiTexCoord3bvOES(texture,coords);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMultiTexCoord3bvOES");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMultiTexCoord4bOES(GLenum texture, GLbyte s, GLbyte t, GLbyte r, GLbyte q)
    {
    
    glad_glMultiTexCoord4bOES(texture,s,t,r,q);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMultiTexCoord4bOES");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMultiTexCoord4bvOES(GLenum texture, const GLbyte* coords)
    {
    
    glad_glMultiTexCoord4bvOES(texture,coords);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMultiTexCoord4bvOES");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTexCoord1bOES(GLbyte s)
    {
    
    glad_glTexCoord1bOES(s);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTexCoord1bOES");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTexCoord1bvOES(const GLbyte* coords)
    {
    
    glad_glTexCoord1bvOES(coords);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTexCoord1bvOES");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTexCoord2bOES(GLbyte s, GLbyte t)
    {
    
    glad_glTexCoord2bOES(s,t);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTexCoord2bOES");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTexCoord2bvOES(const GLbyte* coords)
    {
    
    glad_glTexCoord2bvOES(coords);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTexCoord2bvOES");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTexCoord3bOES(GLbyte s, GLbyte t, GLbyte r)
    {
    
    glad_glTexCoord3bOES(s,t,r);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTexCoord3bOES");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTexCoord3bvOES(const GLbyte* coords)
    {
    
    glad_glTexCoord3bvOES(coords);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTexCoord3bvOES");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTexCoord4bOES(GLbyte s, GLbyte t, GLbyte r, GLbyte q)
    {
    
    glad_glTexCoord4bOES(s,t,r,q);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTexCoord4bOES");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTexCoord4bvOES(const GLbyte* coords)
    {
    
    glad_glTexCoord4bvOES(coords);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTexCoord4bvOES");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertex2bOES(GLbyte x, GLbyte y)
    {
    
    glad_glVertex2bOES(x,y);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertex2bOES");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertex2bvOES(const GLbyte* coords)
    {
    
    glad_glVertex2bvOES(coords);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertex2bvOES");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertex3bOES(GLbyte x, GLbyte y, GLbyte z)
    {
    
    glad_glVertex3bOES(x,y,z);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertex3bOES");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertex3bvOES(const GLbyte* coords)
    {
    
    glad_glVertex3bvOES(coords);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertex3bvOES");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertex4bOES(GLbyte x, GLbyte y, GLbyte z, GLbyte w)
    {
    
    glad_glVertex4bOES(x,y,z,w);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertex4bOES");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertex4bvOES(const GLbyte* coords)
    {
    
    glad_glVertex4bvOES(coords);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertex4bvOES");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glAlphaFuncxOES(GLenum func, GLfixed ref)
    {
    
    glad_glAlphaFuncxOES(func,ref);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glAlphaFuncxOES");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glClearColorxOES(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha)
    {
    
    glad_glClearColorxOES(red,green,blue,alpha);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glClearColorxOES");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glClearDepthxOES(GLfixed depth)
    {
    
    glad_glClearDepthxOES(depth);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glClearDepthxOES");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glClipPlanexOES(GLenum plane, const GLfixed* equation)
    {
    
    glad_glClipPlanexOES(plane,equation);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glClipPlanexOES");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glColor4xOES(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha)
    {
    
    glad_glColor4xOES(red,green,blue,alpha);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glColor4xOES");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glDepthRangexOES(GLfixed n, GLfixed f)
    {
    
    glad_glDepthRangexOES(n,f);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glDepthRangexOES");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glFogxOES(GLenum pname, GLfixed param)
    {
    
    glad_glFogxOES(pname,param);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glFogxOES");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glFogxvOES(GLenum pname, const GLfixed* param)
    {
    
    glad_glFogxvOES(pname,param);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glFogxvOES");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glFrustumxOES(GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f)
    {
    
    glad_glFrustumxOES(l,r,b,t,n,f);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glFrustumxOES");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetClipPlanexOES(GLenum plane, GLfixed* equation)
    {
    
    glad_glGetClipPlanexOES(plane,equation);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetClipPlanexOES");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetFixedvOES(GLenum pname, GLfixed* params)
    {
    
    glad_glGetFixedvOES(pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetFixedvOES");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetTexEnvxvOES(GLenum target, GLenum pname, GLfixed* params)
    {
    
    glad_glGetTexEnvxvOES(target,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetTexEnvxvOES");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetTexParameterxvOES(GLenum target, GLenum pname, GLfixed* params)
    {
    
    glad_glGetTexParameterxvOES(target,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetTexParameterxvOES");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glLightModelxOES(GLenum pname, GLfixed param)
    {
    
    glad_glLightModelxOES(pname,param);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glLightModelxOES");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glLightModelxvOES(GLenum pname, const GLfixed* param)
    {
    
    glad_glLightModelxvOES(pname,param);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glLightModelxvOES");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glLightxOES(GLenum light, GLenum pname, GLfixed param)
    {
    
    glad_glLightxOES(light,pname,param);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glLightxOES");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glLightxvOES(GLenum light, GLenum pname, const GLfixed* params)
    {
    
    glad_glLightxvOES(light,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glLightxvOES");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glLineWidthxOES(GLfixed width)
    {
    
    glad_glLineWidthxOES(width);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glLineWidthxOES");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glLoadMatrixxOES(const GLfixed* m)
    {
    
    glad_glLoadMatrixxOES(m);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glLoadMatrixxOES");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMaterialxOES(GLenum face, GLenum pname, GLfixed param)
    {
    
    glad_glMaterialxOES(face,pname,param);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMaterialxOES");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMaterialxvOES(GLenum face, GLenum pname, const GLfixed* param)
    {
    
    glad_glMaterialxvOES(face,pname,param);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMaterialxvOES");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMultMatrixxOES(const GLfixed* m)
    {
    
    glad_glMultMatrixxOES(m);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMultMatrixxOES");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMultiTexCoord4xOES(GLenum texture, GLfixed s, GLfixed t, GLfixed r, GLfixed q)
    {
    
    glad_glMultiTexCoord4xOES(texture,s,t,r,q);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMultiTexCoord4xOES");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glNormal3xOES(GLfixed nx, GLfixed ny, GLfixed nz)
    {
    
    glad_glNormal3xOES(nx,ny,nz);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glNormal3xOES");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glOrthoxOES(GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f)
    {
    
    glad_glOrthoxOES(l,r,b,t,n,f);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glOrthoxOES");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glPointParameterxvOES(GLenum pname, const GLfixed* params)
    {
    
    glad_glPointParameterxvOES(pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glPointParameterxvOES");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glPointSizexOES(GLfixed size)
    {
    
    glad_glPointSizexOES(size);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glPointSizexOES");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glPolygonOffsetxOES(GLfixed factor, GLfixed units)
    {
    
    glad_glPolygonOffsetxOES(factor,units);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glPolygonOffsetxOES");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glRotatexOES(GLfixed angle, GLfixed x, GLfixed y, GLfixed z)
    {
    
    glad_glRotatexOES(angle,x,y,z);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glRotatexOES");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glScalexOES(GLfixed x, GLfixed y, GLfixed z)
    {
    
    glad_glScalexOES(x,y,z);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glScalexOES");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTexEnvxOES(GLenum target, GLenum pname, GLfixed param)
    {
    
    glad_glTexEnvxOES(target,pname,param);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTexEnvxOES");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTexEnvxvOES(GLenum target, GLenum pname, const GLfixed* params)
    {
    
    glad_glTexEnvxvOES(target,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTexEnvxvOES");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTexParameterxOES(GLenum target, GLenum pname, GLfixed param)
    {
    
    glad_glTexParameterxOES(target,pname,param);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTexParameterxOES");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTexParameterxvOES(GLenum target, GLenum pname, const GLfixed* params)
    {
    
    glad_glTexParameterxvOES(target,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTexParameterxvOES");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTranslatexOES(GLfixed x, GLfixed y, GLfixed z)
    {
    
    glad_glTranslatexOES(x,y,z);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTranslatexOES");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glAccumxOES(GLenum op, GLfixed value)
    {
    
    glad_glAccumxOES(op,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glAccumxOES");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glBitmapxOES(GLsizei width, GLsizei height, GLfixed xorig, GLfixed yorig, GLfixed xmove, GLfixed ymove, const GLubyte* bitmap)
    {
    
    glad_glBitmapxOES(width,height,xorig,yorig,xmove,ymove,bitmap);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glBitmapxOES");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glBlendColorxOES(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha)
    {
    
    glad_glBlendColorxOES(red,green,blue,alpha);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glBlendColorxOES");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glClearAccumxOES(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha)
    {
    
    glad_glClearAccumxOES(red,green,blue,alpha);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glClearAccumxOES");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glColor3xOES(GLfixed red, GLfixed green, GLfixed blue)
    {
    
    glad_glColor3xOES(red,green,blue);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glColor3xOES");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glColor3xvOES(const GLfixed* components)
    {
    
    glad_glColor3xvOES(components);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glColor3xvOES");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glColor4xvOES(const GLfixed* components)
    {
    
    glad_glColor4xvOES(components);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glColor4xvOES");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glConvolutionParameterxOES(GLenum target, GLenum pname, GLfixed param)
    {
    
    glad_glConvolutionParameterxOES(target,pname,param);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glConvolutionParameterxOES");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glConvolutionParameterxvOES(GLenum target, GLenum pname, const GLfixed* params)
    {
    
    glad_glConvolutionParameterxvOES(target,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glConvolutionParameterxvOES");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glEvalCoord1xOES(GLfixed u)
    {
    
    glad_glEvalCoord1xOES(u);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glEvalCoord1xOES");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glEvalCoord1xvOES(const GLfixed* coords)
    {
    
    glad_glEvalCoord1xvOES(coords);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glEvalCoord1xvOES");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glEvalCoord2xOES(GLfixed u, GLfixed v)
    {
    
    glad_glEvalCoord2xOES(u,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glEvalCoord2xOES");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glEvalCoord2xvOES(const GLfixed* coords)
    {
    
    glad_glEvalCoord2xvOES(coords);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glEvalCoord2xvOES");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glFeedbackBufferxOES(GLsizei n, GLenum type, const GLfixed* buffer)
    {
    
    glad_glFeedbackBufferxOES(n,type,buffer);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glFeedbackBufferxOES");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetConvolutionParameterxvOES(GLenum target, GLenum pname, GLfixed* params)
    {
    
    glad_glGetConvolutionParameterxvOES(target,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetConvolutionParameterxvOES");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetHistogramParameterxvOES(GLenum target, GLenum pname, GLfixed* params)
    {
    
    glad_glGetHistogramParameterxvOES(target,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetHistogramParameterxvOES");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetLightxOES(GLenum light, GLenum pname, GLfixed* params)
    {
    
    glad_glGetLightxOES(light,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetLightxOES");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetMapxvOES(GLenum target, GLenum query, GLfixed* v)
    {
    
    glad_glGetMapxvOES(target,query,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetMapxvOES");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetMaterialxOES(GLenum face, GLenum pname, GLfixed param)
    {
    
    glad_glGetMaterialxOES(face,pname,param);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetMaterialxOES");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetPixelMapxv(GLenum map, GLint size, GLfixed* values)
    {
    
    glad_glGetPixelMapxv(map,size,values);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetPixelMapxv");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetTexGenxvOES(GLenum coord, GLenum pname, GLfixed* params)
    {
    
    glad_glGetTexGenxvOES(coord,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetTexGenxvOES");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetTexLevelParameterxvOES(GLenum target, GLint level, GLenum pname, GLfixed* params)
    {
    
    glad_glGetTexLevelParameterxvOES(target,level,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetTexLevelParameterxvOES");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glIndexxOES(GLfixed component)
    {
    
    glad_glIndexxOES(component);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glIndexxOES");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glIndexxvOES(const GLfixed* component)
    {
    
    glad_glIndexxvOES(component);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glIndexxvOES");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glLoadTransposeMatrixxOES(const GLfixed* m)
    {
    
    glad_glLoadTransposeMatrixxOES(m);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glLoadTransposeMatrixxOES");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMap1xOES(GLenum target, GLfixed u1, GLfixed u2, GLint stride, GLint order, GLfixed points)
    {
    
    glad_glMap1xOES(target,u1,u2,stride,order,points);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMap1xOES");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMap2xOES(GLenum target, GLfixed u1, GLfixed u2, GLint ustride, GLint uorder, GLfixed v1, GLfixed v2, GLint vstride, GLint vorder, GLfixed points)
    {
    
    glad_glMap2xOES(target,u1,u2,ustride,uorder,v1,v2,vstride,vorder,points);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMap2xOES");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMapGrid1xOES(GLint n, GLfixed u1, GLfixed u2)
    {
    
    glad_glMapGrid1xOES(n,u1,u2);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMapGrid1xOES");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMapGrid2xOES(GLint n, GLfixed u1, GLfixed u2, GLfixed v1, GLfixed v2)
    {
    
    glad_glMapGrid2xOES(n,u1,u2,v1,v2);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMapGrid2xOES");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMultTransposeMatrixxOES(const GLfixed* m)
    {
    
    glad_glMultTransposeMatrixxOES(m);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMultTransposeMatrixxOES");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMultiTexCoord1xOES(GLenum texture, GLfixed s)
    {
    
    glad_glMultiTexCoord1xOES(texture,s);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMultiTexCoord1xOES");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMultiTexCoord1xvOES(GLenum texture, const GLfixed* coords)
    {
    
    glad_glMultiTexCoord1xvOES(texture,coords);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMultiTexCoord1xvOES");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMultiTexCoord2xOES(GLenum texture, GLfixed s, GLfixed t)
    {
    
    glad_glMultiTexCoord2xOES(texture,s,t);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMultiTexCoord2xOES");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMultiTexCoord2xvOES(GLenum texture, const GLfixed* coords)
    {
    
    glad_glMultiTexCoord2xvOES(texture,coords);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMultiTexCoord2xvOES");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMultiTexCoord3xOES(GLenum texture, GLfixed s, GLfixed t, GLfixed r)
    {
    
    glad_glMultiTexCoord3xOES(texture,s,t,r);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMultiTexCoord3xOES");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMultiTexCoord3xvOES(GLenum texture, const GLfixed* coords)
    {
    
    glad_glMultiTexCoord3xvOES(texture,coords);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMultiTexCoord3xvOES");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMultiTexCoord4xvOES(GLenum texture, const GLfixed* coords)
    {
    
    glad_glMultiTexCoord4xvOES(texture,coords);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMultiTexCoord4xvOES");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glNormal3xvOES(const GLfixed* coords)
    {
    
    glad_glNormal3xvOES(coords);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glNormal3xvOES");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glPassThroughxOES(GLfixed token)
    {
    
    glad_glPassThroughxOES(token);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glPassThroughxOES");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glPixelMapx(GLenum map, GLint size, const GLfixed* values)
    {
    
    glad_glPixelMapx(map,size,values);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glPixelMapx");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glPixelStorex(GLenum pname, GLfixed param)
    {
    
    glad_glPixelStorex(pname,param);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glPixelStorex");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glPixelTransferxOES(GLenum pname, GLfixed param)
    {
    
    glad_glPixelTransferxOES(pname,param);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glPixelTransferxOES");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glPixelZoomxOES(GLfixed xfactor, GLfixed yfactor)
    {
    
    glad_glPixelZoomxOES(xfactor,yfactor);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glPixelZoomxOES");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glPrioritizeTexturesxOES(GLsizei n, const GLuint* textures, const GLfixed* priorities)
    {
    
    glad_glPrioritizeTexturesxOES(n,textures,priorities);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glPrioritizeTexturesxOES");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glRasterPos2xOES(GLfixed x, GLfixed y)
    {
    
    glad_glRasterPos2xOES(x,y);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glRasterPos2xOES");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glRasterPos2xvOES(const GLfixed* coords)
    {
    
    glad_glRasterPos2xvOES(coords);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glRasterPos2xvOES");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glRasterPos3xOES(GLfixed x, GLfixed y, GLfixed z)
    {
    
    glad_glRasterPos3xOES(x,y,z);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glRasterPos3xOES");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glRasterPos3xvOES(const GLfixed* coords)
    {
    
    glad_glRasterPos3xvOES(coords);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glRasterPos3xvOES");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glRasterPos4xOES(GLfixed x, GLfixed y, GLfixed z, GLfixed w)
    {
    
    glad_glRasterPos4xOES(x,y,z,w);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glRasterPos4xOES");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glRasterPos4xvOES(const GLfixed* coords)
    {
    
    glad_glRasterPos4xvOES(coords);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glRasterPos4xvOES");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glRectxOES(GLfixed x1, GLfixed y1, GLfixed x2, GLfixed y2)
    {
    
    glad_glRectxOES(x1,y1,x2,y2);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glRectxOES");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glRectxvOES(const GLfixed* v1, const GLfixed* v2)
    {
    
    glad_glRectxvOES(v1,v2);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glRectxvOES");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTexCoord1xOES(GLfixed s)
    {
    
    glad_glTexCoord1xOES(s);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTexCoord1xOES");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTexCoord1xvOES(const GLfixed* coords)
    {
    
    glad_glTexCoord1xvOES(coords);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTexCoord1xvOES");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTexCoord2xOES(GLfixed s, GLfixed t)
    {
    
    glad_glTexCoord2xOES(s,t);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTexCoord2xOES");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTexCoord2xvOES(const GLfixed* coords)
    {
    
    glad_glTexCoord2xvOES(coords);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTexCoord2xvOES");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTexCoord3xOES(GLfixed s, GLfixed t, GLfixed r)
    {
    
    glad_glTexCoord3xOES(s,t,r);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTexCoord3xOES");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTexCoord3xvOES(const GLfixed* coords)
    {
    
    glad_glTexCoord3xvOES(coords);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTexCoord3xvOES");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTexCoord4xOES(GLfixed s, GLfixed t, GLfixed r, GLfixed q)
    {
    
    glad_glTexCoord4xOES(s,t,r,q);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTexCoord4xOES");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTexCoord4xvOES(const GLfixed* coords)
    {
    
    glad_glTexCoord4xvOES(coords);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTexCoord4xvOES");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTexGenxOES(GLenum coord, GLenum pname, GLfixed param)
    {
    
    glad_glTexGenxOES(coord,pname,param);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTexGenxOES");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTexGenxvOES(GLenum coord, GLenum pname, const GLfixed* params)
    {
    
    glad_glTexGenxvOES(coord,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTexGenxvOES");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertex2xOES(GLfixed x)
    {
    
    glad_glVertex2xOES(x);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertex2xOES");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertex2xvOES(const GLfixed* coords)
    {
    
    glad_glVertex2xvOES(coords);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertex2xvOES");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertex3xOES(GLfixed x, GLfixed y)
    {
    
    glad_glVertex3xOES(x,y);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertex3xOES");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertex3xvOES(const GLfixed* coords)
    {
    
    glad_glVertex3xvOES(coords);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertex3xvOES");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertex4xOES(GLfixed x, GLfixed y, GLfixed z)
    {
    
    glad_glVertex4xOES(x,y,z);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertex4xOES");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertex4xvOES(const GLfixed* coords)
    {
    
    glad_glVertex4xvOES(coords);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertex4xvOES");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    GLbitfield __cdecl glwrap_glQueryMatrixxOES(GLfixed* mantissa, GLint* exponent)
    {
    
    GLbitfield ret = glad_glQueryMatrixxOES(mantissa,exponent);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glQueryMatrixxOES");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	return ret;
    }

    void __cdecl glwrap_glClearDepthfOES(GLclampf depth)
    {
    
    glad_glClearDepthfOES(depth);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glClearDepthfOES");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glClipPlanefOES(GLenum plane, const GLfloat* equation)
    {
    
    glad_glClipPlanefOES(plane,equation);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glClipPlanefOES");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glDepthRangefOES(GLclampf n, GLclampf f)
    {
    
    glad_glDepthRangefOES(n,f);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glDepthRangefOES");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glFrustumfOES(GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f)
    {
    
    glad_glFrustumfOES(l,r,b,t,n,f);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glFrustumfOES");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetClipPlanefOES(GLenum plane, GLfloat* equation)
    {
    
    glad_glGetClipPlanefOES(plane,equation);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetClipPlanefOES");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glOrthofOES(GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f)
    {
    
    glad_glOrthofOES(l,r,b,t,n,f);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glOrthofOES");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTbufferMask3DFX(GLuint mask)
    {
    
    glad_glTbufferMask3DFX(mask);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTbufferMask3DFX");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glDebugMessageEnableAMD(GLenum category, GLenum severity, GLsizei count, const GLuint* ids, GLboolean enabled)
    {
    
    glad_glDebugMessageEnableAMD(category,severity,count,ids,enabled);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glDebugMessageEnableAMD");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glDebugMessageInsertAMD(GLenum category, GLenum severity, GLuint id, GLsizei length, const GLchar* buf)
    {
    
    glad_glDebugMessageInsertAMD(category,severity,id,length,buf);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glDebugMessageInsertAMD");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glDebugMessageCallbackAMD(GLDEBUGPROCAMD callback, void* userParam)
    {
    
    glad_glDebugMessageCallbackAMD(callback,userParam);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glDebugMessageCallbackAMD");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    GLuint __cdecl glwrap_glGetDebugMessageLogAMD(GLuint count, GLsizei bufsize, GLenum* categories, GLuint* severities, GLuint* ids, GLsizei* lengths, GLchar* message)
    {
    
    GLuint ret = glad_glGetDebugMessageLogAMD(count,bufsize,categories,severities,ids,lengths,message);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetDebugMessageLogAMD");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	return ret;
    }

    void __cdecl glwrap_glBlendFuncIndexedAMD(GLuint buf, GLenum src, GLenum dst)
    {
    
    glad_glBlendFuncIndexedAMD(buf,src,dst);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glBlendFuncIndexedAMD");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glBlendFuncSeparateIndexedAMD(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha)
    {
    
    glad_glBlendFuncSeparateIndexedAMD(buf,srcRGB,dstRGB,srcAlpha,dstAlpha);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glBlendFuncSeparateIndexedAMD");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glBlendEquationIndexedAMD(GLuint buf, GLenum mode)
    {
    
    glad_glBlendEquationIndexedAMD(buf,mode);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glBlendEquationIndexedAMD");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glBlendEquationSeparateIndexedAMD(GLuint buf, GLenum modeRGB, GLenum modeAlpha)
    {
    
    glad_glBlendEquationSeparateIndexedAMD(buf,modeRGB,modeAlpha);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glBlendEquationSeparateIndexedAMD");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glRenderbufferStorageMultisampleAdvancedAMD(GLenum target, GLsizei samples, GLsizei storageSamples, GLenum internalformat, GLsizei width, GLsizei height)
    {
    
    glad_glRenderbufferStorageMultisampleAdvancedAMD(target,samples,storageSamples,internalformat,width,height);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glRenderbufferStorageMultisampleAdvancedAMD");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glNamedRenderbufferStorageMultisampleAdvancedAMD(GLuint renderbuffer, GLsizei samples, GLsizei storageSamples, GLenum internalformat, GLsizei width, GLsizei height)
    {
    
    glad_glNamedRenderbufferStorageMultisampleAdvancedAMD(renderbuffer,samples,storageSamples,internalformat,width,height);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glNamedRenderbufferStorageMultisampleAdvancedAMD");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glFramebufferSamplePositionsfvAMD(GLenum target, GLuint numsamples, GLuint pixelindex, const GLfloat* values)
    {
    
    glad_glFramebufferSamplePositionsfvAMD(target,numsamples,pixelindex,values);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glFramebufferSamplePositionsfvAMD");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glNamedFramebufferSamplePositionsfvAMD(GLuint framebuffer, GLuint numsamples, GLuint pixelindex, const GLfloat* values)
    {
    
    glad_glNamedFramebufferSamplePositionsfvAMD(framebuffer,numsamples,pixelindex,values);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glNamedFramebufferSamplePositionsfvAMD");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetFramebufferParameterfvAMD(GLenum target, GLenum pname, GLuint numsamples, GLuint pixelindex, GLsizei size, GLfloat* values)
    {
    
    glad_glGetFramebufferParameterfvAMD(target,pname,numsamples,pixelindex,size,values);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetFramebufferParameterfvAMD");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetNamedFramebufferParameterfvAMD(GLuint framebuffer, GLenum pname, GLuint numsamples, GLuint pixelindex, GLsizei size, GLfloat* values)
    {
    
    glad_glGetNamedFramebufferParameterfvAMD(framebuffer,pname,numsamples,pixelindex,size,values);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetNamedFramebufferParameterfvAMD");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glUniform1i64NV(GLint location, GLint64EXT x)
    {
    
    glad_glUniform1i64NV(location,x);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glUniform1i64NV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glUniform2i64NV(GLint location, GLint64EXT x, GLint64EXT y)
    {
    
    glad_glUniform2i64NV(location,x,y);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glUniform2i64NV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glUniform3i64NV(GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z)
    {
    
    glad_glUniform3i64NV(location,x,y,z);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glUniform3i64NV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glUniform4i64NV(GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w)
    {
    
    glad_glUniform4i64NV(location,x,y,z,w);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glUniform4i64NV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glUniform1i64vNV(GLint location, GLsizei count, const GLint64EXT* value)
    {
    
    glad_glUniform1i64vNV(location,count,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glUniform1i64vNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glUniform2i64vNV(GLint location, GLsizei count, const GLint64EXT* value)
    {
    
    glad_glUniform2i64vNV(location,count,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glUniform2i64vNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glUniform3i64vNV(GLint location, GLsizei count, const GLint64EXT* value)
    {
    
    glad_glUniform3i64vNV(location,count,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glUniform3i64vNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glUniform4i64vNV(GLint location, GLsizei count, const GLint64EXT* value)
    {
    
    glad_glUniform4i64vNV(location,count,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glUniform4i64vNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glUniform1ui64NV(GLint location, GLuint64EXT x)
    {
    
    glad_glUniform1ui64NV(location,x);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glUniform1ui64NV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glUniform2ui64NV(GLint location, GLuint64EXT x, GLuint64EXT y)
    {
    
    glad_glUniform2ui64NV(location,x,y);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glUniform2ui64NV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glUniform3ui64NV(GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z)
    {
    
    glad_glUniform3ui64NV(location,x,y,z);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glUniform3ui64NV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glUniform4ui64NV(GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w)
    {
    
    glad_glUniform4ui64NV(location,x,y,z,w);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glUniform4ui64NV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glUniform1ui64vNV(GLint location, GLsizei count, const GLuint64EXT* value)
    {
    
    glad_glUniform1ui64vNV(location,count,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glUniform1ui64vNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glUniform2ui64vNV(GLint location, GLsizei count, const GLuint64EXT* value)
    {
    
    glad_glUniform2ui64vNV(location,count,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glUniform2ui64vNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glUniform3ui64vNV(GLint location, GLsizei count, const GLuint64EXT* value)
    {
    
    glad_glUniform3ui64vNV(location,count,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glUniform3ui64vNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glUniform4ui64vNV(GLint location, GLsizei count, const GLuint64EXT* value)
    {
    
    glad_glUniform4ui64vNV(location,count,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glUniform4ui64vNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetUniformi64vNV(GLuint program, GLint location, GLint64EXT* params)
    {
    
    glad_glGetUniformi64vNV(program,location,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetUniformi64vNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetUniformui64vNV(GLuint program, GLint location, GLuint64EXT* params)
    {
    
    glad_glGetUniformui64vNV(program,location,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetUniformui64vNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramUniform1i64NV(GLuint program, GLint location, GLint64EXT x)
    {
    
    glad_glProgramUniform1i64NV(program,location,x);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramUniform1i64NV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramUniform2i64NV(GLuint program, GLint location, GLint64EXT x, GLint64EXT y)
    {
    
    glad_glProgramUniform2i64NV(program,location,x,y);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramUniform2i64NV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramUniform3i64NV(GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z)
    {
    
    glad_glProgramUniform3i64NV(program,location,x,y,z);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramUniform3i64NV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramUniform4i64NV(GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w)
    {
    
    glad_glProgramUniform4i64NV(program,location,x,y,z,w);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramUniform4i64NV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramUniform1i64vNV(GLuint program, GLint location, GLsizei count, const GLint64EXT* value)
    {
    
    glad_glProgramUniform1i64vNV(program,location,count,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramUniform1i64vNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramUniform2i64vNV(GLuint program, GLint location, GLsizei count, const GLint64EXT* value)
    {
    
    glad_glProgramUniform2i64vNV(program,location,count,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramUniform2i64vNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramUniform3i64vNV(GLuint program, GLint location, GLsizei count, const GLint64EXT* value)
    {
    
    glad_glProgramUniform3i64vNV(program,location,count,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramUniform3i64vNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramUniform4i64vNV(GLuint program, GLint location, GLsizei count, const GLint64EXT* value)
    {
    
    glad_glProgramUniform4i64vNV(program,location,count,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramUniform4i64vNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramUniform1ui64NV(GLuint program, GLint location, GLuint64EXT x)
    {
    
    glad_glProgramUniform1ui64NV(program,location,x);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramUniform1ui64NV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramUniform2ui64NV(GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y)
    {
    
    glad_glProgramUniform2ui64NV(program,location,x,y);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramUniform2ui64NV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramUniform3ui64NV(GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z)
    {
    
    glad_glProgramUniform3ui64NV(program,location,x,y,z);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramUniform3ui64NV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramUniform4ui64NV(GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w)
    {
    
    glad_glProgramUniform4ui64NV(program,location,x,y,z,w);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramUniform4ui64NV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramUniform1ui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT* value)
    {
    
    glad_glProgramUniform1ui64vNV(program,location,count,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramUniform1ui64vNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramUniform2ui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT* value)
    {
    
    glad_glProgramUniform2ui64vNV(program,location,count,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramUniform2ui64vNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramUniform3ui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT* value)
    {
    
    glad_glProgramUniform3ui64vNV(program,location,count,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramUniform3ui64vNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramUniform4ui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT* value)
    {
    
    glad_glProgramUniform4ui64vNV(program,location,count,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramUniform4ui64vNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttribParameteriAMD(GLuint index, GLenum pname, GLint param)
    {
    
    glad_glVertexAttribParameteriAMD(index,pname,param);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttribParameteriAMD");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMultiDrawArraysIndirectAMD(GLenum mode, const void* indirect, GLsizei primcount, GLsizei stride)
    {
    
    glad_glMultiDrawArraysIndirectAMD(mode,indirect,primcount,stride);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMultiDrawArraysIndirectAMD");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMultiDrawElementsIndirectAMD(GLenum mode, GLenum type, const void* indirect, GLsizei primcount, GLsizei stride)
    {
    
    glad_glMultiDrawElementsIndirectAMD(mode,type,indirect,primcount,stride);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMultiDrawElementsIndirectAMD");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGenNamesAMD(GLenum identifier, GLuint num, GLuint* names)
    {
    
    glad_glGenNamesAMD(identifier,num,names);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGenNamesAMD");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glDeleteNamesAMD(GLenum identifier, GLuint num, const GLuint* names)
    {
    
    glad_glDeleteNamesAMD(identifier,num,names);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glDeleteNamesAMD");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    GLboolean __cdecl glwrap_glIsNameAMD(GLenum identifier, GLuint name)
    {
    
    GLboolean ret = glad_glIsNameAMD(identifier,name);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glIsNameAMD");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	return ret;
    }

    void __cdecl glwrap_glQueryObjectParameteruiAMD(GLenum target, GLuint id, GLenum pname, GLuint param)
    {
    
    glad_glQueryObjectParameteruiAMD(target,id,pname,param);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glQueryObjectParameteruiAMD");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetPerfMonitorGroupsAMD(GLint* numGroups, GLsizei groupsSize, GLuint* groups)
    {
    
    glad_glGetPerfMonitorGroupsAMD(numGroups,groupsSize,groups);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetPerfMonitorGroupsAMD");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetPerfMonitorCountersAMD(GLuint group, GLint* numCounters, GLint* maxActiveCounters, GLsizei counterSize, GLuint* counters)
    {
    
    glad_glGetPerfMonitorCountersAMD(group,numCounters,maxActiveCounters,counterSize,counters);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetPerfMonitorCountersAMD");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetPerfMonitorGroupStringAMD(GLuint group, GLsizei bufSize, GLsizei* length, GLchar* groupString)
    {
    
    glad_glGetPerfMonitorGroupStringAMD(group,bufSize,length,groupString);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetPerfMonitorGroupStringAMD");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetPerfMonitorCounterStringAMD(GLuint group, GLuint counter, GLsizei bufSize, GLsizei* length, GLchar* counterString)
    {
    
    glad_glGetPerfMonitorCounterStringAMD(group,counter,bufSize,length,counterString);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetPerfMonitorCounterStringAMD");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetPerfMonitorCounterInfoAMD(GLuint group, GLuint counter, GLenum pname, void* data)
    {
    
    glad_glGetPerfMonitorCounterInfoAMD(group,counter,pname,data);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetPerfMonitorCounterInfoAMD");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGenPerfMonitorsAMD(GLsizei n, GLuint* monitors)
    {
    
    glad_glGenPerfMonitorsAMD(n,monitors);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGenPerfMonitorsAMD");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glDeletePerfMonitorsAMD(GLsizei n, GLuint* monitors)
    {
    
    glad_glDeletePerfMonitorsAMD(n,monitors);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glDeletePerfMonitorsAMD");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glSelectPerfMonitorCountersAMD(GLuint monitor, GLboolean enable, GLuint group, GLint numCounters, GLuint* counterList)
    {
    
    glad_glSelectPerfMonitorCountersAMD(monitor,enable,group,numCounters,counterList);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glSelectPerfMonitorCountersAMD");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glBeginPerfMonitorAMD(GLuint monitor)
    {
    
    glad_glBeginPerfMonitorAMD(monitor);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glBeginPerfMonitorAMD");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glEndPerfMonitorAMD(GLuint monitor)
    {
    
    glad_glEndPerfMonitorAMD(monitor);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glEndPerfMonitorAMD");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetPerfMonitorCounterDataAMD(GLuint monitor, GLenum pname, GLsizei dataSize, GLuint* data, GLint* bytesWritten)
    {
    
    glad_glGetPerfMonitorCounterDataAMD(monitor,pname,dataSize,data,bytesWritten);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetPerfMonitorCounterDataAMD");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glSetMultisamplefvAMD(GLenum pname, GLuint index, const GLfloat* val)
    {
    
    glad_glSetMultisamplefvAMD(pname,index,val);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glSetMultisamplefvAMD");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTexStorageSparseAMD(GLenum target, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLsizei layers, GLbitfield flags)
    {
    
    glad_glTexStorageSparseAMD(target,internalFormat,width,height,depth,layers,flags);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTexStorageSparseAMD");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTextureStorageSparseAMD(GLuint texture, GLenum target, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLsizei layers, GLbitfield flags)
    {
    
    glad_glTextureStorageSparseAMD(texture,target,internalFormat,width,height,depth,layers,flags);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTextureStorageSparseAMD");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glStencilOpValueAMD(GLenum face, GLuint value)
    {
    
    glad_glStencilOpValueAMD(face,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glStencilOpValueAMD");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTessellationFactorAMD(GLfloat factor)
    {
    
    glad_glTessellationFactorAMD(factor);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTessellationFactorAMD");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTessellationModeAMD(GLenum mode)
    {
    
    glad_glTessellationModeAMD(mode);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTessellationModeAMD");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glElementPointerAPPLE(GLenum type, const void* pointer)
    {
    
    glad_glElementPointerAPPLE(type,pointer);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glElementPointerAPPLE");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glDrawElementArrayAPPLE(GLenum mode, GLint first, GLsizei count)
    {
    
    glad_glDrawElementArrayAPPLE(mode,first,count);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glDrawElementArrayAPPLE");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glDrawRangeElementArrayAPPLE(GLenum mode, GLuint start, GLuint end, GLint first, GLsizei count)
    {
    
    glad_glDrawRangeElementArrayAPPLE(mode,start,end,first,count);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glDrawRangeElementArrayAPPLE");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMultiDrawElementArrayAPPLE(GLenum mode, const GLint* first, const GLsizei* count, GLsizei primcount)
    {
    
    glad_glMultiDrawElementArrayAPPLE(mode,first,count,primcount);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMultiDrawElementArrayAPPLE");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMultiDrawRangeElementArrayAPPLE(GLenum mode, GLuint start, GLuint end, const GLint* first, const GLsizei* count, GLsizei primcount)
    {
    
    glad_glMultiDrawRangeElementArrayAPPLE(mode,start,end,first,count,primcount);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMultiDrawRangeElementArrayAPPLE");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGenFencesAPPLE(GLsizei n, GLuint* fences)
    {
    
    glad_glGenFencesAPPLE(n,fences);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGenFencesAPPLE");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glDeleteFencesAPPLE(GLsizei n, const GLuint* fences)
    {
    
    glad_glDeleteFencesAPPLE(n,fences);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glDeleteFencesAPPLE");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glSetFenceAPPLE(GLuint fence)
    {
    
    glad_glSetFenceAPPLE(fence);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glSetFenceAPPLE");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    GLboolean __cdecl glwrap_glIsFenceAPPLE(GLuint fence)
    {
    
    GLboolean ret = glad_glIsFenceAPPLE(fence);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glIsFenceAPPLE");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	return ret;
    }

    GLboolean __cdecl glwrap_glTestFenceAPPLE(GLuint fence)
    {
    
    GLboolean ret = glad_glTestFenceAPPLE(fence);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTestFenceAPPLE");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	return ret;
    }

    void __cdecl glwrap_glFinishFenceAPPLE(GLuint fence)
    {
    
    glad_glFinishFenceAPPLE(fence);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glFinishFenceAPPLE");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    GLboolean __cdecl glwrap_glTestObjectAPPLE(GLenum object, GLuint name)
    {
    
    GLboolean ret = glad_glTestObjectAPPLE(object,name);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTestObjectAPPLE");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	return ret;
    }

    void __cdecl glwrap_glFinishObjectAPPLE(GLenum object, GLint name)
    {
    
    glad_glFinishObjectAPPLE(object,name);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glFinishObjectAPPLE");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glBufferParameteriAPPLE(GLenum target, GLenum pname, GLint param)
    {
    
    glad_glBufferParameteriAPPLE(target,pname,param);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glBufferParameteriAPPLE");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glFlushMappedBufferRangeAPPLE(GLenum target, GLintptr offset, GLsizeiptr size)
    {
    
    glad_glFlushMappedBufferRangeAPPLE(target,offset,size);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glFlushMappedBufferRangeAPPLE");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    GLenum __cdecl glwrap_glObjectPurgeableAPPLE(GLenum objectType, GLuint name, GLenum option)
    {
    
    GLenum ret = glad_glObjectPurgeableAPPLE(objectType,name,option);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glObjectPurgeableAPPLE");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	return ret;
    }

    GLenum __cdecl glwrap_glObjectUnpurgeableAPPLE(GLenum objectType, GLuint name, GLenum option)
    {
    
    GLenum ret = glad_glObjectUnpurgeableAPPLE(objectType,name,option);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glObjectUnpurgeableAPPLE");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	return ret;
    }

    void __cdecl glwrap_glGetObjectParameterivAPPLE(GLenum objectType, GLuint name, GLenum pname, GLint* params)
    {
    
    glad_glGetObjectParameterivAPPLE(objectType,name,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetObjectParameterivAPPLE");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTextureRangeAPPLE(GLenum target, GLsizei length, const void* pointer)
    {
    
    glad_glTextureRangeAPPLE(target,length,pointer);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTextureRangeAPPLE");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetTexParameterPointervAPPLE(GLenum target, GLenum pname, void** params)
    {
    
    glad_glGetTexParameterPointervAPPLE(target,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetTexParameterPointervAPPLE");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glBindVertexArrayAPPLE(GLuint array)
    {
    
    glad_glBindVertexArrayAPPLE(array);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glBindVertexArrayAPPLE");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glDeleteVertexArraysAPPLE(GLsizei n, const GLuint* arrays)
    {
    
    glad_glDeleteVertexArraysAPPLE(n,arrays);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glDeleteVertexArraysAPPLE");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGenVertexArraysAPPLE(GLsizei n, GLuint* arrays)
    {
    
    glad_glGenVertexArraysAPPLE(n,arrays);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGenVertexArraysAPPLE");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    GLboolean __cdecl glwrap_glIsVertexArrayAPPLE(GLuint array)
    {
    
    GLboolean ret = glad_glIsVertexArrayAPPLE(array);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glIsVertexArrayAPPLE");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	return ret;
    }

    void __cdecl glwrap_glVertexArrayRangeAPPLE(GLsizei length, void* pointer)
    {
    
    glad_glVertexArrayRangeAPPLE(length,pointer);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexArrayRangeAPPLE");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glFlushVertexArrayRangeAPPLE(GLsizei length, void* pointer)
    {
    
    glad_glFlushVertexArrayRangeAPPLE(length,pointer);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glFlushVertexArrayRangeAPPLE");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexArrayParameteriAPPLE(GLenum pname, GLint param)
    {
    
    glad_glVertexArrayParameteriAPPLE(pname,param);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexArrayParameteriAPPLE");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glEnableVertexAttribAPPLE(GLuint index, GLenum pname)
    {
    
    glad_glEnableVertexAttribAPPLE(index,pname);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glEnableVertexAttribAPPLE");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glDisableVertexAttribAPPLE(GLuint index, GLenum pname)
    {
    
    glad_glDisableVertexAttribAPPLE(index,pname);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glDisableVertexAttribAPPLE");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    GLboolean __cdecl glwrap_glIsVertexAttribEnabledAPPLE(GLuint index, GLenum pname)
    {
    
    GLboolean ret = glad_glIsVertexAttribEnabledAPPLE(index,pname);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glIsVertexAttribEnabledAPPLE");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	return ret;
    }

    void __cdecl glwrap_glMapVertexAttrib1dAPPLE(GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble* points)
    {
    
    glad_glMapVertexAttrib1dAPPLE(index,size,u1,u2,stride,order,points);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMapVertexAttrib1dAPPLE");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMapVertexAttrib1fAPPLE(GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat* points)
    {
    
    glad_glMapVertexAttrib1fAPPLE(index,size,u1,u2,stride,order,points);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMapVertexAttrib1fAPPLE");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMapVertexAttrib2dAPPLE(GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble* points)
    {
    
    glad_glMapVertexAttrib2dAPPLE(index,size,u1,u2,ustride,uorder,v1,v2,vstride,vorder,points);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMapVertexAttrib2dAPPLE");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMapVertexAttrib2fAPPLE(GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat* points)
    {
    
    glad_glMapVertexAttrib2fAPPLE(index,size,u1,u2,ustride,uorder,v1,v2,vstride,vorder,points);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMapVertexAttrib2fAPPLE");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glDrawBuffersATI(GLsizei n, const GLenum* bufs)
    {
    
    glad_glDrawBuffersATI(n,bufs);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glDrawBuffersATI");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glElementPointerATI(GLenum type, const void* pointer)
    {
    
    glad_glElementPointerATI(type,pointer);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glElementPointerATI");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glDrawElementArrayATI(GLenum mode, GLsizei count)
    {
    
    glad_glDrawElementArrayATI(mode,count);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glDrawElementArrayATI");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glDrawRangeElementArrayATI(GLenum mode, GLuint start, GLuint end, GLsizei count)
    {
    
    glad_glDrawRangeElementArrayATI(mode,start,end,count);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glDrawRangeElementArrayATI");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTexBumpParameterivATI(GLenum pname, const GLint* param)
    {
    
    glad_glTexBumpParameterivATI(pname,param);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTexBumpParameterivATI");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTexBumpParameterfvATI(GLenum pname, const GLfloat* param)
    {
    
    glad_glTexBumpParameterfvATI(pname,param);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTexBumpParameterfvATI");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetTexBumpParameterivATI(GLenum pname, GLint* param)
    {
    
    glad_glGetTexBumpParameterivATI(pname,param);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetTexBumpParameterivATI");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetTexBumpParameterfvATI(GLenum pname, GLfloat* param)
    {
    
    glad_glGetTexBumpParameterfvATI(pname,param);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetTexBumpParameterfvATI");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    GLuint __cdecl glwrap_glGenFragmentShadersATI(GLuint range)
    {
    
    GLuint ret = glad_glGenFragmentShadersATI(range);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGenFragmentShadersATI");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	return ret;
    }

    void __cdecl glwrap_glBindFragmentShaderATI(GLuint id)
    {
    
    glad_glBindFragmentShaderATI(id);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glBindFragmentShaderATI");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glDeleteFragmentShaderATI(GLuint id)
    {
    
    glad_glDeleteFragmentShaderATI(id);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glDeleteFragmentShaderATI");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glBeginFragmentShaderATI()
    {
    
    glad_glBeginFragmentShaderATI();
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glBeginFragmentShaderATI");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glEndFragmentShaderATI()
    {
    
    glad_glEndFragmentShaderATI();
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glEndFragmentShaderATI");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glPassTexCoordATI(GLuint dst, GLuint coord, GLenum swizzle)
    {
    
    glad_glPassTexCoordATI(dst,coord,swizzle);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glPassTexCoordATI");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glSampleMapATI(GLuint dst, GLuint interp, GLenum swizzle)
    {
    
    glad_glSampleMapATI(dst,interp,swizzle);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glSampleMapATI");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glColorFragmentOp1ATI(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod)
    {
    
    glad_glColorFragmentOp1ATI(op,dst,dstMask,dstMod,arg1,arg1Rep,arg1Mod);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glColorFragmentOp1ATI");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glColorFragmentOp2ATI(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod)
    {
    
    glad_glColorFragmentOp2ATI(op,dst,dstMask,dstMod,arg1,arg1Rep,arg1Mod,arg2,arg2Rep,arg2Mod);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glColorFragmentOp2ATI");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glColorFragmentOp3ATI(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod)
    {
    
    glad_glColorFragmentOp3ATI(op,dst,dstMask,dstMod,arg1,arg1Rep,arg1Mod,arg2,arg2Rep,arg2Mod,arg3,arg3Rep,arg3Mod);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glColorFragmentOp3ATI");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glAlphaFragmentOp1ATI(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod)
    {
    
    glad_glAlphaFragmentOp1ATI(op,dst,dstMod,arg1,arg1Rep,arg1Mod);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glAlphaFragmentOp1ATI");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glAlphaFragmentOp2ATI(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod)
    {
    
    glad_glAlphaFragmentOp2ATI(op,dst,dstMod,arg1,arg1Rep,arg1Mod,arg2,arg2Rep,arg2Mod);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glAlphaFragmentOp2ATI");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glAlphaFragmentOp3ATI(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod)
    {
    
    glad_glAlphaFragmentOp3ATI(op,dst,dstMod,arg1,arg1Rep,arg1Mod,arg2,arg2Rep,arg2Mod,arg3,arg3Rep,arg3Mod);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glAlphaFragmentOp3ATI");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glSetFragmentShaderConstantATI(GLuint dst, const GLfloat* value)
    {
    
    glad_glSetFragmentShaderConstantATI(dst,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glSetFragmentShaderConstantATI");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void * __cdecl glwrap_glMapObjectBufferATI(GLuint buffer)
    {
    
    void * ret = glad_glMapObjectBufferATI(buffer);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMapObjectBufferATI");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	return ret;
    }

    void __cdecl glwrap_glUnmapObjectBufferATI(GLuint buffer)
    {
    
    glad_glUnmapObjectBufferATI(buffer);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glUnmapObjectBufferATI");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glPNTrianglesiATI(GLenum pname, GLint param)
    {
    
    glad_glPNTrianglesiATI(pname,param);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glPNTrianglesiATI");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glPNTrianglesfATI(GLenum pname, GLfloat param)
    {
    
    glad_glPNTrianglesfATI(pname,param);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glPNTrianglesfATI");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glStencilOpSeparateATI(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass)
    {
    
    glad_glStencilOpSeparateATI(face,sfail,dpfail,dppass);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glStencilOpSeparateATI");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glStencilFuncSeparateATI(GLenum frontfunc, GLenum backfunc, GLint ref, GLuint mask)
    {
    
    glad_glStencilFuncSeparateATI(frontfunc,backfunc,ref,mask);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glStencilFuncSeparateATI");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    GLuint __cdecl glwrap_glNewObjectBufferATI(GLsizei size, const void* pointer, GLenum usage)
    {
    
    GLuint ret = glad_glNewObjectBufferATI(size,pointer,usage);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glNewObjectBufferATI");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	return ret;
    }

    GLboolean __cdecl glwrap_glIsObjectBufferATI(GLuint buffer)
    {
    
    GLboolean ret = glad_glIsObjectBufferATI(buffer);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glIsObjectBufferATI");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	return ret;
    }

    void __cdecl glwrap_glUpdateObjectBufferATI(GLuint buffer, GLuint offset, GLsizei size, const void* pointer, GLenum preserve)
    {
    
    glad_glUpdateObjectBufferATI(buffer,offset,size,pointer,preserve);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glUpdateObjectBufferATI");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetObjectBufferfvATI(GLuint buffer, GLenum pname, GLfloat* params)
    {
    
    glad_glGetObjectBufferfvATI(buffer,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetObjectBufferfvATI");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetObjectBufferivATI(GLuint buffer, GLenum pname, GLint* params)
    {
    
    glad_glGetObjectBufferivATI(buffer,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetObjectBufferivATI");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glFreeObjectBufferATI(GLuint buffer)
    {
    
    glad_glFreeObjectBufferATI(buffer);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glFreeObjectBufferATI");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glArrayObjectATI(GLenum array, GLint size, GLenum type, GLsizei stride, GLuint buffer, GLuint offset)
    {
    
    glad_glArrayObjectATI(array,size,type,stride,buffer,offset);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glArrayObjectATI");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetArrayObjectfvATI(GLenum array, GLenum pname, GLfloat* params)
    {
    
    glad_glGetArrayObjectfvATI(array,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetArrayObjectfvATI");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetArrayObjectivATI(GLenum array, GLenum pname, GLint* params)
    {
    
    glad_glGetArrayObjectivATI(array,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetArrayObjectivATI");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVariantArrayObjectATI(GLuint id, GLenum type, GLsizei stride, GLuint buffer, GLuint offset)
    {
    
    glad_glVariantArrayObjectATI(id,type,stride,buffer,offset);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVariantArrayObjectATI");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetVariantArrayObjectfvATI(GLuint id, GLenum pname, GLfloat* params)
    {
    
    glad_glGetVariantArrayObjectfvATI(id,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetVariantArrayObjectfvATI");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetVariantArrayObjectivATI(GLuint id, GLenum pname, GLint* params)
    {
    
    glad_glGetVariantArrayObjectivATI(id,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetVariantArrayObjectivATI");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttribArrayObjectATI(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLuint buffer, GLuint offset)
    {
    
    glad_glVertexAttribArrayObjectATI(index,size,type,normalized,stride,buffer,offset);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttribArrayObjectATI");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetVertexAttribArrayObjectfvATI(GLuint index, GLenum pname, GLfloat* params)
    {
    
    glad_glGetVertexAttribArrayObjectfvATI(index,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetVertexAttribArrayObjectfvATI");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetVertexAttribArrayObjectivATI(GLuint index, GLenum pname, GLint* params)
    {
    
    glad_glGetVertexAttribArrayObjectivATI(index,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetVertexAttribArrayObjectivATI");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexStream1sATI(GLenum stream, GLshort x)
    {
    
    glad_glVertexStream1sATI(stream,x);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexStream1sATI");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexStream1svATI(GLenum stream, const GLshort* coords)
    {
    
    glad_glVertexStream1svATI(stream,coords);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexStream1svATI");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexStream1iATI(GLenum stream, GLint x)
    {
    
    glad_glVertexStream1iATI(stream,x);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexStream1iATI");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexStream1ivATI(GLenum stream, const GLint* coords)
    {
    
    glad_glVertexStream1ivATI(stream,coords);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexStream1ivATI");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexStream1fATI(GLenum stream, GLfloat x)
    {
    
    glad_glVertexStream1fATI(stream,x);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexStream1fATI");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexStream1fvATI(GLenum stream, const GLfloat* coords)
    {
    
    glad_glVertexStream1fvATI(stream,coords);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexStream1fvATI");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexStream1dATI(GLenum stream, GLdouble x)
    {
    
    glad_glVertexStream1dATI(stream,x);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexStream1dATI");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexStream1dvATI(GLenum stream, const GLdouble* coords)
    {
    
    glad_glVertexStream1dvATI(stream,coords);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexStream1dvATI");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexStream2sATI(GLenum stream, GLshort x, GLshort y)
    {
    
    glad_glVertexStream2sATI(stream,x,y);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexStream2sATI");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexStream2svATI(GLenum stream, const GLshort* coords)
    {
    
    glad_glVertexStream2svATI(stream,coords);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexStream2svATI");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexStream2iATI(GLenum stream, GLint x, GLint y)
    {
    
    glad_glVertexStream2iATI(stream,x,y);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexStream2iATI");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexStream2ivATI(GLenum stream, const GLint* coords)
    {
    
    glad_glVertexStream2ivATI(stream,coords);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexStream2ivATI");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexStream2fATI(GLenum stream, GLfloat x, GLfloat y)
    {
    
    glad_glVertexStream2fATI(stream,x,y);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexStream2fATI");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexStream2fvATI(GLenum stream, const GLfloat* coords)
    {
    
    glad_glVertexStream2fvATI(stream,coords);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexStream2fvATI");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexStream2dATI(GLenum stream, GLdouble x, GLdouble y)
    {
    
    glad_glVertexStream2dATI(stream,x,y);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexStream2dATI");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexStream2dvATI(GLenum stream, const GLdouble* coords)
    {
    
    glad_glVertexStream2dvATI(stream,coords);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexStream2dvATI");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexStream3sATI(GLenum stream, GLshort x, GLshort y, GLshort z)
    {
    
    glad_glVertexStream3sATI(stream,x,y,z);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexStream3sATI");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexStream3svATI(GLenum stream, const GLshort* coords)
    {
    
    glad_glVertexStream3svATI(stream,coords);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexStream3svATI");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexStream3iATI(GLenum stream, GLint x, GLint y, GLint z)
    {
    
    glad_glVertexStream3iATI(stream,x,y,z);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexStream3iATI");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexStream3ivATI(GLenum stream, const GLint* coords)
    {
    
    glad_glVertexStream3ivATI(stream,coords);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexStream3ivATI");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexStream3fATI(GLenum stream, GLfloat x, GLfloat y, GLfloat z)
    {
    
    glad_glVertexStream3fATI(stream,x,y,z);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexStream3fATI");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexStream3fvATI(GLenum stream, const GLfloat* coords)
    {
    
    glad_glVertexStream3fvATI(stream,coords);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexStream3fvATI");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexStream3dATI(GLenum stream, GLdouble x, GLdouble y, GLdouble z)
    {
    
    glad_glVertexStream3dATI(stream,x,y,z);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexStream3dATI");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexStream3dvATI(GLenum stream, const GLdouble* coords)
    {
    
    glad_glVertexStream3dvATI(stream,coords);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexStream3dvATI");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexStream4sATI(GLenum stream, GLshort x, GLshort y, GLshort z, GLshort w)
    {
    
    glad_glVertexStream4sATI(stream,x,y,z,w);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexStream4sATI");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexStream4svATI(GLenum stream, const GLshort* coords)
    {
    
    glad_glVertexStream4svATI(stream,coords);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexStream4svATI");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexStream4iATI(GLenum stream, GLint x, GLint y, GLint z, GLint w)
    {
    
    glad_glVertexStream4iATI(stream,x,y,z,w);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexStream4iATI");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexStream4ivATI(GLenum stream, const GLint* coords)
    {
    
    glad_glVertexStream4ivATI(stream,coords);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexStream4ivATI");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexStream4fATI(GLenum stream, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
    {
    
    glad_glVertexStream4fATI(stream,x,y,z,w);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexStream4fATI");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexStream4fvATI(GLenum stream, const GLfloat* coords)
    {
    
    glad_glVertexStream4fvATI(stream,coords);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexStream4fvATI");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexStream4dATI(GLenum stream, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
    {
    
    glad_glVertexStream4dATI(stream,x,y,z,w);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexStream4dATI");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexStream4dvATI(GLenum stream, const GLdouble* coords)
    {
    
    glad_glVertexStream4dvATI(stream,coords);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexStream4dvATI");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glNormalStream3bATI(GLenum stream, GLbyte nx, GLbyte ny, GLbyte nz)
    {
    
    glad_glNormalStream3bATI(stream,nx,ny,nz);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glNormalStream3bATI");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glNormalStream3bvATI(GLenum stream, const GLbyte* coords)
    {
    
    glad_glNormalStream3bvATI(stream,coords);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glNormalStream3bvATI");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glNormalStream3sATI(GLenum stream, GLshort nx, GLshort ny, GLshort nz)
    {
    
    glad_glNormalStream3sATI(stream,nx,ny,nz);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glNormalStream3sATI");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glNormalStream3svATI(GLenum stream, const GLshort* coords)
    {
    
    glad_glNormalStream3svATI(stream,coords);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glNormalStream3svATI");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glNormalStream3iATI(GLenum stream, GLint nx, GLint ny, GLint nz)
    {
    
    glad_glNormalStream3iATI(stream,nx,ny,nz);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glNormalStream3iATI");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glNormalStream3ivATI(GLenum stream, const GLint* coords)
    {
    
    glad_glNormalStream3ivATI(stream,coords);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glNormalStream3ivATI");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glNormalStream3fATI(GLenum stream, GLfloat nx, GLfloat ny, GLfloat nz)
    {
    
    glad_glNormalStream3fATI(stream,nx,ny,nz);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glNormalStream3fATI");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glNormalStream3fvATI(GLenum stream, const GLfloat* coords)
    {
    
    glad_glNormalStream3fvATI(stream,coords);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glNormalStream3fvATI");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glNormalStream3dATI(GLenum stream, GLdouble nx, GLdouble ny, GLdouble nz)
    {
    
    glad_glNormalStream3dATI(stream,nx,ny,nz);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glNormalStream3dATI");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glNormalStream3dvATI(GLenum stream, const GLdouble* coords)
    {
    
    glad_glNormalStream3dvATI(stream,coords);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glNormalStream3dvATI");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glClientActiveVertexStreamATI(GLenum stream)
    {
    
    glad_glClientActiveVertexStreamATI(stream);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glClientActiveVertexStreamATI");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexBlendEnviATI(GLenum pname, GLint param)
    {
    
    glad_glVertexBlendEnviATI(pname,param);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexBlendEnviATI");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexBlendEnvfATI(GLenum pname, GLfloat param)
    {
    
    glad_glVertexBlendEnvfATI(pname,param);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexBlendEnvfATI");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glEGLImageTargetTexStorageEXT(GLenum target, GLeglImageOES image, const GLint* attrib_list)
    {
    
    glad_glEGLImageTargetTexStorageEXT(target,image,attrib_list);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glEGLImageTargetTexStorageEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glEGLImageTargetTextureStorageEXT(GLuint texture, GLeglImageOES image, const GLint* attrib_list)
    {
    
    glad_glEGLImageTargetTextureStorageEXT(texture,image,attrib_list);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glEGLImageTargetTextureStorageEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glUniformBufferEXT(GLuint program, GLint location, GLuint buffer)
    {
    
    glad_glUniformBufferEXT(program,location,buffer);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glUniformBufferEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    GLint __cdecl glwrap_glGetUniformBufferSizeEXT(GLuint program, GLint location)
    {
    
    GLint ret = glad_glGetUniformBufferSizeEXT(program,location);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetUniformBufferSizeEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	return ret;
    }

    GLintptr __cdecl glwrap_glGetUniformOffsetEXT(GLuint program, GLint location)
    {
    
    GLintptr ret = glad_glGetUniformOffsetEXT(program,location);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetUniformOffsetEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	return ret;
    }

    void __cdecl glwrap_glBlendColorEXT(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)
    {
    
    glad_glBlendColorEXT(red,green,blue,alpha);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glBlendColorEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glBlendEquationSeparateEXT(GLenum modeRGB, GLenum modeAlpha)
    {
    
    glad_glBlendEquationSeparateEXT(modeRGB,modeAlpha);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glBlendEquationSeparateEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glBlendFuncSeparateEXT(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha)
    {
    
    glad_glBlendFuncSeparateEXT(sfactorRGB,dfactorRGB,sfactorAlpha,dfactorAlpha);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glBlendFuncSeparateEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glBlendEquationEXT(GLenum mode)
    {
    
    glad_glBlendEquationEXT(mode);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glBlendEquationEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glColorSubTableEXT(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const void* data)
    {
    
    glad_glColorSubTableEXT(target,start,count,format,type,data);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glColorSubTableEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glCopyColorSubTableEXT(GLenum target, GLsizei start, GLint x, GLint y, GLsizei width)
    {
    
    glad_glCopyColorSubTableEXT(target,start,x,y,width);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glCopyColorSubTableEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glLockArraysEXT(GLint first, GLsizei count)
    {
    
    glad_glLockArraysEXT(first,count);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glLockArraysEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glUnlockArraysEXT()
    {
    
    glad_glUnlockArraysEXT();
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glUnlockArraysEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glConvolutionFilter1DEXT(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void* image)
    {
    
    glad_glConvolutionFilter1DEXT(target,internalformat,width,format,type,image);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glConvolutionFilter1DEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glConvolutionFilter2DEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void* image)
    {
    
    glad_glConvolutionFilter2DEXT(target,internalformat,width,height,format,type,image);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glConvolutionFilter2DEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glConvolutionParameterfEXT(GLenum target, GLenum pname, GLfloat params)
    {
    
    glad_glConvolutionParameterfEXT(target,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glConvolutionParameterfEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glConvolutionParameterfvEXT(GLenum target, GLenum pname, const GLfloat* params)
    {
    
    glad_glConvolutionParameterfvEXT(target,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glConvolutionParameterfvEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glConvolutionParameteriEXT(GLenum target, GLenum pname, GLint params)
    {
    
    glad_glConvolutionParameteriEXT(target,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glConvolutionParameteriEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glConvolutionParameterivEXT(GLenum target, GLenum pname, const GLint* params)
    {
    
    glad_glConvolutionParameterivEXT(target,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glConvolutionParameterivEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glCopyConvolutionFilter1DEXT(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width)
    {
    
    glad_glCopyConvolutionFilter1DEXT(target,internalformat,x,y,width);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glCopyConvolutionFilter1DEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glCopyConvolutionFilter2DEXT(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height)
    {
    
    glad_glCopyConvolutionFilter2DEXT(target,internalformat,x,y,width,height);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glCopyConvolutionFilter2DEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetConvolutionFilterEXT(GLenum target, GLenum format, GLenum type, void* image)
    {
    
    glad_glGetConvolutionFilterEXT(target,format,type,image);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetConvolutionFilterEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetConvolutionParameterfvEXT(GLenum target, GLenum pname, GLfloat* params)
    {
    
    glad_glGetConvolutionParameterfvEXT(target,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetConvolutionParameterfvEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetConvolutionParameterivEXT(GLenum target, GLenum pname, GLint* params)
    {
    
    glad_glGetConvolutionParameterivEXT(target,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetConvolutionParameterivEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetSeparableFilterEXT(GLenum target, GLenum format, GLenum type, void* row, void* column, void* span)
    {
    
    glad_glGetSeparableFilterEXT(target,format,type,row,column,span);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetSeparableFilterEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glSeparableFilter2DEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void* row, const void* column)
    {
    
    glad_glSeparableFilter2DEXT(target,internalformat,width,height,format,type,row,column);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glSeparableFilter2DEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTangent3bEXT(GLbyte tx, GLbyte ty, GLbyte tz)
    {
    
    glad_glTangent3bEXT(tx,ty,tz);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTangent3bEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTangent3bvEXT(const GLbyte* v)
    {
    
    glad_glTangent3bvEXT(v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTangent3bvEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTangent3dEXT(GLdouble tx, GLdouble ty, GLdouble tz)
    {
    
    glad_glTangent3dEXT(tx,ty,tz);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTangent3dEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTangent3dvEXT(const GLdouble* v)
    {
    
    glad_glTangent3dvEXT(v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTangent3dvEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTangent3fEXT(GLfloat tx, GLfloat ty, GLfloat tz)
    {
    
    glad_glTangent3fEXT(tx,ty,tz);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTangent3fEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTangent3fvEXT(const GLfloat* v)
    {
    
    glad_glTangent3fvEXT(v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTangent3fvEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTangent3iEXT(GLint tx, GLint ty, GLint tz)
    {
    
    glad_glTangent3iEXT(tx,ty,tz);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTangent3iEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTangent3ivEXT(const GLint* v)
    {
    
    glad_glTangent3ivEXT(v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTangent3ivEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTangent3sEXT(GLshort tx, GLshort ty, GLshort tz)
    {
    
    glad_glTangent3sEXT(tx,ty,tz);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTangent3sEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTangent3svEXT(const GLshort* v)
    {
    
    glad_glTangent3svEXT(v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTangent3svEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glBinormal3bEXT(GLbyte bx, GLbyte by, GLbyte bz)
    {
    
    glad_glBinormal3bEXT(bx,by,bz);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glBinormal3bEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glBinormal3bvEXT(const GLbyte* v)
    {
    
    glad_glBinormal3bvEXT(v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glBinormal3bvEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glBinormal3dEXT(GLdouble bx, GLdouble by, GLdouble bz)
    {
    
    glad_glBinormal3dEXT(bx,by,bz);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glBinormal3dEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glBinormal3dvEXT(const GLdouble* v)
    {
    
    glad_glBinormal3dvEXT(v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glBinormal3dvEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glBinormal3fEXT(GLfloat bx, GLfloat by, GLfloat bz)
    {
    
    glad_glBinormal3fEXT(bx,by,bz);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glBinormal3fEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glBinormal3fvEXT(const GLfloat* v)
    {
    
    glad_glBinormal3fvEXT(v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glBinormal3fvEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glBinormal3iEXT(GLint bx, GLint by, GLint bz)
    {
    
    glad_glBinormal3iEXT(bx,by,bz);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glBinormal3iEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glBinormal3ivEXT(const GLint* v)
    {
    
    glad_glBinormal3ivEXT(v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glBinormal3ivEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glBinormal3sEXT(GLshort bx, GLshort by, GLshort bz)
    {
    
    glad_glBinormal3sEXT(bx,by,bz);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glBinormal3sEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glBinormal3svEXT(const GLshort* v)
    {
    
    glad_glBinormal3svEXT(v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glBinormal3svEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTangentPointerEXT(GLenum type, GLsizei stride, const void* pointer)
    {
    
    glad_glTangentPointerEXT(type,stride,pointer);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTangentPointerEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glBinormalPointerEXT(GLenum type, GLsizei stride, const void* pointer)
    {
    
    glad_glBinormalPointerEXT(type,stride,pointer);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glBinormalPointerEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glCopyTexImage1DEXT(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border)
    {
    
    glad_glCopyTexImage1DEXT(target,level,internalformat,x,y,width,border);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glCopyTexImage1DEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glCopyTexImage2DEXT(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)
    {
    
    glad_glCopyTexImage2DEXT(target,level,internalformat,x,y,width,height,border);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glCopyTexImage2DEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glCopyTexSubImage1DEXT(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)
    {
    
    glad_glCopyTexSubImage1DEXT(target,level,xoffset,x,y,width);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glCopyTexSubImage1DEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glCopyTexSubImage2DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)
    {
    
    glad_glCopyTexSubImage2DEXT(target,level,xoffset,yoffset,x,y,width,height);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glCopyTexSubImage2DEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glCopyTexSubImage3DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)
    {
    
    glad_glCopyTexSubImage3DEXT(target,level,xoffset,yoffset,zoffset,x,y,width,height);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glCopyTexSubImage3DEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glCullParameterdvEXT(GLenum pname, GLdouble* params)
    {
    
    glad_glCullParameterdvEXT(pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glCullParameterdvEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glCullParameterfvEXT(GLenum pname, GLfloat* params)
    {
    
    glad_glCullParameterfvEXT(pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glCullParameterfvEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glLabelObjectEXT(GLenum type, GLuint object, GLsizei length, const GLchar* label)
    {
    
    glad_glLabelObjectEXT(type,object,length,label);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glLabelObjectEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetObjectLabelEXT(GLenum type, GLuint object, GLsizei bufSize, GLsizei* length, GLchar* label)
    {
    
    glad_glGetObjectLabelEXT(type,object,bufSize,length,label);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetObjectLabelEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glInsertEventMarkerEXT(GLsizei length, const GLchar* marker)
    {
    
    glad_glInsertEventMarkerEXT(length,marker);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glInsertEventMarkerEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glPushGroupMarkerEXT(GLsizei length, const GLchar* marker)
    {
    
    glad_glPushGroupMarkerEXT(length,marker);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glPushGroupMarkerEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glPopGroupMarkerEXT()
    {
    
    glad_glPopGroupMarkerEXT();
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glPopGroupMarkerEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glDepthBoundsEXT(GLclampd zmin, GLclampd zmax)
    {
    
    glad_glDepthBoundsEXT(zmin,zmax);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glDepthBoundsEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMatrixLoadfEXT(GLenum mode, const GLfloat* m)
    {
    
    glad_glMatrixLoadfEXT(mode,m);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMatrixLoadfEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMatrixLoaddEXT(GLenum mode, const GLdouble* m)
    {
    
    glad_glMatrixLoaddEXT(mode,m);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMatrixLoaddEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMatrixMultfEXT(GLenum mode, const GLfloat* m)
    {
    
    glad_glMatrixMultfEXT(mode,m);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMatrixMultfEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMatrixMultdEXT(GLenum mode, const GLdouble* m)
    {
    
    glad_glMatrixMultdEXT(mode,m);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMatrixMultdEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMatrixLoadIdentityEXT(GLenum mode)
    {
    
    glad_glMatrixLoadIdentityEXT(mode);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMatrixLoadIdentityEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMatrixRotatefEXT(GLenum mode, GLfloat angle, GLfloat x, GLfloat y, GLfloat z)
    {
    
    glad_glMatrixRotatefEXT(mode,angle,x,y,z);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMatrixRotatefEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMatrixRotatedEXT(GLenum mode, GLdouble angle, GLdouble x, GLdouble y, GLdouble z)
    {
    
    glad_glMatrixRotatedEXT(mode,angle,x,y,z);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMatrixRotatedEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMatrixScalefEXT(GLenum mode, GLfloat x, GLfloat y, GLfloat z)
    {
    
    glad_glMatrixScalefEXT(mode,x,y,z);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMatrixScalefEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMatrixScaledEXT(GLenum mode, GLdouble x, GLdouble y, GLdouble z)
    {
    
    glad_glMatrixScaledEXT(mode,x,y,z);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMatrixScaledEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMatrixTranslatefEXT(GLenum mode, GLfloat x, GLfloat y, GLfloat z)
    {
    
    glad_glMatrixTranslatefEXT(mode,x,y,z);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMatrixTranslatefEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMatrixTranslatedEXT(GLenum mode, GLdouble x, GLdouble y, GLdouble z)
    {
    
    glad_glMatrixTranslatedEXT(mode,x,y,z);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMatrixTranslatedEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMatrixFrustumEXT(GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar)
    {
    
    glad_glMatrixFrustumEXT(mode,left,right,bottom,top,zNear,zFar);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMatrixFrustumEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMatrixOrthoEXT(GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar)
    {
    
    glad_glMatrixOrthoEXT(mode,left,right,bottom,top,zNear,zFar);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMatrixOrthoEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMatrixPopEXT(GLenum mode)
    {
    
    glad_glMatrixPopEXT(mode);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMatrixPopEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMatrixPushEXT(GLenum mode)
    {
    
    glad_glMatrixPushEXT(mode);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMatrixPushEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glClientAttribDefaultEXT(GLbitfield mask)
    {
    
    glad_glClientAttribDefaultEXT(mask);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glClientAttribDefaultEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glPushClientAttribDefaultEXT(GLbitfield mask)
    {
    
    glad_glPushClientAttribDefaultEXT(mask);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glPushClientAttribDefaultEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTextureParameterfEXT(GLuint texture, GLenum target, GLenum pname, GLfloat param)
    {
    
    glad_glTextureParameterfEXT(texture,target,pname,param);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTextureParameterfEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTextureParameterfvEXT(GLuint texture, GLenum target, GLenum pname, const GLfloat* params)
    {
    
    glad_glTextureParameterfvEXT(texture,target,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTextureParameterfvEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTextureParameteriEXT(GLuint texture, GLenum target, GLenum pname, GLint param)
    {
    
    glad_glTextureParameteriEXT(texture,target,pname,param);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTextureParameteriEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTextureParameterivEXT(GLuint texture, GLenum target, GLenum pname, const GLint* params)
    {
    
    glad_glTextureParameterivEXT(texture,target,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTextureParameterivEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTextureImage1DEXT(GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void* pixels)
    {
    
    glad_glTextureImage1DEXT(texture,target,level,internalformat,width,border,format,type,pixels);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTextureImage1DEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTextureImage2DEXT(GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void* pixels)
    {
    
    glad_glTextureImage2DEXT(texture,target,level,internalformat,width,height,border,format,type,pixels);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTextureImage2DEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTextureSubImage1DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void* pixels)
    {
    
    glad_glTextureSubImage1DEXT(texture,target,level,xoffset,width,format,type,pixels);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTextureSubImage1DEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTextureSubImage2DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void* pixels)
    {
    
    glad_glTextureSubImage2DEXT(texture,target,level,xoffset,yoffset,width,height,format,type,pixels);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTextureSubImage2DEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glCopyTextureImage1DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border)
    {
    
    glad_glCopyTextureImage1DEXT(texture,target,level,internalformat,x,y,width,border);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glCopyTextureImage1DEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glCopyTextureImage2DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)
    {
    
    glad_glCopyTextureImage2DEXT(texture,target,level,internalformat,x,y,width,height,border);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glCopyTextureImage2DEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glCopyTextureSubImage1DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)
    {
    
    glad_glCopyTextureSubImage1DEXT(texture,target,level,xoffset,x,y,width);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glCopyTextureSubImage1DEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glCopyTextureSubImage2DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)
    {
    
    glad_glCopyTextureSubImage2DEXT(texture,target,level,xoffset,yoffset,x,y,width,height);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glCopyTextureSubImage2DEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetTextureImageEXT(GLuint texture, GLenum target, GLint level, GLenum format, GLenum type, void* pixels)
    {
    
    glad_glGetTextureImageEXT(texture,target,level,format,type,pixels);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetTextureImageEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetTextureParameterfvEXT(GLuint texture, GLenum target, GLenum pname, GLfloat* params)
    {
    
    glad_glGetTextureParameterfvEXT(texture,target,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetTextureParameterfvEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetTextureParameterivEXT(GLuint texture, GLenum target, GLenum pname, GLint* params)
    {
    
    glad_glGetTextureParameterivEXT(texture,target,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetTextureParameterivEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetTextureLevelParameterfvEXT(GLuint texture, GLenum target, GLint level, GLenum pname, GLfloat* params)
    {
    
    glad_glGetTextureLevelParameterfvEXT(texture,target,level,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetTextureLevelParameterfvEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetTextureLevelParameterivEXT(GLuint texture, GLenum target, GLint level, GLenum pname, GLint* params)
    {
    
    glad_glGetTextureLevelParameterivEXT(texture,target,level,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetTextureLevelParameterivEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTextureImage3DEXT(GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void* pixels)
    {
    
    glad_glTextureImage3DEXT(texture,target,level,internalformat,width,height,depth,border,format,type,pixels);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTextureImage3DEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTextureSubImage3DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void* pixels)
    {
    
    glad_glTextureSubImage3DEXT(texture,target,level,xoffset,yoffset,zoffset,width,height,depth,format,type,pixels);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTextureSubImage3DEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glCopyTextureSubImage3DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)
    {
    
    glad_glCopyTextureSubImage3DEXT(texture,target,level,xoffset,yoffset,zoffset,x,y,width,height);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glCopyTextureSubImage3DEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glBindMultiTextureEXT(GLenum texunit, GLenum target, GLuint texture)
    {
    
    glad_glBindMultiTextureEXT(texunit,target,texture);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glBindMultiTextureEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMultiTexCoordPointerEXT(GLenum texunit, GLint size, GLenum type, GLsizei stride, const void* pointer)
    {
    
    glad_glMultiTexCoordPointerEXT(texunit,size,type,stride,pointer);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMultiTexCoordPointerEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMultiTexEnvfEXT(GLenum texunit, GLenum target, GLenum pname, GLfloat param)
    {
    
    glad_glMultiTexEnvfEXT(texunit,target,pname,param);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMultiTexEnvfEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMultiTexEnvfvEXT(GLenum texunit, GLenum target, GLenum pname, const GLfloat* params)
    {
    
    glad_glMultiTexEnvfvEXT(texunit,target,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMultiTexEnvfvEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMultiTexEnviEXT(GLenum texunit, GLenum target, GLenum pname, GLint param)
    {
    
    glad_glMultiTexEnviEXT(texunit,target,pname,param);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMultiTexEnviEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMultiTexEnvivEXT(GLenum texunit, GLenum target, GLenum pname, const GLint* params)
    {
    
    glad_glMultiTexEnvivEXT(texunit,target,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMultiTexEnvivEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMultiTexGendEXT(GLenum texunit, GLenum coord, GLenum pname, GLdouble param)
    {
    
    glad_glMultiTexGendEXT(texunit,coord,pname,param);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMultiTexGendEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMultiTexGendvEXT(GLenum texunit, GLenum coord, GLenum pname, const GLdouble* params)
    {
    
    glad_glMultiTexGendvEXT(texunit,coord,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMultiTexGendvEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMultiTexGenfEXT(GLenum texunit, GLenum coord, GLenum pname, GLfloat param)
    {
    
    glad_glMultiTexGenfEXT(texunit,coord,pname,param);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMultiTexGenfEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMultiTexGenfvEXT(GLenum texunit, GLenum coord, GLenum pname, const GLfloat* params)
    {
    
    glad_glMultiTexGenfvEXT(texunit,coord,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMultiTexGenfvEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMultiTexGeniEXT(GLenum texunit, GLenum coord, GLenum pname, GLint param)
    {
    
    glad_glMultiTexGeniEXT(texunit,coord,pname,param);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMultiTexGeniEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMultiTexGenivEXT(GLenum texunit, GLenum coord, GLenum pname, const GLint* params)
    {
    
    glad_glMultiTexGenivEXT(texunit,coord,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMultiTexGenivEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetMultiTexEnvfvEXT(GLenum texunit, GLenum target, GLenum pname, GLfloat* params)
    {
    
    glad_glGetMultiTexEnvfvEXT(texunit,target,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetMultiTexEnvfvEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetMultiTexEnvivEXT(GLenum texunit, GLenum target, GLenum pname, GLint* params)
    {
    
    glad_glGetMultiTexEnvivEXT(texunit,target,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetMultiTexEnvivEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetMultiTexGendvEXT(GLenum texunit, GLenum coord, GLenum pname, GLdouble* params)
    {
    
    glad_glGetMultiTexGendvEXT(texunit,coord,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetMultiTexGendvEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetMultiTexGenfvEXT(GLenum texunit, GLenum coord, GLenum pname, GLfloat* params)
    {
    
    glad_glGetMultiTexGenfvEXT(texunit,coord,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetMultiTexGenfvEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetMultiTexGenivEXT(GLenum texunit, GLenum coord, GLenum pname, GLint* params)
    {
    
    glad_glGetMultiTexGenivEXT(texunit,coord,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetMultiTexGenivEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMultiTexParameteriEXT(GLenum texunit, GLenum target, GLenum pname, GLint param)
    {
    
    glad_glMultiTexParameteriEXT(texunit,target,pname,param);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMultiTexParameteriEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMultiTexParameterivEXT(GLenum texunit, GLenum target, GLenum pname, const GLint* params)
    {
    
    glad_glMultiTexParameterivEXT(texunit,target,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMultiTexParameterivEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMultiTexParameterfEXT(GLenum texunit, GLenum target, GLenum pname, GLfloat param)
    {
    
    glad_glMultiTexParameterfEXT(texunit,target,pname,param);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMultiTexParameterfEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMultiTexParameterfvEXT(GLenum texunit, GLenum target, GLenum pname, const GLfloat* params)
    {
    
    glad_glMultiTexParameterfvEXT(texunit,target,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMultiTexParameterfvEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMultiTexImage1DEXT(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void* pixels)
    {
    
    glad_glMultiTexImage1DEXT(texunit,target,level,internalformat,width,border,format,type,pixels);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMultiTexImage1DEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMultiTexImage2DEXT(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void* pixels)
    {
    
    glad_glMultiTexImage2DEXT(texunit,target,level,internalformat,width,height,border,format,type,pixels);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMultiTexImage2DEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMultiTexSubImage1DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void* pixels)
    {
    
    glad_glMultiTexSubImage1DEXT(texunit,target,level,xoffset,width,format,type,pixels);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMultiTexSubImage1DEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMultiTexSubImage2DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void* pixels)
    {
    
    glad_glMultiTexSubImage2DEXT(texunit,target,level,xoffset,yoffset,width,height,format,type,pixels);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMultiTexSubImage2DEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glCopyMultiTexImage1DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border)
    {
    
    glad_glCopyMultiTexImage1DEXT(texunit,target,level,internalformat,x,y,width,border);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glCopyMultiTexImage1DEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glCopyMultiTexImage2DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)
    {
    
    glad_glCopyMultiTexImage2DEXT(texunit,target,level,internalformat,x,y,width,height,border);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glCopyMultiTexImage2DEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glCopyMultiTexSubImage1DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)
    {
    
    glad_glCopyMultiTexSubImage1DEXT(texunit,target,level,xoffset,x,y,width);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glCopyMultiTexSubImage1DEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glCopyMultiTexSubImage2DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)
    {
    
    glad_glCopyMultiTexSubImage2DEXT(texunit,target,level,xoffset,yoffset,x,y,width,height);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glCopyMultiTexSubImage2DEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetMultiTexImageEXT(GLenum texunit, GLenum target, GLint level, GLenum format, GLenum type, void* pixels)
    {
    
    glad_glGetMultiTexImageEXT(texunit,target,level,format,type,pixels);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetMultiTexImageEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetMultiTexParameterfvEXT(GLenum texunit, GLenum target, GLenum pname, GLfloat* params)
    {
    
    glad_glGetMultiTexParameterfvEXT(texunit,target,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetMultiTexParameterfvEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetMultiTexParameterivEXT(GLenum texunit, GLenum target, GLenum pname, GLint* params)
    {
    
    glad_glGetMultiTexParameterivEXT(texunit,target,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetMultiTexParameterivEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetMultiTexLevelParameterfvEXT(GLenum texunit, GLenum target, GLint level, GLenum pname, GLfloat* params)
    {
    
    glad_glGetMultiTexLevelParameterfvEXT(texunit,target,level,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetMultiTexLevelParameterfvEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetMultiTexLevelParameterivEXT(GLenum texunit, GLenum target, GLint level, GLenum pname, GLint* params)
    {
    
    glad_glGetMultiTexLevelParameterivEXT(texunit,target,level,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetMultiTexLevelParameterivEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMultiTexImage3DEXT(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void* pixels)
    {
    
    glad_glMultiTexImage3DEXT(texunit,target,level,internalformat,width,height,depth,border,format,type,pixels);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMultiTexImage3DEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMultiTexSubImage3DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void* pixels)
    {
    
    glad_glMultiTexSubImage3DEXT(texunit,target,level,xoffset,yoffset,zoffset,width,height,depth,format,type,pixels);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMultiTexSubImage3DEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glCopyMultiTexSubImage3DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)
    {
    
    glad_glCopyMultiTexSubImage3DEXT(texunit,target,level,xoffset,yoffset,zoffset,x,y,width,height);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glCopyMultiTexSubImage3DEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glEnableClientStateIndexedEXT(GLenum array, GLuint index)
    {
    
    glad_glEnableClientStateIndexedEXT(array,index);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glEnableClientStateIndexedEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glDisableClientStateIndexedEXT(GLenum array, GLuint index)
    {
    
    glad_glDisableClientStateIndexedEXT(array,index);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glDisableClientStateIndexedEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetFloatIndexedvEXT(GLenum target, GLuint index, GLfloat* data)
    {
    
    glad_glGetFloatIndexedvEXT(target,index,data);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetFloatIndexedvEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetDoubleIndexedvEXT(GLenum target, GLuint index, GLdouble* data)
    {
    
    glad_glGetDoubleIndexedvEXT(target,index,data);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetDoubleIndexedvEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetPointerIndexedvEXT(GLenum target, GLuint index, void** data)
    {
    
    glad_glGetPointerIndexedvEXT(target,index,data);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetPointerIndexedvEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glEnableIndexedEXT(GLenum target, GLuint index)
    {
    
    glad_glEnableIndexedEXT(target,index);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glEnableIndexedEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glDisableIndexedEXT(GLenum target, GLuint index)
    {
    
    glad_glDisableIndexedEXT(target,index);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glDisableIndexedEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    GLboolean __cdecl glwrap_glIsEnabledIndexedEXT(GLenum target, GLuint index)
    {
    
    GLboolean ret = glad_glIsEnabledIndexedEXT(target,index);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glIsEnabledIndexedEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	return ret;
    }

    void __cdecl glwrap_glGetIntegerIndexedvEXT(GLenum target, GLuint index, GLint* data)
    {
    
    glad_glGetIntegerIndexedvEXT(target,index,data);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetIntegerIndexedvEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetBooleanIndexedvEXT(GLenum target, GLuint index, GLboolean* data)
    {
    
    glad_glGetBooleanIndexedvEXT(target,index,data);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetBooleanIndexedvEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glCompressedTextureImage3DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void* bits)
    {
    
    glad_glCompressedTextureImage3DEXT(texture,target,level,internalformat,width,height,depth,border,imageSize,bits);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glCompressedTextureImage3DEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glCompressedTextureImage2DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void* bits)
    {
    
    glad_glCompressedTextureImage2DEXT(texture,target,level,internalformat,width,height,border,imageSize,bits);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glCompressedTextureImage2DEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glCompressedTextureImage1DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void* bits)
    {
    
    glad_glCompressedTextureImage1DEXT(texture,target,level,internalformat,width,border,imageSize,bits);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glCompressedTextureImage1DEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glCompressedTextureSubImage3DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void* bits)
    {
    
    glad_glCompressedTextureSubImage3DEXT(texture,target,level,xoffset,yoffset,zoffset,width,height,depth,format,imageSize,bits);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glCompressedTextureSubImage3DEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glCompressedTextureSubImage2DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void* bits)
    {
    
    glad_glCompressedTextureSubImage2DEXT(texture,target,level,xoffset,yoffset,width,height,format,imageSize,bits);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glCompressedTextureSubImage2DEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glCompressedTextureSubImage1DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void* bits)
    {
    
    glad_glCompressedTextureSubImage1DEXT(texture,target,level,xoffset,width,format,imageSize,bits);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glCompressedTextureSubImage1DEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetCompressedTextureImageEXT(GLuint texture, GLenum target, GLint lod, void* img)
    {
    
    glad_glGetCompressedTextureImageEXT(texture,target,lod,img);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetCompressedTextureImageEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glCompressedMultiTexImage3DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void* bits)
    {
    
    glad_glCompressedMultiTexImage3DEXT(texunit,target,level,internalformat,width,height,depth,border,imageSize,bits);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glCompressedMultiTexImage3DEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glCompressedMultiTexImage2DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void* bits)
    {
    
    glad_glCompressedMultiTexImage2DEXT(texunit,target,level,internalformat,width,height,border,imageSize,bits);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glCompressedMultiTexImage2DEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glCompressedMultiTexImage1DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void* bits)
    {
    
    glad_glCompressedMultiTexImage1DEXT(texunit,target,level,internalformat,width,border,imageSize,bits);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glCompressedMultiTexImage1DEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glCompressedMultiTexSubImage3DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void* bits)
    {
    
    glad_glCompressedMultiTexSubImage3DEXT(texunit,target,level,xoffset,yoffset,zoffset,width,height,depth,format,imageSize,bits);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glCompressedMultiTexSubImage3DEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glCompressedMultiTexSubImage2DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void* bits)
    {
    
    glad_glCompressedMultiTexSubImage2DEXT(texunit,target,level,xoffset,yoffset,width,height,format,imageSize,bits);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glCompressedMultiTexSubImage2DEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glCompressedMultiTexSubImage1DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void* bits)
    {
    
    glad_glCompressedMultiTexSubImage1DEXT(texunit,target,level,xoffset,width,format,imageSize,bits);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glCompressedMultiTexSubImage1DEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetCompressedMultiTexImageEXT(GLenum texunit, GLenum target, GLint lod, void* img)
    {
    
    glad_glGetCompressedMultiTexImageEXT(texunit,target,lod,img);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetCompressedMultiTexImageEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMatrixLoadTransposefEXT(GLenum mode, const GLfloat* m)
    {
    
    glad_glMatrixLoadTransposefEXT(mode,m);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMatrixLoadTransposefEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMatrixLoadTransposedEXT(GLenum mode, const GLdouble* m)
    {
    
    glad_glMatrixLoadTransposedEXT(mode,m);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMatrixLoadTransposedEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMatrixMultTransposefEXT(GLenum mode, const GLfloat* m)
    {
    
    glad_glMatrixMultTransposefEXT(mode,m);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMatrixMultTransposefEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMatrixMultTransposedEXT(GLenum mode, const GLdouble* m)
    {
    
    glad_glMatrixMultTransposedEXT(mode,m);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMatrixMultTransposedEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glNamedBufferDataEXT(GLuint buffer, GLsizeiptr size, const void* data, GLenum usage)
    {
    
    glad_glNamedBufferDataEXT(buffer,size,data,usage);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glNamedBufferDataEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glNamedBufferSubDataEXT(GLuint buffer, GLintptr offset, GLsizeiptr size, const void* data)
    {
    
    glad_glNamedBufferSubDataEXT(buffer,offset,size,data);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glNamedBufferSubDataEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void * __cdecl glwrap_glMapNamedBufferEXT(GLuint buffer, GLenum access)
    {
    
    void * ret = glad_glMapNamedBufferEXT(buffer,access);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMapNamedBufferEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	return ret;
    }

    GLboolean __cdecl glwrap_glUnmapNamedBufferEXT(GLuint buffer)
    {
    
    GLboolean ret = glad_glUnmapNamedBufferEXT(buffer);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glUnmapNamedBufferEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	return ret;
    }

    void __cdecl glwrap_glGetNamedBufferParameterivEXT(GLuint buffer, GLenum pname, GLint* params)
    {
    
    glad_glGetNamedBufferParameterivEXT(buffer,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetNamedBufferParameterivEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetNamedBufferPointervEXT(GLuint buffer, GLenum pname, void** params)
    {
    
    glad_glGetNamedBufferPointervEXT(buffer,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetNamedBufferPointervEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetNamedBufferSubDataEXT(GLuint buffer, GLintptr offset, GLsizeiptr size, void* data)
    {
    
    glad_glGetNamedBufferSubDataEXT(buffer,offset,size,data);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetNamedBufferSubDataEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramUniform1fEXT(GLuint program, GLint location, GLfloat v0)
    {
    
    glad_glProgramUniform1fEXT(program,location,v0);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramUniform1fEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramUniform2fEXT(GLuint program, GLint location, GLfloat v0, GLfloat v1)
    {
    
    glad_glProgramUniform2fEXT(program,location,v0,v1);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramUniform2fEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramUniform3fEXT(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2)
    {
    
    glad_glProgramUniform3fEXT(program,location,v0,v1,v2);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramUniform3fEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramUniform4fEXT(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)
    {
    
    glad_glProgramUniform4fEXT(program,location,v0,v1,v2,v3);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramUniform4fEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramUniform1iEXT(GLuint program, GLint location, GLint v0)
    {
    
    glad_glProgramUniform1iEXT(program,location,v0);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramUniform1iEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramUniform2iEXT(GLuint program, GLint location, GLint v0, GLint v1)
    {
    
    glad_glProgramUniform2iEXT(program,location,v0,v1);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramUniform2iEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramUniform3iEXT(GLuint program, GLint location, GLint v0, GLint v1, GLint v2)
    {
    
    glad_glProgramUniform3iEXT(program,location,v0,v1,v2);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramUniform3iEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramUniform4iEXT(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3)
    {
    
    glad_glProgramUniform4iEXT(program,location,v0,v1,v2,v3);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramUniform4iEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramUniform1fvEXT(GLuint program, GLint location, GLsizei count, const GLfloat* value)
    {
    
    glad_glProgramUniform1fvEXT(program,location,count,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramUniform1fvEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramUniform2fvEXT(GLuint program, GLint location, GLsizei count, const GLfloat* value)
    {
    
    glad_glProgramUniform2fvEXT(program,location,count,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramUniform2fvEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramUniform3fvEXT(GLuint program, GLint location, GLsizei count, const GLfloat* value)
    {
    
    glad_glProgramUniform3fvEXT(program,location,count,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramUniform3fvEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramUniform4fvEXT(GLuint program, GLint location, GLsizei count, const GLfloat* value)
    {
    
    glad_glProgramUniform4fvEXT(program,location,count,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramUniform4fvEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramUniform1ivEXT(GLuint program, GLint location, GLsizei count, const GLint* value)
    {
    
    glad_glProgramUniform1ivEXT(program,location,count,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramUniform1ivEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramUniform2ivEXT(GLuint program, GLint location, GLsizei count, const GLint* value)
    {
    
    glad_glProgramUniform2ivEXT(program,location,count,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramUniform2ivEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramUniform3ivEXT(GLuint program, GLint location, GLsizei count, const GLint* value)
    {
    
    glad_glProgramUniform3ivEXT(program,location,count,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramUniform3ivEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramUniform4ivEXT(GLuint program, GLint location, GLsizei count, const GLint* value)
    {
    
    glad_glProgramUniform4ivEXT(program,location,count,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramUniform4ivEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramUniformMatrix2fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)
    {
    
    glad_glProgramUniformMatrix2fvEXT(program,location,count,transpose,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramUniformMatrix2fvEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramUniformMatrix3fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)
    {
    
    glad_glProgramUniformMatrix3fvEXT(program,location,count,transpose,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramUniformMatrix3fvEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramUniformMatrix4fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)
    {
    
    glad_glProgramUniformMatrix4fvEXT(program,location,count,transpose,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramUniformMatrix4fvEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramUniformMatrix2x3fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)
    {
    
    glad_glProgramUniformMatrix2x3fvEXT(program,location,count,transpose,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramUniformMatrix2x3fvEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramUniformMatrix3x2fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)
    {
    
    glad_glProgramUniformMatrix3x2fvEXT(program,location,count,transpose,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramUniformMatrix3x2fvEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramUniformMatrix2x4fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)
    {
    
    glad_glProgramUniformMatrix2x4fvEXT(program,location,count,transpose,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramUniformMatrix2x4fvEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramUniformMatrix4x2fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)
    {
    
    glad_glProgramUniformMatrix4x2fvEXT(program,location,count,transpose,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramUniformMatrix4x2fvEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramUniformMatrix3x4fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)
    {
    
    glad_glProgramUniformMatrix3x4fvEXT(program,location,count,transpose,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramUniformMatrix3x4fvEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramUniformMatrix4x3fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)
    {
    
    glad_glProgramUniformMatrix4x3fvEXT(program,location,count,transpose,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramUniformMatrix4x3fvEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTextureBufferEXT(GLuint texture, GLenum target, GLenum internalformat, GLuint buffer)
    {
    
    glad_glTextureBufferEXT(texture,target,internalformat,buffer);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTextureBufferEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMultiTexBufferEXT(GLenum texunit, GLenum target, GLenum internalformat, GLuint buffer)
    {
    
    glad_glMultiTexBufferEXT(texunit,target,internalformat,buffer);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMultiTexBufferEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTextureParameterIivEXT(GLuint texture, GLenum target, GLenum pname, const GLint* params)
    {
    
    glad_glTextureParameterIivEXT(texture,target,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTextureParameterIivEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTextureParameterIuivEXT(GLuint texture, GLenum target, GLenum pname, const GLuint* params)
    {
    
    glad_glTextureParameterIuivEXT(texture,target,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTextureParameterIuivEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetTextureParameterIivEXT(GLuint texture, GLenum target, GLenum pname, GLint* params)
    {
    
    glad_glGetTextureParameterIivEXT(texture,target,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetTextureParameterIivEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetTextureParameterIuivEXT(GLuint texture, GLenum target, GLenum pname, GLuint* params)
    {
    
    glad_glGetTextureParameterIuivEXT(texture,target,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetTextureParameterIuivEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMultiTexParameterIivEXT(GLenum texunit, GLenum target, GLenum pname, const GLint* params)
    {
    
    glad_glMultiTexParameterIivEXT(texunit,target,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMultiTexParameterIivEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMultiTexParameterIuivEXT(GLenum texunit, GLenum target, GLenum pname, const GLuint* params)
    {
    
    glad_glMultiTexParameterIuivEXT(texunit,target,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMultiTexParameterIuivEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetMultiTexParameterIivEXT(GLenum texunit, GLenum target, GLenum pname, GLint* params)
    {
    
    glad_glGetMultiTexParameterIivEXT(texunit,target,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetMultiTexParameterIivEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetMultiTexParameterIuivEXT(GLenum texunit, GLenum target, GLenum pname, GLuint* params)
    {
    
    glad_glGetMultiTexParameterIuivEXT(texunit,target,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetMultiTexParameterIuivEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramUniform1uiEXT(GLuint program, GLint location, GLuint v0)
    {
    
    glad_glProgramUniform1uiEXT(program,location,v0);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramUniform1uiEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramUniform2uiEXT(GLuint program, GLint location, GLuint v0, GLuint v1)
    {
    
    glad_glProgramUniform2uiEXT(program,location,v0,v1);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramUniform2uiEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramUniform3uiEXT(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2)
    {
    
    glad_glProgramUniform3uiEXT(program,location,v0,v1,v2);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramUniform3uiEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramUniform4uiEXT(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3)
    {
    
    glad_glProgramUniform4uiEXT(program,location,v0,v1,v2,v3);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramUniform4uiEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramUniform1uivEXT(GLuint program, GLint location, GLsizei count, const GLuint* value)
    {
    
    glad_glProgramUniform1uivEXT(program,location,count,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramUniform1uivEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramUniform2uivEXT(GLuint program, GLint location, GLsizei count, const GLuint* value)
    {
    
    glad_glProgramUniform2uivEXT(program,location,count,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramUniform2uivEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramUniform3uivEXT(GLuint program, GLint location, GLsizei count, const GLuint* value)
    {
    
    glad_glProgramUniform3uivEXT(program,location,count,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramUniform3uivEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramUniform4uivEXT(GLuint program, GLint location, GLsizei count, const GLuint* value)
    {
    
    glad_glProgramUniform4uivEXT(program,location,count,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramUniform4uivEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glNamedProgramLocalParameters4fvEXT(GLuint program, GLenum target, GLuint index, GLsizei count, const GLfloat* params)
    {
    
    glad_glNamedProgramLocalParameters4fvEXT(program,target,index,count,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glNamedProgramLocalParameters4fvEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glNamedProgramLocalParameterI4iEXT(GLuint program, GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w)
    {
    
    glad_glNamedProgramLocalParameterI4iEXT(program,target,index,x,y,z,w);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glNamedProgramLocalParameterI4iEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glNamedProgramLocalParameterI4ivEXT(GLuint program, GLenum target, GLuint index, const GLint* params)
    {
    
    glad_glNamedProgramLocalParameterI4ivEXT(program,target,index,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glNamedProgramLocalParameterI4ivEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glNamedProgramLocalParametersI4ivEXT(GLuint program, GLenum target, GLuint index, GLsizei count, const GLint* params)
    {
    
    glad_glNamedProgramLocalParametersI4ivEXT(program,target,index,count,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glNamedProgramLocalParametersI4ivEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glNamedProgramLocalParameterI4uiEXT(GLuint program, GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)
    {
    
    glad_glNamedProgramLocalParameterI4uiEXT(program,target,index,x,y,z,w);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glNamedProgramLocalParameterI4uiEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glNamedProgramLocalParameterI4uivEXT(GLuint program, GLenum target, GLuint index, const GLuint* params)
    {
    
    glad_glNamedProgramLocalParameterI4uivEXT(program,target,index,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glNamedProgramLocalParameterI4uivEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glNamedProgramLocalParametersI4uivEXT(GLuint program, GLenum target, GLuint index, GLsizei count, const GLuint* params)
    {
    
    glad_glNamedProgramLocalParametersI4uivEXT(program,target,index,count,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glNamedProgramLocalParametersI4uivEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetNamedProgramLocalParameterIivEXT(GLuint program, GLenum target, GLuint index, GLint* params)
    {
    
    glad_glGetNamedProgramLocalParameterIivEXT(program,target,index,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetNamedProgramLocalParameterIivEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetNamedProgramLocalParameterIuivEXT(GLuint program, GLenum target, GLuint index, GLuint* params)
    {
    
    glad_glGetNamedProgramLocalParameterIuivEXT(program,target,index,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetNamedProgramLocalParameterIuivEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glEnableClientStateiEXT(GLenum array, GLuint index)
    {
    
    glad_glEnableClientStateiEXT(array,index);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glEnableClientStateiEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glDisableClientStateiEXT(GLenum array, GLuint index)
    {
    
    glad_glDisableClientStateiEXT(array,index);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glDisableClientStateiEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetFloati_vEXT(GLenum pname, GLuint index, GLfloat* params)
    {
    
    glad_glGetFloati_vEXT(pname,index,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetFloati_vEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetDoublei_vEXT(GLenum pname, GLuint index, GLdouble* params)
    {
    
    glad_glGetDoublei_vEXT(pname,index,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetDoublei_vEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetPointeri_vEXT(GLenum pname, GLuint index, void** params)
    {
    
    glad_glGetPointeri_vEXT(pname,index,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetPointeri_vEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glNamedProgramStringEXT(GLuint program, GLenum target, GLenum format, GLsizei len, const void* string)
    {
    
    glad_glNamedProgramStringEXT(program,target,format,len,string);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glNamedProgramStringEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glNamedProgramLocalParameter4dEXT(GLuint program, GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
    {
    
    glad_glNamedProgramLocalParameter4dEXT(program,target,index,x,y,z,w);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glNamedProgramLocalParameter4dEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glNamedProgramLocalParameter4dvEXT(GLuint program, GLenum target, GLuint index, const GLdouble* params)
    {
    
    glad_glNamedProgramLocalParameter4dvEXT(program,target,index,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glNamedProgramLocalParameter4dvEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glNamedProgramLocalParameter4fEXT(GLuint program, GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
    {
    
    glad_glNamedProgramLocalParameter4fEXT(program,target,index,x,y,z,w);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glNamedProgramLocalParameter4fEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glNamedProgramLocalParameter4fvEXT(GLuint program, GLenum target, GLuint index, const GLfloat* params)
    {
    
    glad_glNamedProgramLocalParameter4fvEXT(program,target,index,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glNamedProgramLocalParameter4fvEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetNamedProgramLocalParameterdvEXT(GLuint program, GLenum target, GLuint index, GLdouble* params)
    {
    
    glad_glGetNamedProgramLocalParameterdvEXT(program,target,index,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetNamedProgramLocalParameterdvEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetNamedProgramLocalParameterfvEXT(GLuint program, GLenum target, GLuint index, GLfloat* params)
    {
    
    glad_glGetNamedProgramLocalParameterfvEXT(program,target,index,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetNamedProgramLocalParameterfvEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetNamedProgramivEXT(GLuint program, GLenum target, GLenum pname, GLint* params)
    {
    
    glad_glGetNamedProgramivEXT(program,target,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetNamedProgramivEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetNamedProgramStringEXT(GLuint program, GLenum target, GLenum pname, void* string)
    {
    
    glad_glGetNamedProgramStringEXT(program,target,pname,string);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetNamedProgramStringEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glNamedRenderbufferStorageEXT(GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height)
    {
    
    glad_glNamedRenderbufferStorageEXT(renderbuffer,internalformat,width,height);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glNamedRenderbufferStorageEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetNamedRenderbufferParameterivEXT(GLuint renderbuffer, GLenum pname, GLint* params)
    {
    
    glad_glGetNamedRenderbufferParameterivEXT(renderbuffer,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetNamedRenderbufferParameterivEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glNamedRenderbufferStorageMultisampleEXT(GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
    {
    
    glad_glNamedRenderbufferStorageMultisampleEXT(renderbuffer,samples,internalformat,width,height);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glNamedRenderbufferStorageMultisampleEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glNamedRenderbufferStorageMultisampleCoverageEXT(GLuint renderbuffer, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height)
    {
    
    glad_glNamedRenderbufferStorageMultisampleCoverageEXT(renderbuffer,coverageSamples,colorSamples,internalformat,width,height);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glNamedRenderbufferStorageMultisampleCoverageEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    GLenum __cdecl glwrap_glCheckNamedFramebufferStatusEXT(GLuint framebuffer, GLenum target)
    {
    
    GLenum ret = glad_glCheckNamedFramebufferStatusEXT(framebuffer,target);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glCheckNamedFramebufferStatusEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	return ret;
    }

    void __cdecl glwrap_glNamedFramebufferTexture1DEXT(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
    {
    
    glad_glNamedFramebufferTexture1DEXT(framebuffer,attachment,textarget,texture,level);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glNamedFramebufferTexture1DEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glNamedFramebufferTexture2DEXT(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
    {
    
    glad_glNamedFramebufferTexture2DEXT(framebuffer,attachment,textarget,texture,level);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glNamedFramebufferTexture2DEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glNamedFramebufferTexture3DEXT(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset)
    {
    
    glad_glNamedFramebufferTexture3DEXT(framebuffer,attachment,textarget,texture,level,zoffset);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glNamedFramebufferTexture3DEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glNamedFramebufferRenderbufferEXT(GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)
    {
    
    glad_glNamedFramebufferRenderbufferEXT(framebuffer,attachment,renderbuffertarget,renderbuffer);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glNamedFramebufferRenderbufferEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetNamedFramebufferAttachmentParameterivEXT(GLuint framebuffer, GLenum attachment, GLenum pname, GLint* params)
    {
    
    glad_glGetNamedFramebufferAttachmentParameterivEXT(framebuffer,attachment,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetNamedFramebufferAttachmentParameterivEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGenerateTextureMipmapEXT(GLuint texture, GLenum target)
    {
    
    glad_glGenerateTextureMipmapEXT(texture,target);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGenerateTextureMipmapEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGenerateMultiTexMipmapEXT(GLenum texunit, GLenum target)
    {
    
    glad_glGenerateMultiTexMipmapEXT(texunit,target);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGenerateMultiTexMipmapEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glFramebufferDrawBufferEXT(GLuint framebuffer, GLenum mode)
    {
    
    glad_glFramebufferDrawBufferEXT(framebuffer,mode);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glFramebufferDrawBufferEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glFramebufferDrawBuffersEXT(GLuint framebuffer, GLsizei n, const GLenum* bufs)
    {
    
    glad_glFramebufferDrawBuffersEXT(framebuffer,n,bufs);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glFramebufferDrawBuffersEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glFramebufferReadBufferEXT(GLuint framebuffer, GLenum mode)
    {
    
    glad_glFramebufferReadBufferEXT(framebuffer,mode);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glFramebufferReadBufferEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetFramebufferParameterivEXT(GLuint framebuffer, GLenum pname, GLint* params)
    {
    
    glad_glGetFramebufferParameterivEXT(framebuffer,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetFramebufferParameterivEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glNamedCopyBufferSubDataEXT(GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size)
    {
    
    glad_glNamedCopyBufferSubDataEXT(readBuffer,writeBuffer,readOffset,writeOffset,size);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glNamedCopyBufferSubDataEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glNamedFramebufferTextureEXT(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level)
    {
    
    glad_glNamedFramebufferTextureEXT(framebuffer,attachment,texture,level);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glNamedFramebufferTextureEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glNamedFramebufferTextureLayerEXT(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer)
    {
    
    glad_glNamedFramebufferTextureLayerEXT(framebuffer,attachment,texture,level,layer);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glNamedFramebufferTextureLayerEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glNamedFramebufferTextureFaceEXT(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLenum face)
    {
    
    glad_glNamedFramebufferTextureFaceEXT(framebuffer,attachment,texture,level,face);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glNamedFramebufferTextureFaceEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTextureRenderbufferEXT(GLuint texture, GLenum target, GLuint renderbuffer)
    {
    
    glad_glTextureRenderbufferEXT(texture,target,renderbuffer);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTextureRenderbufferEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMultiTexRenderbufferEXT(GLenum texunit, GLenum target, GLuint renderbuffer)
    {
    
    glad_glMultiTexRenderbufferEXT(texunit,target,renderbuffer);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMultiTexRenderbufferEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexArrayVertexOffsetEXT(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset)
    {
    
    glad_glVertexArrayVertexOffsetEXT(vaobj,buffer,size,type,stride,offset);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexArrayVertexOffsetEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexArrayColorOffsetEXT(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset)
    {
    
    glad_glVertexArrayColorOffsetEXT(vaobj,buffer,size,type,stride,offset);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexArrayColorOffsetEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexArrayEdgeFlagOffsetEXT(GLuint vaobj, GLuint buffer, GLsizei stride, GLintptr offset)
    {
    
    glad_glVertexArrayEdgeFlagOffsetEXT(vaobj,buffer,stride,offset);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexArrayEdgeFlagOffsetEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexArrayIndexOffsetEXT(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset)
    {
    
    glad_glVertexArrayIndexOffsetEXT(vaobj,buffer,type,stride,offset);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexArrayIndexOffsetEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexArrayNormalOffsetEXT(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset)
    {
    
    glad_glVertexArrayNormalOffsetEXT(vaobj,buffer,type,stride,offset);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexArrayNormalOffsetEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexArrayTexCoordOffsetEXT(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset)
    {
    
    glad_glVertexArrayTexCoordOffsetEXT(vaobj,buffer,size,type,stride,offset);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexArrayTexCoordOffsetEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexArrayMultiTexCoordOffsetEXT(GLuint vaobj, GLuint buffer, GLenum texunit, GLint size, GLenum type, GLsizei stride, GLintptr offset)
    {
    
    glad_glVertexArrayMultiTexCoordOffsetEXT(vaobj,buffer,texunit,size,type,stride,offset);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexArrayMultiTexCoordOffsetEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexArrayFogCoordOffsetEXT(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset)
    {
    
    glad_glVertexArrayFogCoordOffsetEXT(vaobj,buffer,type,stride,offset);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexArrayFogCoordOffsetEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexArraySecondaryColorOffsetEXT(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset)
    {
    
    glad_glVertexArraySecondaryColorOffsetEXT(vaobj,buffer,size,type,stride,offset);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexArraySecondaryColorOffsetEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexArrayVertexAttribOffsetEXT(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLintptr offset)
    {
    
    glad_glVertexArrayVertexAttribOffsetEXT(vaobj,buffer,index,size,type,normalized,stride,offset);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexArrayVertexAttribOffsetEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexArrayVertexAttribIOffsetEXT(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset)
    {
    
    glad_glVertexArrayVertexAttribIOffsetEXT(vaobj,buffer,index,size,type,stride,offset);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexArrayVertexAttribIOffsetEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glEnableVertexArrayEXT(GLuint vaobj, GLenum array)
    {
    
    glad_glEnableVertexArrayEXT(vaobj,array);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glEnableVertexArrayEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glDisableVertexArrayEXT(GLuint vaobj, GLenum array)
    {
    
    glad_glDisableVertexArrayEXT(vaobj,array);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glDisableVertexArrayEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glEnableVertexArrayAttribEXT(GLuint vaobj, GLuint index)
    {
    
    glad_glEnableVertexArrayAttribEXT(vaobj,index);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glEnableVertexArrayAttribEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glDisableVertexArrayAttribEXT(GLuint vaobj, GLuint index)
    {
    
    glad_glDisableVertexArrayAttribEXT(vaobj,index);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glDisableVertexArrayAttribEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetVertexArrayIntegervEXT(GLuint vaobj, GLenum pname, GLint* param)
    {
    
    glad_glGetVertexArrayIntegervEXT(vaobj,pname,param);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetVertexArrayIntegervEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetVertexArrayPointervEXT(GLuint vaobj, GLenum pname, void** param)
    {
    
    glad_glGetVertexArrayPointervEXT(vaobj,pname,param);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetVertexArrayPointervEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetVertexArrayIntegeri_vEXT(GLuint vaobj, GLuint index, GLenum pname, GLint* param)
    {
    
    glad_glGetVertexArrayIntegeri_vEXT(vaobj,index,pname,param);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetVertexArrayIntegeri_vEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetVertexArrayPointeri_vEXT(GLuint vaobj, GLuint index, GLenum pname, void** param)
    {
    
    glad_glGetVertexArrayPointeri_vEXT(vaobj,index,pname,param);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetVertexArrayPointeri_vEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void * __cdecl glwrap_glMapNamedBufferRangeEXT(GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access)
    {
    
    void * ret = glad_glMapNamedBufferRangeEXT(buffer,offset,length,access);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMapNamedBufferRangeEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	return ret;
    }

    void __cdecl glwrap_glFlushMappedNamedBufferRangeEXT(GLuint buffer, GLintptr offset, GLsizeiptr length)
    {
    
    glad_glFlushMappedNamedBufferRangeEXT(buffer,offset,length);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glFlushMappedNamedBufferRangeEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glNamedBufferStorageEXT(GLuint buffer, GLsizeiptr size, const void* data, GLbitfield flags)
    {
    
    glad_glNamedBufferStorageEXT(buffer,size,data,flags);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glNamedBufferStorageEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glClearNamedBufferDataEXT(GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void* data)
    {
    
    glad_glClearNamedBufferDataEXT(buffer,internalformat,format,type,data);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glClearNamedBufferDataEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glClearNamedBufferSubDataEXT(GLuint buffer, GLenum internalformat, GLsizeiptr offset, GLsizeiptr size, GLenum format, GLenum type, const void* data)
    {
    
    glad_glClearNamedBufferSubDataEXT(buffer,internalformat,offset,size,format,type,data);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glClearNamedBufferSubDataEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glNamedFramebufferParameteriEXT(GLuint framebuffer, GLenum pname, GLint param)
    {
    
    glad_glNamedFramebufferParameteriEXT(framebuffer,pname,param);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glNamedFramebufferParameteriEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetNamedFramebufferParameterivEXT(GLuint framebuffer, GLenum pname, GLint* params)
    {
    
    glad_glGetNamedFramebufferParameterivEXT(framebuffer,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetNamedFramebufferParameterivEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramUniform1dEXT(GLuint program, GLint location, GLdouble x)
    {
    
    glad_glProgramUniform1dEXT(program,location,x);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramUniform1dEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramUniform2dEXT(GLuint program, GLint location, GLdouble x, GLdouble y)
    {
    
    glad_glProgramUniform2dEXT(program,location,x,y);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramUniform2dEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramUniform3dEXT(GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z)
    {
    
    glad_glProgramUniform3dEXT(program,location,x,y,z);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramUniform3dEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramUniform4dEXT(GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
    {
    
    glad_glProgramUniform4dEXT(program,location,x,y,z,w);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramUniform4dEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramUniform1dvEXT(GLuint program, GLint location, GLsizei count, const GLdouble* value)
    {
    
    glad_glProgramUniform1dvEXT(program,location,count,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramUniform1dvEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramUniform2dvEXT(GLuint program, GLint location, GLsizei count, const GLdouble* value)
    {
    
    glad_glProgramUniform2dvEXT(program,location,count,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramUniform2dvEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramUniform3dvEXT(GLuint program, GLint location, GLsizei count, const GLdouble* value)
    {
    
    glad_glProgramUniform3dvEXT(program,location,count,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramUniform3dvEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramUniform4dvEXT(GLuint program, GLint location, GLsizei count, const GLdouble* value)
    {
    
    glad_glProgramUniform4dvEXT(program,location,count,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramUniform4dvEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramUniformMatrix2dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value)
    {
    
    glad_glProgramUniformMatrix2dvEXT(program,location,count,transpose,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramUniformMatrix2dvEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramUniformMatrix3dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value)
    {
    
    glad_glProgramUniformMatrix3dvEXT(program,location,count,transpose,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramUniformMatrix3dvEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramUniformMatrix4dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value)
    {
    
    glad_glProgramUniformMatrix4dvEXT(program,location,count,transpose,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramUniformMatrix4dvEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramUniformMatrix2x3dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value)
    {
    
    glad_glProgramUniformMatrix2x3dvEXT(program,location,count,transpose,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramUniformMatrix2x3dvEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramUniformMatrix2x4dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value)
    {
    
    glad_glProgramUniformMatrix2x4dvEXT(program,location,count,transpose,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramUniformMatrix2x4dvEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramUniformMatrix3x2dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value)
    {
    
    glad_glProgramUniformMatrix3x2dvEXT(program,location,count,transpose,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramUniformMatrix3x2dvEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramUniformMatrix3x4dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value)
    {
    
    glad_glProgramUniformMatrix3x4dvEXT(program,location,count,transpose,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramUniformMatrix3x4dvEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramUniformMatrix4x2dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value)
    {
    
    glad_glProgramUniformMatrix4x2dvEXT(program,location,count,transpose,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramUniformMatrix4x2dvEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramUniformMatrix4x3dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value)
    {
    
    glad_glProgramUniformMatrix4x3dvEXT(program,location,count,transpose,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramUniformMatrix4x3dvEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTextureBufferRangeEXT(GLuint texture, GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size)
    {
    
    glad_glTextureBufferRangeEXT(texture,target,internalformat,buffer,offset,size);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTextureBufferRangeEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTextureStorage1DEXT(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width)
    {
    
    glad_glTextureStorage1DEXT(texture,target,levels,internalformat,width);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTextureStorage1DEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTextureStorage2DEXT(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height)
    {
    
    glad_glTextureStorage2DEXT(texture,target,levels,internalformat,width,height);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTextureStorage2DEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTextureStorage3DEXT(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth)
    {
    
    glad_glTextureStorage3DEXT(texture,target,levels,internalformat,width,height,depth);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTextureStorage3DEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTextureStorage2DMultisampleEXT(GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations)
    {
    
    glad_glTextureStorage2DMultisampleEXT(texture,target,samples,internalformat,width,height,fixedsamplelocations);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTextureStorage2DMultisampleEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTextureStorage3DMultisampleEXT(GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations)
    {
    
    glad_glTextureStorage3DMultisampleEXT(texture,target,samples,internalformat,width,height,depth,fixedsamplelocations);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTextureStorage3DMultisampleEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexArrayBindVertexBufferEXT(GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride)
    {
    
    glad_glVertexArrayBindVertexBufferEXT(vaobj,bindingindex,buffer,offset,stride);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexArrayBindVertexBufferEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexArrayVertexAttribFormatEXT(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset)
    {
    
    glad_glVertexArrayVertexAttribFormatEXT(vaobj,attribindex,size,type,normalized,relativeoffset);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexArrayVertexAttribFormatEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexArrayVertexAttribIFormatEXT(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)
    {
    
    glad_glVertexArrayVertexAttribIFormatEXT(vaobj,attribindex,size,type,relativeoffset);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexArrayVertexAttribIFormatEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexArrayVertexAttribLFormatEXT(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)
    {
    
    glad_glVertexArrayVertexAttribLFormatEXT(vaobj,attribindex,size,type,relativeoffset);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexArrayVertexAttribLFormatEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexArrayVertexAttribBindingEXT(GLuint vaobj, GLuint attribindex, GLuint bindingindex)
    {
    
    glad_glVertexArrayVertexAttribBindingEXT(vaobj,attribindex,bindingindex);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexArrayVertexAttribBindingEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexArrayVertexBindingDivisorEXT(GLuint vaobj, GLuint bindingindex, GLuint divisor)
    {
    
    glad_glVertexArrayVertexBindingDivisorEXT(vaobj,bindingindex,divisor);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexArrayVertexBindingDivisorEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexArrayVertexAttribLOffsetEXT(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset)
    {
    
    glad_glVertexArrayVertexAttribLOffsetEXT(vaobj,buffer,index,size,type,stride,offset);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexArrayVertexAttribLOffsetEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTexturePageCommitmentEXT(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit)
    {
    
    glad_glTexturePageCommitmentEXT(texture,level,xoffset,yoffset,zoffset,width,height,depth,commit);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTexturePageCommitmentEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexArrayVertexAttribDivisorEXT(GLuint vaobj, GLuint index, GLuint divisor)
    {
    
    glad_glVertexArrayVertexAttribDivisorEXT(vaobj,index,divisor);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexArrayVertexAttribDivisorEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glColorMaskIndexedEXT(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a)
    {
    
    glad_glColorMaskIndexedEXT(index,r,g,b,a);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glColorMaskIndexedEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glDrawArraysInstancedEXT(GLenum mode, GLint start, GLsizei count, GLsizei primcount)
    {
    
    glad_glDrawArraysInstancedEXT(mode,start,count,primcount);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glDrawArraysInstancedEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glDrawElementsInstancedEXT(GLenum mode, GLsizei count, GLenum type, const void* indices, GLsizei primcount)
    {
    
    glad_glDrawElementsInstancedEXT(mode,count,type,indices,primcount);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glDrawElementsInstancedEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glDrawRangeElementsEXT(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void* indices)
    {
    
    glad_glDrawRangeElementsEXT(mode,start,end,count,type,indices);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glDrawRangeElementsEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glBufferStorageExternalEXT(GLenum target, GLintptr offset, GLsizeiptr size, GLeglClientBufferEXT clientBuffer, GLbitfield flags)
    {
    
    glad_glBufferStorageExternalEXT(target,offset,size,clientBuffer,flags);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glBufferStorageExternalEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glNamedBufferStorageExternalEXT(GLuint buffer, GLintptr offset, GLsizeiptr size, GLeglClientBufferEXT clientBuffer, GLbitfield flags)
    {
    
    glad_glNamedBufferStorageExternalEXT(buffer,offset,size,clientBuffer,flags);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glNamedBufferStorageExternalEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glFogCoordfEXT(GLfloat coord)
    {
    
    glad_glFogCoordfEXT(coord);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glFogCoordfEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glFogCoordfvEXT(const GLfloat* coord)
    {
    
    glad_glFogCoordfvEXT(coord);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glFogCoordfvEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glFogCoorddEXT(GLdouble coord)
    {
    
    glad_glFogCoorddEXT(coord);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glFogCoorddEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glFogCoorddvEXT(const GLdouble* coord)
    {
    
    glad_glFogCoorddvEXT(coord);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glFogCoorddvEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glFogCoordPointerEXT(GLenum type, GLsizei stride, const void* pointer)
    {
    
    glad_glFogCoordPointerEXT(type,stride,pointer);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glFogCoordPointerEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glBlitFramebufferEXT(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)
    {
    
    glad_glBlitFramebufferEXT(srcX0,srcY0,srcX1,srcY1,dstX0,dstY0,dstX1,dstY1,mask,filter);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glBlitFramebufferEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glRenderbufferStorageMultisampleEXT(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
    {
    
    glad_glRenderbufferStorageMultisampleEXT(target,samples,internalformat,width,height);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glRenderbufferStorageMultisampleEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    GLboolean __cdecl glwrap_glIsRenderbufferEXT(GLuint renderbuffer)
    {
    
    GLboolean ret = glad_glIsRenderbufferEXT(renderbuffer);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glIsRenderbufferEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	return ret;
    }

    void __cdecl glwrap_glBindRenderbufferEXT(GLenum target, GLuint renderbuffer)
    {
    
    glad_glBindRenderbufferEXT(target,renderbuffer);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glBindRenderbufferEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glDeleteRenderbuffersEXT(GLsizei n, const GLuint* renderbuffers)
    {
    
    glad_glDeleteRenderbuffersEXT(n,renderbuffers);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glDeleteRenderbuffersEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGenRenderbuffersEXT(GLsizei n, GLuint* renderbuffers)
    {
    
    glad_glGenRenderbuffersEXT(n,renderbuffers);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGenRenderbuffersEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glRenderbufferStorageEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height)
    {
    
    glad_glRenderbufferStorageEXT(target,internalformat,width,height);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glRenderbufferStorageEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetRenderbufferParameterivEXT(GLenum target, GLenum pname, GLint* params)
    {
    
    glad_glGetRenderbufferParameterivEXT(target,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetRenderbufferParameterivEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    GLboolean __cdecl glwrap_glIsFramebufferEXT(GLuint framebuffer)
    {
    
    GLboolean ret = glad_glIsFramebufferEXT(framebuffer);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glIsFramebufferEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	return ret;
    }

    void __cdecl glwrap_glBindFramebufferEXT(GLenum target, GLuint framebuffer)
    {
    
    glad_glBindFramebufferEXT(target,framebuffer);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glBindFramebufferEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glDeleteFramebuffersEXT(GLsizei n, const GLuint* framebuffers)
    {
    
    glad_glDeleteFramebuffersEXT(n,framebuffers);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glDeleteFramebuffersEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGenFramebuffersEXT(GLsizei n, GLuint* framebuffers)
    {
    
    glad_glGenFramebuffersEXT(n,framebuffers);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGenFramebuffersEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    GLenum __cdecl glwrap_glCheckFramebufferStatusEXT(GLenum target)
    {
    
    GLenum ret = glad_glCheckFramebufferStatusEXT(target);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glCheckFramebufferStatusEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	return ret;
    }

    void __cdecl glwrap_glFramebufferTexture1DEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
    {
    
    glad_glFramebufferTexture1DEXT(target,attachment,textarget,texture,level);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glFramebufferTexture1DEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glFramebufferTexture2DEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
    {
    
    glad_glFramebufferTexture2DEXT(target,attachment,textarget,texture,level);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glFramebufferTexture2DEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glFramebufferTexture3DEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset)
    {
    
    glad_glFramebufferTexture3DEXT(target,attachment,textarget,texture,level,zoffset);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glFramebufferTexture3DEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glFramebufferRenderbufferEXT(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)
    {
    
    glad_glFramebufferRenderbufferEXT(target,attachment,renderbuffertarget,renderbuffer);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glFramebufferRenderbufferEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetFramebufferAttachmentParameterivEXT(GLenum target, GLenum attachment, GLenum pname, GLint* params)
    {
    
    glad_glGetFramebufferAttachmentParameterivEXT(target,attachment,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetFramebufferAttachmentParameterivEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGenerateMipmapEXT(GLenum target)
    {
    
    glad_glGenerateMipmapEXT(target);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGenerateMipmapEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramParameteriEXT(GLuint program, GLenum pname, GLint value)
    {
    
    glad_glProgramParameteriEXT(program,pname,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramParameteriEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramEnvParameters4fvEXT(GLenum target, GLuint index, GLsizei count, const GLfloat* params)
    {
    
    glad_glProgramEnvParameters4fvEXT(target,index,count,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramEnvParameters4fvEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramLocalParameters4fvEXT(GLenum target, GLuint index, GLsizei count, const GLfloat* params)
    {
    
    glad_glProgramLocalParameters4fvEXT(target,index,count,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramLocalParameters4fvEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetUniformuivEXT(GLuint program, GLint location, GLuint* params)
    {
    
    glad_glGetUniformuivEXT(program,location,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetUniformuivEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glBindFragDataLocationEXT(GLuint program, GLuint color, const GLchar* name)
    {
    
    glad_glBindFragDataLocationEXT(program,color,name);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glBindFragDataLocationEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    GLint __cdecl glwrap_glGetFragDataLocationEXT(GLuint program, const GLchar* name)
    {
    
    GLint ret = glad_glGetFragDataLocationEXT(program,name);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetFragDataLocationEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	return ret;
    }

    void __cdecl glwrap_glUniform1uiEXT(GLint location, GLuint v0)
    {
    
    glad_glUniform1uiEXT(location,v0);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glUniform1uiEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glUniform2uiEXT(GLint location, GLuint v0, GLuint v1)
    {
    
    glad_glUniform2uiEXT(location,v0,v1);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glUniform2uiEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glUniform3uiEXT(GLint location, GLuint v0, GLuint v1, GLuint v2)
    {
    
    glad_glUniform3uiEXT(location,v0,v1,v2);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glUniform3uiEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glUniform4uiEXT(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3)
    {
    
    glad_glUniform4uiEXT(location,v0,v1,v2,v3);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glUniform4uiEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glUniform1uivEXT(GLint location, GLsizei count, const GLuint* value)
    {
    
    glad_glUniform1uivEXT(location,count,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glUniform1uivEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glUniform2uivEXT(GLint location, GLsizei count, const GLuint* value)
    {
    
    glad_glUniform2uivEXT(location,count,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glUniform2uivEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glUniform3uivEXT(GLint location, GLsizei count, const GLuint* value)
    {
    
    glad_glUniform3uivEXT(location,count,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glUniform3uivEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glUniform4uivEXT(GLint location, GLsizei count, const GLuint* value)
    {
    
    glad_glUniform4uivEXT(location,count,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glUniform4uivEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetHistogramEXT(GLenum target, GLboolean reset, GLenum format, GLenum type, void* values)
    {
    
    glad_glGetHistogramEXT(target,reset,format,type,values);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetHistogramEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetHistogramParameterfvEXT(GLenum target, GLenum pname, GLfloat* params)
    {
    
    glad_glGetHistogramParameterfvEXT(target,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetHistogramParameterfvEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetHistogramParameterivEXT(GLenum target, GLenum pname, GLint* params)
    {
    
    glad_glGetHistogramParameterivEXT(target,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetHistogramParameterivEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetMinmaxEXT(GLenum target, GLboolean reset, GLenum format, GLenum type, void* values)
    {
    
    glad_glGetMinmaxEXT(target,reset,format,type,values);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetMinmaxEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetMinmaxParameterfvEXT(GLenum target, GLenum pname, GLfloat* params)
    {
    
    glad_glGetMinmaxParameterfvEXT(target,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetMinmaxParameterfvEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetMinmaxParameterivEXT(GLenum target, GLenum pname, GLint* params)
    {
    
    glad_glGetMinmaxParameterivEXT(target,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetMinmaxParameterivEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glHistogramEXT(GLenum target, GLsizei width, GLenum internalformat, GLboolean sink)
    {
    
    glad_glHistogramEXT(target,width,internalformat,sink);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glHistogramEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMinmaxEXT(GLenum target, GLenum internalformat, GLboolean sink)
    {
    
    glad_glMinmaxEXT(target,internalformat,sink);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMinmaxEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glResetHistogramEXT(GLenum target)
    {
    
    glad_glResetHistogramEXT(target);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glResetHistogramEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glResetMinmaxEXT(GLenum target)
    {
    
    glad_glResetMinmaxEXT(target);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glResetMinmaxEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glIndexFuncEXT(GLenum func, GLclampf ref)
    {
    
    glad_glIndexFuncEXT(func,ref);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glIndexFuncEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glIndexMaterialEXT(GLenum face, GLenum mode)
    {
    
    glad_glIndexMaterialEXT(face,mode);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glIndexMaterialEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glApplyTextureEXT(GLenum mode)
    {
    
    glad_glApplyTextureEXT(mode);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glApplyTextureEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTextureLightEXT(GLenum pname)
    {
    
    glad_glTextureLightEXT(pname);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTextureLightEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTextureMaterialEXT(GLenum face, GLenum mode)
    {
    
    glad_glTextureMaterialEXT(face,mode);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTextureMaterialEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetUnsignedBytevEXT(GLenum pname, GLubyte* data)
    {
    
    glad_glGetUnsignedBytevEXT(pname,data);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetUnsignedBytevEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetUnsignedBytei_vEXT(GLenum target, GLuint index, GLubyte* data)
    {
    
    glad_glGetUnsignedBytei_vEXT(target,index,data);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetUnsignedBytei_vEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glDeleteMemoryObjectsEXT(GLsizei n, const GLuint* memoryObjects)
    {
    
    glad_glDeleteMemoryObjectsEXT(n,memoryObjects);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glDeleteMemoryObjectsEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    GLboolean __cdecl glwrap_glIsMemoryObjectEXT(GLuint memoryObject)
    {
    
    GLboolean ret = glad_glIsMemoryObjectEXT(memoryObject);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glIsMemoryObjectEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	return ret;
    }

    void __cdecl glwrap_glCreateMemoryObjectsEXT(GLsizei n, GLuint* memoryObjects)
    {
    
    glad_glCreateMemoryObjectsEXT(n,memoryObjects);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glCreateMemoryObjectsEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMemoryObjectParameterivEXT(GLuint memoryObject, GLenum pname, const GLint* params)
    {
    
    glad_glMemoryObjectParameterivEXT(memoryObject,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMemoryObjectParameterivEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetMemoryObjectParameterivEXT(GLuint memoryObject, GLenum pname, GLint* params)
    {
    
    glad_glGetMemoryObjectParameterivEXT(memoryObject,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetMemoryObjectParameterivEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTexStorageMem2DEXT(GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLuint memory, GLuint64 offset)
    {
    
    glad_glTexStorageMem2DEXT(target,levels,internalFormat,width,height,memory,offset);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTexStorageMem2DEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTexStorageMem2DMultisampleEXT(GLenum target, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset)
    {
    
    glad_glTexStorageMem2DMultisampleEXT(target,samples,internalFormat,width,height,fixedSampleLocations,memory,offset);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTexStorageMem2DMultisampleEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTexStorageMem3DEXT(GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLuint memory, GLuint64 offset)
    {
    
    glad_glTexStorageMem3DEXT(target,levels,internalFormat,width,height,depth,memory,offset);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTexStorageMem3DEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTexStorageMem3DMultisampleEXT(GLenum target, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset)
    {
    
    glad_glTexStorageMem3DMultisampleEXT(target,samples,internalFormat,width,height,depth,fixedSampleLocations,memory,offset);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTexStorageMem3DMultisampleEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glBufferStorageMemEXT(GLenum target, GLsizeiptr size, GLuint memory, GLuint64 offset)
    {
    
    glad_glBufferStorageMemEXT(target,size,memory,offset);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glBufferStorageMemEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTextureStorageMem2DEXT(GLuint texture, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLuint memory, GLuint64 offset)
    {
    
    glad_glTextureStorageMem2DEXT(texture,levels,internalFormat,width,height,memory,offset);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTextureStorageMem2DEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTextureStorageMem2DMultisampleEXT(GLuint texture, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset)
    {
    
    glad_glTextureStorageMem2DMultisampleEXT(texture,samples,internalFormat,width,height,fixedSampleLocations,memory,offset);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTextureStorageMem2DMultisampleEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTextureStorageMem3DEXT(GLuint texture, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLuint memory, GLuint64 offset)
    {
    
    glad_glTextureStorageMem3DEXT(texture,levels,internalFormat,width,height,depth,memory,offset);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTextureStorageMem3DEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTextureStorageMem3DMultisampleEXT(GLuint texture, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset)
    {
    
    glad_glTextureStorageMem3DMultisampleEXT(texture,samples,internalFormat,width,height,depth,fixedSampleLocations,memory,offset);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTextureStorageMem3DMultisampleEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glNamedBufferStorageMemEXT(GLuint buffer, GLsizeiptr size, GLuint memory, GLuint64 offset)
    {
    
    glad_glNamedBufferStorageMemEXT(buffer,size,memory,offset);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glNamedBufferStorageMemEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTexStorageMem1DEXT(GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLuint memory, GLuint64 offset)
    {
    
    glad_glTexStorageMem1DEXT(target,levels,internalFormat,width,memory,offset);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTexStorageMem1DEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTextureStorageMem1DEXT(GLuint texture, GLsizei levels, GLenum internalFormat, GLsizei width, GLuint memory, GLuint64 offset)
    {
    
    glad_glTextureStorageMem1DEXT(texture,levels,internalFormat,width,memory,offset);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTextureStorageMem1DEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glImportMemoryFdEXT(GLuint memory, GLuint64 size, GLenum handleType, GLint fd)
    {
    
    glad_glImportMemoryFdEXT(memory,size,handleType,fd);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glImportMemoryFdEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glImportMemoryWin32HandleEXT(GLuint memory, GLuint64 size, GLenum handleType, void* handle)
    {
    
    glad_glImportMemoryWin32HandleEXT(memory,size,handleType,handle);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glImportMemoryWin32HandleEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glImportMemoryWin32NameEXT(GLuint memory, GLuint64 size, GLenum handleType, const void* name)
    {
    
    glad_glImportMemoryWin32NameEXT(memory,size,handleType,name);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glImportMemoryWin32NameEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMultiDrawArraysEXT(GLenum mode, const GLint* first, const GLsizei* count, GLsizei primcount)
    {
    
    glad_glMultiDrawArraysEXT(mode,first,count,primcount);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMultiDrawArraysEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMultiDrawElementsEXT(GLenum mode, const GLsizei* count, GLenum type, const void** constindices, GLsizei primcount)
    {
    
    glad_glMultiDrawElementsEXT(mode,count,type,constindices,primcount);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMultiDrawElementsEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glSampleMaskEXT(GLclampf value, GLboolean invert)
    {
    
    glad_glSampleMaskEXT(value,invert);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glSampleMaskEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glSamplePatternEXT(GLenum pattern)
    {
    
    glad_glSamplePatternEXT(pattern);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glSamplePatternEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glColorTableEXT(GLenum target, GLenum internalFormat, GLsizei width, GLenum format, GLenum type, const void* table)
    {
    
    glad_glColorTableEXT(target,internalFormat,width,format,type,table);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glColorTableEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetColorTableEXT(GLenum target, GLenum format, GLenum type, void* data)
    {
    
    glad_glGetColorTableEXT(target,format,type,data);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetColorTableEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetColorTableParameterivEXT(GLenum target, GLenum pname, GLint* params)
    {
    
    glad_glGetColorTableParameterivEXT(target,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetColorTableParameterivEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetColorTableParameterfvEXT(GLenum target, GLenum pname, GLfloat* params)
    {
    
    glad_glGetColorTableParameterfvEXT(target,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetColorTableParameterfvEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glPixelTransformParameteriEXT(GLenum target, GLenum pname, GLint param)
    {
    
    glad_glPixelTransformParameteriEXT(target,pname,param);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glPixelTransformParameteriEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glPixelTransformParameterfEXT(GLenum target, GLenum pname, GLfloat param)
    {
    
    glad_glPixelTransformParameterfEXT(target,pname,param);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glPixelTransformParameterfEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glPixelTransformParameterivEXT(GLenum target, GLenum pname, const GLint* params)
    {
    
    glad_glPixelTransformParameterivEXT(target,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glPixelTransformParameterivEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glPixelTransformParameterfvEXT(GLenum target, GLenum pname, const GLfloat* params)
    {
    
    glad_glPixelTransformParameterfvEXT(target,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glPixelTransformParameterfvEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetPixelTransformParameterivEXT(GLenum target, GLenum pname, GLint* params)
    {
    
    glad_glGetPixelTransformParameterivEXT(target,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetPixelTransformParameterivEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetPixelTransformParameterfvEXT(GLenum target, GLenum pname, GLfloat* params)
    {
    
    glad_glGetPixelTransformParameterfvEXT(target,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetPixelTransformParameterfvEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glPointParameterfEXT(GLenum pname, GLfloat param)
    {
    
    glad_glPointParameterfEXT(pname,param);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glPointParameterfEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glPointParameterfvEXT(GLenum pname, const GLfloat* params)
    {
    
    glad_glPointParameterfvEXT(pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glPointParameterfvEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glPolygonOffsetEXT(GLfloat factor, GLfloat bias)
    {
    
    glad_glPolygonOffsetEXT(factor,bias);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glPolygonOffsetEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glPolygonOffsetClampEXT(GLfloat factor, GLfloat units, GLfloat clamp)
    {
    
    glad_glPolygonOffsetClampEXT(factor,units,clamp);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glPolygonOffsetClampEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProvokingVertexEXT(GLenum mode)
    {
    
    glad_glProvokingVertexEXT(mode);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProvokingVertexEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glRasterSamplesEXT(GLuint samples, GLboolean fixedsamplelocations)
    {
    
    glad_glRasterSamplesEXT(samples,fixedsamplelocations);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glRasterSamplesEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glSecondaryColor3bEXT(GLbyte red, GLbyte green, GLbyte blue)
    {
    
    glad_glSecondaryColor3bEXT(red,green,blue);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glSecondaryColor3bEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glSecondaryColor3bvEXT(const GLbyte* v)
    {
    
    glad_glSecondaryColor3bvEXT(v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glSecondaryColor3bvEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glSecondaryColor3dEXT(GLdouble red, GLdouble green, GLdouble blue)
    {
    
    glad_glSecondaryColor3dEXT(red,green,blue);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glSecondaryColor3dEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glSecondaryColor3dvEXT(const GLdouble* v)
    {
    
    glad_glSecondaryColor3dvEXT(v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glSecondaryColor3dvEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glSecondaryColor3fEXT(GLfloat red, GLfloat green, GLfloat blue)
    {
    
    glad_glSecondaryColor3fEXT(red,green,blue);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glSecondaryColor3fEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glSecondaryColor3fvEXT(const GLfloat* v)
    {
    
    glad_glSecondaryColor3fvEXT(v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glSecondaryColor3fvEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glSecondaryColor3iEXT(GLint red, GLint green, GLint blue)
    {
    
    glad_glSecondaryColor3iEXT(red,green,blue);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glSecondaryColor3iEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glSecondaryColor3ivEXT(const GLint* v)
    {
    
    glad_glSecondaryColor3ivEXT(v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glSecondaryColor3ivEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glSecondaryColor3sEXT(GLshort red, GLshort green, GLshort blue)
    {
    
    glad_glSecondaryColor3sEXT(red,green,blue);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glSecondaryColor3sEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glSecondaryColor3svEXT(const GLshort* v)
    {
    
    glad_glSecondaryColor3svEXT(v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glSecondaryColor3svEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glSecondaryColor3ubEXT(GLubyte red, GLubyte green, GLubyte blue)
    {
    
    glad_glSecondaryColor3ubEXT(red,green,blue);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glSecondaryColor3ubEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glSecondaryColor3ubvEXT(const GLubyte* v)
    {
    
    glad_glSecondaryColor3ubvEXT(v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glSecondaryColor3ubvEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glSecondaryColor3uiEXT(GLuint red, GLuint green, GLuint blue)
    {
    
    glad_glSecondaryColor3uiEXT(red,green,blue);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glSecondaryColor3uiEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glSecondaryColor3uivEXT(const GLuint* v)
    {
    
    glad_glSecondaryColor3uivEXT(v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glSecondaryColor3uivEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glSecondaryColor3usEXT(GLushort red, GLushort green, GLushort blue)
    {
    
    glad_glSecondaryColor3usEXT(red,green,blue);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glSecondaryColor3usEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glSecondaryColor3usvEXT(const GLushort* v)
    {
    
    glad_glSecondaryColor3usvEXT(v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glSecondaryColor3usvEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glSecondaryColorPointerEXT(GLint size, GLenum type, GLsizei stride, const void* pointer)
    {
    
    glad_glSecondaryColorPointerEXT(size,type,stride,pointer);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glSecondaryColorPointerEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGenSemaphoresEXT(GLsizei n, GLuint* semaphores)
    {
    
    glad_glGenSemaphoresEXT(n,semaphores);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGenSemaphoresEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glDeleteSemaphoresEXT(GLsizei n, const GLuint* semaphores)
    {
    
    glad_glDeleteSemaphoresEXT(n,semaphores);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glDeleteSemaphoresEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    GLboolean __cdecl glwrap_glIsSemaphoreEXT(GLuint semaphore)
    {
    
    GLboolean ret = glad_glIsSemaphoreEXT(semaphore);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glIsSemaphoreEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	return ret;
    }

    void __cdecl glwrap_glSemaphoreParameterui64vEXT(GLuint semaphore, GLenum pname, const GLuint64* params)
    {
    
    glad_glSemaphoreParameterui64vEXT(semaphore,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glSemaphoreParameterui64vEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetSemaphoreParameterui64vEXT(GLuint semaphore, GLenum pname, GLuint64* params)
    {
    
    glad_glGetSemaphoreParameterui64vEXT(semaphore,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetSemaphoreParameterui64vEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glWaitSemaphoreEXT(GLuint semaphore, GLuint numBufferBarriers, const GLuint* buffers, GLuint numTextureBarriers, const GLuint* textures, const GLenum* srcLayouts)
    {
    
    glad_glWaitSemaphoreEXT(semaphore,numBufferBarriers,buffers,numTextureBarriers,textures,srcLayouts);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glWaitSemaphoreEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glSignalSemaphoreEXT(GLuint semaphore, GLuint numBufferBarriers, const GLuint* buffers, GLuint numTextureBarriers, const GLuint* textures, const GLenum* dstLayouts)
    {
    
    glad_glSignalSemaphoreEXT(semaphore,numBufferBarriers,buffers,numTextureBarriers,textures,dstLayouts);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glSignalSemaphoreEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glImportSemaphoreFdEXT(GLuint semaphore, GLenum handleType, GLint fd)
    {
    
    glad_glImportSemaphoreFdEXT(semaphore,handleType,fd);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glImportSemaphoreFdEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glImportSemaphoreWin32HandleEXT(GLuint semaphore, GLenum handleType, void* handle)
    {
    
    glad_glImportSemaphoreWin32HandleEXT(semaphore,handleType,handle);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glImportSemaphoreWin32HandleEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glImportSemaphoreWin32NameEXT(GLuint semaphore, GLenum handleType, const void* name)
    {
    
    glad_glImportSemaphoreWin32NameEXT(semaphore,handleType,name);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glImportSemaphoreWin32NameEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glUseShaderProgramEXT(GLenum type, GLuint program)
    {
    
    glad_glUseShaderProgramEXT(type,program);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glUseShaderProgramEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glActiveProgramEXT(GLuint program)
    {
    
    glad_glActiveProgramEXT(program);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glActiveProgramEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    GLuint __cdecl glwrap_glCreateShaderProgramEXT(GLenum type, const GLchar* string)
    {
    
    GLuint ret = glad_glCreateShaderProgramEXT(type,string);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glCreateShaderProgramEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	return ret;
    }

    void __cdecl glwrap_glFramebufferFetchBarrierEXT()
    {
    
    glad_glFramebufferFetchBarrierEXT();
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glFramebufferFetchBarrierEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glBindImageTextureEXT(GLuint index, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLint format)
    {
    
    glad_glBindImageTextureEXT(index,texture,level,layered,layer,access,format);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glBindImageTextureEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMemoryBarrierEXT(GLbitfield barriers)
    {
    
    glad_glMemoryBarrierEXT(barriers);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMemoryBarrierEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glStencilClearTagEXT(GLsizei stencilTagBits, GLuint stencilClearTag)
    {
    
    glad_glStencilClearTagEXT(stencilTagBits,stencilClearTag);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glStencilClearTagEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glActiveStencilFaceEXT(GLenum face)
    {
    
    glad_glActiveStencilFaceEXT(face);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glActiveStencilFaceEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTexSubImage1DEXT(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void* pixels)
    {
    
    glad_glTexSubImage1DEXT(target,level,xoffset,width,format,type,pixels);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTexSubImage1DEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTexSubImage2DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void* pixels)
    {
    
    glad_glTexSubImage2DEXT(target,level,xoffset,yoffset,width,height,format,type,pixels);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTexSubImage2DEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTexImage3DEXT(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void* pixels)
    {
    
    glad_glTexImage3DEXT(target,level,internalformat,width,height,depth,border,format,type,pixels);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTexImage3DEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTexSubImage3DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void* pixels)
    {
    
    glad_glTexSubImage3DEXT(target,level,xoffset,yoffset,zoffset,width,height,depth,format,type,pixels);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTexSubImage3DEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glFramebufferTextureLayerEXT(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer)
    {
    
    glad_glFramebufferTextureLayerEXT(target,attachment,texture,level,layer);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glFramebufferTextureLayerEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTexBufferEXT(GLenum target, GLenum internalformat, GLuint buffer)
    {
    
    glad_glTexBufferEXT(target,internalformat,buffer);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTexBufferEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTexParameterIivEXT(GLenum target, GLenum pname, const GLint* params)
    {
    
    glad_glTexParameterIivEXT(target,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTexParameterIivEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTexParameterIuivEXT(GLenum target, GLenum pname, const GLuint* params)
    {
    
    glad_glTexParameterIuivEXT(target,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTexParameterIuivEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetTexParameterIivEXT(GLenum target, GLenum pname, GLint* params)
    {
    
    glad_glGetTexParameterIivEXT(target,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetTexParameterIivEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetTexParameterIuivEXT(GLenum target, GLenum pname, GLuint* params)
    {
    
    glad_glGetTexParameterIuivEXT(target,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetTexParameterIuivEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glClearColorIiEXT(GLint red, GLint green, GLint blue, GLint alpha)
    {
    
    glad_glClearColorIiEXT(red,green,blue,alpha);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glClearColorIiEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glClearColorIuiEXT(GLuint red, GLuint green, GLuint blue, GLuint alpha)
    {
    
    glad_glClearColorIuiEXT(red,green,blue,alpha);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glClearColorIuiEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    GLboolean __cdecl glwrap_glAreTexturesResidentEXT(GLsizei n, const GLuint* textures, GLboolean* residences)
    {
    
    GLboolean ret = glad_glAreTexturesResidentEXT(n,textures,residences);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glAreTexturesResidentEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	return ret;
    }

    void __cdecl glwrap_glBindTextureEXT(GLenum target, GLuint texture)
    {
    
    glad_glBindTextureEXT(target,texture);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glBindTextureEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glDeleteTexturesEXT(GLsizei n, const GLuint* textures)
    {
    
    glad_glDeleteTexturesEXT(n,textures);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glDeleteTexturesEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGenTexturesEXT(GLsizei n, GLuint* textures)
    {
    
    glad_glGenTexturesEXT(n,textures);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGenTexturesEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    GLboolean __cdecl glwrap_glIsTextureEXT(GLuint texture)
    {
    
    GLboolean ret = glad_glIsTextureEXT(texture);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glIsTextureEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	return ret;
    }

    void __cdecl glwrap_glPrioritizeTexturesEXT(GLsizei n, const GLuint* textures, const GLclampf* priorities)
    {
    
    glad_glPrioritizeTexturesEXT(n,textures,priorities);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glPrioritizeTexturesEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTextureNormalEXT(GLenum mode)
    {
    
    glad_glTextureNormalEXT(mode);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTextureNormalEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetQueryObjecti64vEXT(GLuint id, GLenum pname, GLint64* params)
    {
    
    glad_glGetQueryObjecti64vEXT(id,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetQueryObjecti64vEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetQueryObjectui64vEXT(GLuint id, GLenum pname, GLuint64* params)
    {
    
    glad_glGetQueryObjectui64vEXT(id,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetQueryObjectui64vEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glBeginTransformFeedbackEXT(GLenum primitiveMode)
    {
    
    glad_glBeginTransformFeedbackEXT(primitiveMode);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glBeginTransformFeedbackEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glEndTransformFeedbackEXT()
    {
    
    glad_glEndTransformFeedbackEXT();
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glEndTransformFeedbackEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glBindBufferRangeEXT(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size)
    {
    
    glad_glBindBufferRangeEXT(target,index,buffer,offset,size);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glBindBufferRangeEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glBindBufferOffsetEXT(GLenum target, GLuint index, GLuint buffer, GLintptr offset)
    {
    
    glad_glBindBufferOffsetEXT(target,index,buffer,offset);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glBindBufferOffsetEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glBindBufferBaseEXT(GLenum target, GLuint index, GLuint buffer)
    {
    
    glad_glBindBufferBaseEXT(target,index,buffer);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glBindBufferBaseEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTransformFeedbackVaryingsEXT(GLuint program, GLsizei count, const GLchar** constvaryings, GLenum bufferMode)
    {
    
    glad_glTransformFeedbackVaryingsEXT(program,count,constvaryings,bufferMode);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTransformFeedbackVaryingsEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetTransformFeedbackVaryingEXT(GLuint program, GLuint index, GLsizei bufSize, GLsizei* length, GLsizei* size, GLenum* type, GLchar* name)
    {
    
    glad_glGetTransformFeedbackVaryingEXT(program,index,bufSize,length,size,type,name);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetTransformFeedbackVaryingEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glArrayElementEXT(GLint i)
    {
    
    glad_glArrayElementEXT(i);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glArrayElementEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glColorPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, const void* pointer)
    {
    
    glad_glColorPointerEXT(size,type,stride,count,pointer);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glColorPointerEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glDrawArraysEXT(GLenum mode, GLint first, GLsizei count)
    {
    
    glad_glDrawArraysEXT(mode,first,count);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glDrawArraysEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glEdgeFlagPointerEXT(GLsizei stride, GLsizei count, const GLboolean* pointer)
    {
    
    glad_glEdgeFlagPointerEXT(stride,count,pointer);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glEdgeFlagPointerEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetPointervEXT(GLenum pname, void** params)
    {
    
    glad_glGetPointervEXT(pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetPointervEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glIndexPointerEXT(GLenum type, GLsizei stride, GLsizei count, const void* pointer)
    {
    
    glad_glIndexPointerEXT(type,stride,count,pointer);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glIndexPointerEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glNormalPointerEXT(GLenum type, GLsizei stride, GLsizei count, const void* pointer)
    {
    
    glad_glNormalPointerEXT(type,stride,count,pointer);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glNormalPointerEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTexCoordPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, const void* pointer)
    {
    
    glad_glTexCoordPointerEXT(size,type,stride,count,pointer);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTexCoordPointerEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, const void* pointer)
    {
    
    glad_glVertexPointerEXT(size,type,stride,count,pointer);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexPointerEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttribL1dEXT(GLuint index, GLdouble x)
    {
    
    glad_glVertexAttribL1dEXT(index,x);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttribL1dEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttribL2dEXT(GLuint index, GLdouble x, GLdouble y)
    {
    
    glad_glVertexAttribL2dEXT(index,x,y);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttribL2dEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttribL3dEXT(GLuint index, GLdouble x, GLdouble y, GLdouble z)
    {
    
    glad_glVertexAttribL3dEXT(index,x,y,z);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttribL3dEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttribL4dEXT(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
    {
    
    glad_glVertexAttribL4dEXT(index,x,y,z,w);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttribL4dEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttribL1dvEXT(GLuint index, const GLdouble* v)
    {
    
    glad_glVertexAttribL1dvEXT(index,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttribL1dvEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttribL2dvEXT(GLuint index, const GLdouble* v)
    {
    
    glad_glVertexAttribL2dvEXT(index,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttribL2dvEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttribL3dvEXT(GLuint index, const GLdouble* v)
    {
    
    glad_glVertexAttribL3dvEXT(index,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttribL3dvEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttribL4dvEXT(GLuint index, const GLdouble* v)
    {
    
    glad_glVertexAttribL4dvEXT(index,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttribL4dvEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttribLPointerEXT(GLuint index, GLint size, GLenum type, GLsizei stride, const void* pointer)
    {
    
    glad_glVertexAttribLPointerEXT(index,size,type,stride,pointer);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttribLPointerEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetVertexAttribLdvEXT(GLuint index, GLenum pname, GLdouble* params)
    {
    
    glad_glGetVertexAttribLdvEXT(index,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetVertexAttribLdvEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glBeginVertexShaderEXT()
    {
    
    glad_glBeginVertexShaderEXT();
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glBeginVertexShaderEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glEndVertexShaderEXT()
    {
    
    glad_glEndVertexShaderEXT();
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glEndVertexShaderEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glBindVertexShaderEXT(GLuint id)
    {
    
    glad_glBindVertexShaderEXT(id);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glBindVertexShaderEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    GLuint __cdecl glwrap_glGenVertexShadersEXT(GLuint range)
    {
    
    GLuint ret = glad_glGenVertexShadersEXT(range);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGenVertexShadersEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	return ret;
    }

    void __cdecl glwrap_glDeleteVertexShaderEXT(GLuint id)
    {
    
    glad_glDeleteVertexShaderEXT(id);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glDeleteVertexShaderEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glShaderOp1EXT(GLenum op, GLuint res, GLuint arg1)
    {
    
    glad_glShaderOp1EXT(op,res,arg1);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glShaderOp1EXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glShaderOp2EXT(GLenum op, GLuint res, GLuint arg1, GLuint arg2)
    {
    
    glad_glShaderOp2EXT(op,res,arg1,arg2);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glShaderOp2EXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glShaderOp3EXT(GLenum op, GLuint res, GLuint arg1, GLuint arg2, GLuint arg3)
    {
    
    glad_glShaderOp3EXT(op,res,arg1,arg2,arg3);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glShaderOp3EXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glSwizzleEXT(GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW)
    {
    
    glad_glSwizzleEXT(res,in,outX,outY,outZ,outW);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glSwizzleEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glWriteMaskEXT(GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW)
    {
    
    glad_glWriteMaskEXT(res,in,outX,outY,outZ,outW);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glWriteMaskEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glInsertComponentEXT(GLuint res, GLuint src, GLuint num)
    {
    
    glad_glInsertComponentEXT(res,src,num);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glInsertComponentEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glExtractComponentEXT(GLuint res, GLuint src, GLuint num)
    {
    
    glad_glExtractComponentEXT(res,src,num);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glExtractComponentEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    GLuint __cdecl glwrap_glGenSymbolsEXT(GLenum datatype, GLenum storagetype, GLenum range, GLuint components)
    {
    
    GLuint ret = glad_glGenSymbolsEXT(datatype,storagetype,range,components);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGenSymbolsEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	return ret;
    }

    void __cdecl glwrap_glSetInvariantEXT(GLuint id, GLenum type, const void* addr)
    {
    
    glad_glSetInvariantEXT(id,type,addr);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glSetInvariantEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glSetLocalConstantEXT(GLuint id, GLenum type, const void* addr)
    {
    
    glad_glSetLocalConstantEXT(id,type,addr);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glSetLocalConstantEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVariantbvEXT(GLuint id, const GLbyte* addr)
    {
    
    glad_glVariantbvEXT(id,addr);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVariantbvEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVariantsvEXT(GLuint id, const GLshort* addr)
    {
    
    glad_glVariantsvEXT(id,addr);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVariantsvEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVariantivEXT(GLuint id, const GLint* addr)
    {
    
    glad_glVariantivEXT(id,addr);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVariantivEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVariantfvEXT(GLuint id, const GLfloat* addr)
    {
    
    glad_glVariantfvEXT(id,addr);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVariantfvEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVariantdvEXT(GLuint id, const GLdouble* addr)
    {
    
    glad_glVariantdvEXT(id,addr);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVariantdvEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVariantubvEXT(GLuint id, const GLubyte* addr)
    {
    
    glad_glVariantubvEXT(id,addr);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVariantubvEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVariantusvEXT(GLuint id, const GLushort* addr)
    {
    
    glad_glVariantusvEXT(id,addr);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVariantusvEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVariantuivEXT(GLuint id, const GLuint* addr)
    {
    
    glad_glVariantuivEXT(id,addr);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVariantuivEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVariantPointerEXT(GLuint id, GLenum type, GLuint stride, const void* addr)
    {
    
    glad_glVariantPointerEXT(id,type,stride,addr);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVariantPointerEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glEnableVariantClientStateEXT(GLuint id)
    {
    
    glad_glEnableVariantClientStateEXT(id);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glEnableVariantClientStateEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glDisableVariantClientStateEXT(GLuint id)
    {
    
    glad_glDisableVariantClientStateEXT(id);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glDisableVariantClientStateEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    GLuint __cdecl glwrap_glBindLightParameterEXT(GLenum light, GLenum value)
    {
    
    GLuint ret = glad_glBindLightParameterEXT(light,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glBindLightParameterEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	return ret;
    }

    GLuint __cdecl glwrap_glBindMaterialParameterEXT(GLenum face, GLenum value)
    {
    
    GLuint ret = glad_glBindMaterialParameterEXT(face,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glBindMaterialParameterEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	return ret;
    }

    GLuint __cdecl glwrap_glBindTexGenParameterEXT(GLenum unit, GLenum coord, GLenum value)
    {
    
    GLuint ret = glad_glBindTexGenParameterEXT(unit,coord,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glBindTexGenParameterEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	return ret;
    }

    GLuint __cdecl glwrap_glBindTextureUnitParameterEXT(GLenum unit, GLenum value)
    {
    
    GLuint ret = glad_glBindTextureUnitParameterEXT(unit,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glBindTextureUnitParameterEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	return ret;
    }

    GLuint __cdecl glwrap_glBindParameterEXT(GLenum value)
    {
    
    GLuint ret = glad_glBindParameterEXT(value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glBindParameterEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	return ret;
    }

    GLboolean __cdecl glwrap_glIsVariantEnabledEXT(GLuint id, GLenum cap)
    {
    
    GLboolean ret = glad_glIsVariantEnabledEXT(id,cap);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glIsVariantEnabledEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	return ret;
    }

    void __cdecl glwrap_glGetVariantBooleanvEXT(GLuint id, GLenum value, GLboolean* data)
    {
    
    glad_glGetVariantBooleanvEXT(id,value,data);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetVariantBooleanvEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetVariantIntegervEXT(GLuint id, GLenum value, GLint* data)
    {
    
    glad_glGetVariantIntegervEXT(id,value,data);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetVariantIntegervEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetVariantFloatvEXT(GLuint id, GLenum value, GLfloat* data)
    {
    
    glad_glGetVariantFloatvEXT(id,value,data);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetVariantFloatvEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetVariantPointervEXT(GLuint id, GLenum value, void** data)
    {
    
    glad_glGetVariantPointervEXT(id,value,data);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetVariantPointervEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetInvariantBooleanvEXT(GLuint id, GLenum value, GLboolean* data)
    {
    
    glad_glGetInvariantBooleanvEXT(id,value,data);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetInvariantBooleanvEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetInvariantIntegervEXT(GLuint id, GLenum value, GLint* data)
    {
    
    glad_glGetInvariantIntegervEXT(id,value,data);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetInvariantIntegervEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetInvariantFloatvEXT(GLuint id, GLenum value, GLfloat* data)
    {
    
    glad_glGetInvariantFloatvEXT(id,value,data);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetInvariantFloatvEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetLocalConstantBooleanvEXT(GLuint id, GLenum value, GLboolean* data)
    {
    
    glad_glGetLocalConstantBooleanvEXT(id,value,data);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetLocalConstantBooleanvEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetLocalConstantIntegervEXT(GLuint id, GLenum value, GLint* data)
    {
    
    glad_glGetLocalConstantIntegervEXT(id,value,data);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetLocalConstantIntegervEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetLocalConstantFloatvEXT(GLuint id, GLenum value, GLfloat* data)
    {
    
    glad_glGetLocalConstantFloatvEXT(id,value,data);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetLocalConstantFloatvEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexWeightfEXT(GLfloat weight)
    {
    
    glad_glVertexWeightfEXT(weight);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexWeightfEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexWeightfvEXT(const GLfloat* weight)
    {
    
    glad_glVertexWeightfvEXT(weight);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexWeightfvEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexWeightPointerEXT(GLint size, GLenum type, GLsizei stride, const void* pointer)
    {
    
    glad_glVertexWeightPointerEXT(size,type,stride,pointer);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexWeightPointerEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    GLboolean __cdecl glwrap_glAcquireKeyedMutexWin32EXT(GLuint memory, GLuint64 key, GLuint timeout)
    {
    
    GLboolean ret = glad_glAcquireKeyedMutexWin32EXT(memory,key,timeout);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glAcquireKeyedMutexWin32EXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	return ret;
    }

    GLboolean __cdecl glwrap_glReleaseKeyedMutexWin32EXT(GLuint memory, GLuint64 key)
    {
    
    GLboolean ret = glad_glReleaseKeyedMutexWin32EXT(memory,key);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glReleaseKeyedMutexWin32EXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	return ret;
    }

    void __cdecl glwrap_glWindowRectanglesEXT(GLenum mode, GLsizei count, const GLint* box)
    {
    
    glad_glWindowRectanglesEXT(mode,count,box);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glWindowRectanglesEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    GLsync __cdecl glwrap_glImportSyncEXT(GLenum external_sync_type, GLintptr external_sync, GLbitfield flags)
    {
    
    GLsync ret = glad_glImportSyncEXT(external_sync_type,external_sync,flags);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glImportSyncEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	return ret;
    }

    void __cdecl glwrap_glFrameTerminatorGREMEDY()
    {
    
    glad_glFrameTerminatorGREMEDY();
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glFrameTerminatorGREMEDY");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glStringMarkerGREMEDY(GLsizei len, const void* string)
    {
    
    glad_glStringMarkerGREMEDY(len,string);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glStringMarkerGREMEDY");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glImageTransformParameteriHP(GLenum target, GLenum pname, GLint param)
    {
    
    glad_glImageTransformParameteriHP(target,pname,param);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glImageTransformParameteriHP");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glImageTransformParameterfHP(GLenum target, GLenum pname, GLfloat param)
    {
    
    glad_glImageTransformParameterfHP(target,pname,param);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glImageTransformParameterfHP");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glImageTransformParameterivHP(GLenum target, GLenum pname, const GLint* params)
    {
    
    glad_glImageTransformParameterivHP(target,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glImageTransformParameterivHP");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glImageTransformParameterfvHP(GLenum target, GLenum pname, const GLfloat* params)
    {
    
    glad_glImageTransformParameterfvHP(target,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glImageTransformParameterfvHP");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetImageTransformParameterivHP(GLenum target, GLenum pname, GLint* params)
    {
    
    glad_glGetImageTransformParameterivHP(target,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetImageTransformParameterivHP");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetImageTransformParameterfvHP(GLenum target, GLenum pname, GLfloat* params)
    {
    
    glad_glGetImageTransformParameterfvHP(target,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetImageTransformParameterfvHP");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMultiModeDrawArraysIBM(const GLenum* mode, const GLint* first, const GLsizei* count, GLsizei primcount, GLint modestride)
    {
    
    glad_glMultiModeDrawArraysIBM(mode,first,count,primcount,modestride);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMultiModeDrawArraysIBM");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMultiModeDrawElementsIBM(const GLenum* mode, const GLsizei* count, GLenum type, const void** constindices, GLsizei primcount, GLint modestride)
    {
    
    glad_glMultiModeDrawElementsIBM(mode,count,type,constindices,primcount,modestride);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMultiModeDrawElementsIBM");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glFlushStaticDataIBM(GLenum target)
    {
    
    glad_glFlushStaticDataIBM(target);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glFlushStaticDataIBM");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glColorPointerListIBM(GLint size, GLenum type, GLint stride, const void** pointer, GLint ptrstride)
    {
    
    glad_glColorPointerListIBM(size,type,stride,pointer,ptrstride);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glColorPointerListIBM");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glSecondaryColorPointerListIBM(GLint size, GLenum type, GLint stride, const void** pointer, GLint ptrstride)
    {
    
    glad_glSecondaryColorPointerListIBM(size,type,stride,pointer,ptrstride);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glSecondaryColorPointerListIBM");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glEdgeFlagPointerListIBM(GLint stride, const GLboolean** pointer, GLint ptrstride)
    {
    
    glad_glEdgeFlagPointerListIBM(stride,pointer,ptrstride);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glEdgeFlagPointerListIBM");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glFogCoordPointerListIBM(GLenum type, GLint stride, const void** pointer, GLint ptrstride)
    {
    
    glad_glFogCoordPointerListIBM(type,stride,pointer,ptrstride);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glFogCoordPointerListIBM");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glIndexPointerListIBM(GLenum type, GLint stride, const void** pointer, GLint ptrstride)
    {
    
    glad_glIndexPointerListIBM(type,stride,pointer,ptrstride);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glIndexPointerListIBM");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glNormalPointerListIBM(GLenum type, GLint stride, const void** pointer, GLint ptrstride)
    {
    
    glad_glNormalPointerListIBM(type,stride,pointer,ptrstride);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glNormalPointerListIBM");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTexCoordPointerListIBM(GLint size, GLenum type, GLint stride, const void** pointer, GLint ptrstride)
    {
    
    glad_glTexCoordPointerListIBM(size,type,stride,pointer,ptrstride);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTexCoordPointerListIBM");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexPointerListIBM(GLint size, GLenum type, GLint stride, const void** pointer, GLint ptrstride)
    {
    
    glad_glVertexPointerListIBM(size,type,stride,pointer,ptrstride);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexPointerListIBM");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glBlendFuncSeparateINGR(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha)
    {
    
    glad_glBlendFuncSeparateINGR(sfactorRGB,dfactorRGB,sfactorAlpha,dfactorAlpha);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glBlendFuncSeparateINGR");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glApplyFramebufferAttachmentCMAAINTEL()
    {
    
    glad_glApplyFramebufferAttachmentCMAAINTEL();
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glApplyFramebufferAttachmentCMAAINTEL");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glSyncTextureINTEL(GLuint texture)
    {
    
    glad_glSyncTextureINTEL(texture);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glSyncTextureINTEL");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glUnmapTexture2DINTEL(GLuint texture, GLint level)
    {
    
    glad_glUnmapTexture2DINTEL(texture,level);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glUnmapTexture2DINTEL");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void * __cdecl glwrap_glMapTexture2DINTEL(GLuint texture, GLint level, GLbitfield access, GLint* stride, GLenum* layout)
    {
    
    void * ret = glad_glMapTexture2DINTEL(texture,level,access,stride,layout);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMapTexture2DINTEL");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	return ret;
    }

    void __cdecl glwrap_glVertexPointervINTEL(GLint size, GLenum type, const void** pointer)
    {
    
    glad_glVertexPointervINTEL(size,type,pointer);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexPointervINTEL");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glNormalPointervINTEL(GLenum type, const void** pointer)
    {
    
    glad_glNormalPointervINTEL(type,pointer);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glNormalPointervINTEL");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glColorPointervINTEL(GLint size, GLenum type, const void** pointer)
    {
    
    glad_glColorPointervINTEL(size,type,pointer);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glColorPointervINTEL");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTexCoordPointervINTEL(GLint size, GLenum type, const void** pointer)
    {
    
    glad_glTexCoordPointervINTEL(size,type,pointer);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTexCoordPointervINTEL");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glBeginPerfQueryINTEL(GLuint queryHandle)
    {
    
    glad_glBeginPerfQueryINTEL(queryHandle);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glBeginPerfQueryINTEL");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glCreatePerfQueryINTEL(GLuint queryId, GLuint* queryHandle)
    {
    
    glad_glCreatePerfQueryINTEL(queryId,queryHandle);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glCreatePerfQueryINTEL");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glDeletePerfQueryINTEL(GLuint queryHandle)
    {
    
    glad_glDeletePerfQueryINTEL(queryHandle);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glDeletePerfQueryINTEL");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glEndPerfQueryINTEL(GLuint queryHandle)
    {
    
    glad_glEndPerfQueryINTEL(queryHandle);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glEndPerfQueryINTEL");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetFirstPerfQueryIdINTEL(GLuint* queryId)
    {
    
    glad_glGetFirstPerfQueryIdINTEL(queryId);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetFirstPerfQueryIdINTEL");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetNextPerfQueryIdINTEL(GLuint queryId, GLuint* nextQueryId)
    {
    
    glad_glGetNextPerfQueryIdINTEL(queryId,nextQueryId);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetNextPerfQueryIdINTEL");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetPerfCounterInfoINTEL(GLuint queryId, GLuint counterId, GLuint counterNameLength, GLchar* counterName, GLuint counterDescLength, GLchar* counterDesc, GLuint* counterOffset, GLuint* counterDataSize, GLuint* counterTypeEnum, GLuint* counterDataTypeEnum, GLuint64* rawCounterMaxValue)
    {
    
    glad_glGetPerfCounterInfoINTEL(queryId,counterId,counterNameLength,counterName,counterDescLength,counterDesc,counterOffset,counterDataSize,counterTypeEnum,counterDataTypeEnum,rawCounterMaxValue);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetPerfCounterInfoINTEL");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetPerfQueryDataINTEL(GLuint queryHandle, GLuint flags, GLsizei dataSize, void* data, GLuint* bytesWritten)
    {
    
    glad_glGetPerfQueryDataINTEL(queryHandle,flags,dataSize,data,bytesWritten);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetPerfQueryDataINTEL");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetPerfQueryIdByNameINTEL(GLchar* queryName, GLuint* queryId)
    {
    
    glad_glGetPerfQueryIdByNameINTEL(queryName,queryId);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetPerfQueryIdByNameINTEL");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetPerfQueryInfoINTEL(GLuint queryId, GLuint queryNameLength, GLchar* queryName, GLuint* dataSize, GLuint* noCounters, GLuint* noInstances, GLuint* capsMask)
    {
    
    glad_glGetPerfQueryInfoINTEL(queryId,queryNameLength,queryName,dataSize,noCounters,noInstances,capsMask);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetPerfQueryInfoINTEL");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glResizeBuffersMESA()
    {
    
    glad_glResizeBuffersMESA();
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glResizeBuffersMESA");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glWindowPos2dMESA(GLdouble x, GLdouble y)
    {
    
    glad_glWindowPos2dMESA(x,y);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glWindowPos2dMESA");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glWindowPos2dvMESA(const GLdouble* v)
    {
    
    glad_glWindowPos2dvMESA(v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glWindowPos2dvMESA");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glWindowPos2fMESA(GLfloat x, GLfloat y)
    {
    
    glad_glWindowPos2fMESA(x,y);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glWindowPos2fMESA");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glWindowPos2fvMESA(const GLfloat* v)
    {
    
    glad_glWindowPos2fvMESA(v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glWindowPos2fvMESA");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glWindowPos2iMESA(GLint x, GLint y)
    {
    
    glad_glWindowPos2iMESA(x,y);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glWindowPos2iMESA");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glWindowPos2ivMESA(const GLint* v)
    {
    
    glad_glWindowPos2ivMESA(v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glWindowPos2ivMESA");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glWindowPos2sMESA(GLshort x, GLshort y)
    {
    
    glad_glWindowPos2sMESA(x,y);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glWindowPos2sMESA");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glWindowPos2svMESA(const GLshort* v)
    {
    
    glad_glWindowPos2svMESA(v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glWindowPos2svMESA");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glWindowPos3dMESA(GLdouble x, GLdouble y, GLdouble z)
    {
    
    glad_glWindowPos3dMESA(x,y,z);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glWindowPos3dMESA");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glWindowPos3dvMESA(const GLdouble* v)
    {
    
    glad_glWindowPos3dvMESA(v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glWindowPos3dvMESA");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glWindowPos3fMESA(GLfloat x, GLfloat y, GLfloat z)
    {
    
    glad_glWindowPos3fMESA(x,y,z);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glWindowPos3fMESA");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glWindowPos3fvMESA(const GLfloat* v)
    {
    
    glad_glWindowPos3fvMESA(v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glWindowPos3fvMESA");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glWindowPos3iMESA(GLint x, GLint y, GLint z)
    {
    
    glad_glWindowPos3iMESA(x,y,z);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glWindowPos3iMESA");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glWindowPos3ivMESA(const GLint* v)
    {
    
    glad_glWindowPos3ivMESA(v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glWindowPos3ivMESA");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glWindowPos3sMESA(GLshort x, GLshort y, GLshort z)
    {
    
    glad_glWindowPos3sMESA(x,y,z);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glWindowPos3sMESA");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glWindowPos3svMESA(const GLshort* v)
    {
    
    glad_glWindowPos3svMESA(v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glWindowPos3svMESA");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glWindowPos4dMESA(GLdouble x, GLdouble y, GLdouble z, GLdouble w)
    {
    
    glad_glWindowPos4dMESA(x,y,z,w);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glWindowPos4dMESA");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glWindowPos4dvMESA(const GLdouble* v)
    {
    
    glad_glWindowPos4dvMESA(v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glWindowPos4dvMESA");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glWindowPos4fMESA(GLfloat x, GLfloat y, GLfloat z, GLfloat w)
    {
    
    glad_glWindowPos4fMESA(x,y,z,w);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glWindowPos4fMESA");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glWindowPos4fvMESA(const GLfloat* v)
    {
    
    glad_glWindowPos4fvMESA(v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glWindowPos4fvMESA");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glWindowPos4iMESA(GLint x, GLint y, GLint z, GLint w)
    {
    
    glad_glWindowPos4iMESA(x,y,z,w);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glWindowPos4iMESA");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glWindowPos4ivMESA(const GLint* v)
    {
    
    glad_glWindowPos4ivMESA(v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glWindowPos4ivMESA");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glWindowPos4sMESA(GLshort x, GLshort y, GLshort z, GLshort w)
    {
    
    glad_glWindowPos4sMESA(x,y,z,w);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glWindowPos4sMESA");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glWindowPos4svMESA(const GLshort* v)
    {
    
    glad_glWindowPos4svMESA(v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glWindowPos4svMESA");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glBeginConditionalRenderNVX(GLuint id)
    {
    
    glad_glBeginConditionalRenderNVX(id);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glBeginConditionalRenderNVX");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glEndConditionalRenderNVX()
    {
    
    glad_glEndConditionalRenderNVX();
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glEndConditionalRenderNVX");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glLGPUNamedBufferSubDataNVX(GLbitfield gpuMask, GLuint buffer, GLintptr offset, GLsizeiptr size, const void* data)
    {
    
    glad_glLGPUNamedBufferSubDataNVX(gpuMask,buffer,offset,size,data);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glLGPUNamedBufferSubDataNVX");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glLGPUCopyImageSubDataNVX(GLuint sourceGpu, GLbitfield destinationGpuMask, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srxY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth)
    {
    
    glad_glLGPUCopyImageSubDataNVX(sourceGpu,destinationGpuMask,srcName,srcTarget,srcLevel,srcX,srxY,srcZ,dstName,dstTarget,dstLevel,dstX,dstY,dstZ,width,height,depth);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glLGPUCopyImageSubDataNVX");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glLGPUInterlockNVX()
    {
    
    glad_glLGPUInterlockNVX();
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glLGPUInterlockNVX");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glAlphaToCoverageDitherControlNV(GLenum mode)
    {
    
    glad_glAlphaToCoverageDitherControlNV(mode);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glAlphaToCoverageDitherControlNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMultiDrawArraysIndirectBindlessNV(GLenum mode, const void* indirect, GLsizei drawCount, GLsizei stride, GLint vertexBufferCount)
    {
    
    glad_glMultiDrawArraysIndirectBindlessNV(mode,indirect,drawCount,stride,vertexBufferCount);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMultiDrawArraysIndirectBindlessNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMultiDrawElementsIndirectBindlessNV(GLenum mode, GLenum type, const void* indirect, GLsizei drawCount, GLsizei stride, GLint vertexBufferCount)
    {
    
    glad_glMultiDrawElementsIndirectBindlessNV(mode,type,indirect,drawCount,stride,vertexBufferCount);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMultiDrawElementsIndirectBindlessNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMultiDrawArraysIndirectBindlessCountNV(GLenum mode, const void* indirect, GLsizei drawCount, GLsizei maxDrawCount, GLsizei stride, GLint vertexBufferCount)
    {
    
    glad_glMultiDrawArraysIndirectBindlessCountNV(mode,indirect,drawCount,maxDrawCount,stride,vertexBufferCount);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMultiDrawArraysIndirectBindlessCountNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMultiDrawElementsIndirectBindlessCountNV(GLenum mode, GLenum type, const void* indirect, GLsizei drawCount, GLsizei maxDrawCount, GLsizei stride, GLint vertexBufferCount)
    {
    
    glad_glMultiDrawElementsIndirectBindlessCountNV(mode,type,indirect,drawCount,maxDrawCount,stride,vertexBufferCount);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMultiDrawElementsIndirectBindlessCountNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    GLuint64 __cdecl glwrap_glGetTextureHandleNV(GLuint texture)
    {
    
    GLuint64 ret = glad_glGetTextureHandleNV(texture);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetTextureHandleNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	return ret;
    }

    GLuint64 __cdecl glwrap_glGetTextureSamplerHandleNV(GLuint texture, GLuint sampler)
    {
    
    GLuint64 ret = glad_glGetTextureSamplerHandleNV(texture,sampler);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetTextureSamplerHandleNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	return ret;
    }

    void __cdecl glwrap_glMakeTextureHandleResidentNV(GLuint64 handle)
    {
    
    glad_glMakeTextureHandleResidentNV(handle);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMakeTextureHandleResidentNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMakeTextureHandleNonResidentNV(GLuint64 handle)
    {
    
    glad_glMakeTextureHandleNonResidentNV(handle);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMakeTextureHandleNonResidentNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    GLuint64 __cdecl glwrap_glGetImageHandleNV(GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format)
    {
    
    GLuint64 ret = glad_glGetImageHandleNV(texture,level,layered,layer,format);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetImageHandleNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	return ret;
    }

    void __cdecl glwrap_glMakeImageHandleResidentNV(GLuint64 handle, GLenum access)
    {
    
    glad_glMakeImageHandleResidentNV(handle,access);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMakeImageHandleResidentNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMakeImageHandleNonResidentNV(GLuint64 handle)
    {
    
    glad_glMakeImageHandleNonResidentNV(handle);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMakeImageHandleNonResidentNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glUniformHandleui64NV(GLint location, GLuint64 value)
    {
    
    glad_glUniformHandleui64NV(location,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glUniformHandleui64NV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glUniformHandleui64vNV(GLint location, GLsizei count, const GLuint64* value)
    {
    
    glad_glUniformHandleui64vNV(location,count,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glUniformHandleui64vNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramUniformHandleui64NV(GLuint program, GLint location, GLuint64 value)
    {
    
    glad_glProgramUniformHandleui64NV(program,location,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramUniformHandleui64NV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramUniformHandleui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64* values)
    {
    
    glad_glProgramUniformHandleui64vNV(program,location,count,values);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramUniformHandleui64vNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    GLboolean __cdecl glwrap_glIsTextureHandleResidentNV(GLuint64 handle)
    {
    
    GLboolean ret = glad_glIsTextureHandleResidentNV(handle);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glIsTextureHandleResidentNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	return ret;
    }

    GLboolean __cdecl glwrap_glIsImageHandleResidentNV(GLuint64 handle)
    {
    
    GLboolean ret = glad_glIsImageHandleResidentNV(handle);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glIsImageHandleResidentNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	return ret;
    }

    void __cdecl glwrap_glBlendParameteriNV(GLenum pname, GLint value)
    {
    
    glad_glBlendParameteriNV(pname,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glBlendParameteriNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glBlendBarrierNV()
    {
    
    glad_glBlendBarrierNV();
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glBlendBarrierNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glViewportPositionWScaleNV(GLuint index, GLfloat xcoeff, GLfloat ycoeff)
    {
    
    glad_glViewportPositionWScaleNV(index,xcoeff,ycoeff);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glViewportPositionWScaleNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glCreateStatesNV(GLsizei n, GLuint* states)
    {
    
    glad_glCreateStatesNV(n,states);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glCreateStatesNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glDeleteStatesNV(GLsizei n, const GLuint* states)
    {
    
    glad_glDeleteStatesNV(n,states);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glDeleteStatesNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    GLboolean __cdecl glwrap_glIsStateNV(GLuint state)
    {
    
    GLboolean ret = glad_glIsStateNV(state);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glIsStateNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	return ret;
    }

    void __cdecl glwrap_glStateCaptureNV(GLuint state, GLenum mode)
    {
    
    glad_glStateCaptureNV(state,mode);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glStateCaptureNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    GLuint __cdecl glwrap_glGetCommandHeaderNV(GLenum tokenID, GLuint size)
    {
    
    GLuint ret = glad_glGetCommandHeaderNV(tokenID,size);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetCommandHeaderNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	return ret;
    }

    GLushort __cdecl glwrap_glGetStageIndexNV(GLenum shadertype)
    {
    
    GLushort ret = glad_glGetStageIndexNV(shadertype);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetStageIndexNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	return ret;
    }

    void __cdecl glwrap_glDrawCommandsNV(GLenum primitiveMode, GLuint buffer, const GLintptr* indirects, const GLsizei* sizes, GLuint count)
    {
    
    glad_glDrawCommandsNV(primitiveMode,buffer,indirects,sizes,count);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glDrawCommandsNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glDrawCommandsAddressNV(GLenum primitiveMode, const GLuint64* indirects, const GLsizei* sizes, GLuint count)
    {
    
    glad_glDrawCommandsAddressNV(primitiveMode,indirects,sizes,count);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glDrawCommandsAddressNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glDrawCommandsStatesNV(GLuint buffer, const GLintptr* indirects, const GLsizei* sizes, const GLuint* states, const GLuint* fbos, GLuint count)
    {
    
    glad_glDrawCommandsStatesNV(buffer,indirects,sizes,states,fbos,count);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glDrawCommandsStatesNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glDrawCommandsStatesAddressNV(const GLuint64* indirects, const GLsizei* sizes, const GLuint* states, const GLuint* fbos, GLuint count)
    {
    
    glad_glDrawCommandsStatesAddressNV(indirects,sizes,states,fbos,count);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glDrawCommandsStatesAddressNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glCreateCommandListsNV(GLsizei n, GLuint* lists)
    {
    
    glad_glCreateCommandListsNV(n,lists);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glCreateCommandListsNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glDeleteCommandListsNV(GLsizei n, const GLuint* lists)
    {
    
    glad_glDeleteCommandListsNV(n,lists);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glDeleteCommandListsNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    GLboolean __cdecl glwrap_glIsCommandListNV(GLuint list)
    {
    
    GLboolean ret = glad_glIsCommandListNV(list);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glIsCommandListNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	return ret;
    }

    void __cdecl glwrap_glListDrawCommandsStatesClientNV(GLuint list, GLuint segment, const void** indirects, const GLsizei* sizes, const GLuint* states, const GLuint* fbos, GLuint count)
    {
    
    glad_glListDrawCommandsStatesClientNV(list,segment,indirects,sizes,states,fbos,count);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glListDrawCommandsStatesClientNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glCommandListSegmentsNV(GLuint list, GLuint segments)
    {
    
    glad_glCommandListSegmentsNV(list,segments);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glCommandListSegmentsNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glCompileCommandListNV(GLuint list)
    {
    
    glad_glCompileCommandListNV(list);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glCompileCommandListNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glCallCommandListNV(GLuint list)
    {
    
    glad_glCallCommandListNV(list);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glCallCommandListNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glBeginConditionalRenderNV(GLuint id, GLenum mode)
    {
    
    glad_glBeginConditionalRenderNV(id,mode);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glBeginConditionalRenderNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glEndConditionalRenderNV()
    {
    
    glad_glEndConditionalRenderNV();
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glEndConditionalRenderNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glSubpixelPrecisionBiasNV(GLuint xbits, GLuint ybits)
    {
    
    glad_glSubpixelPrecisionBiasNV(xbits,ybits);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glSubpixelPrecisionBiasNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glConservativeRasterParameterfNV(GLenum pname, GLfloat value)
    {
    
    glad_glConservativeRasterParameterfNV(pname,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glConservativeRasterParameterfNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glConservativeRasterParameteriNV(GLenum pname, GLint param)
    {
    
    glad_glConservativeRasterParameteriNV(pname,param);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glConservativeRasterParameteriNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glCopyImageSubDataNV(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth)
    {
    
    glad_glCopyImageSubDataNV(srcName,srcTarget,srcLevel,srcX,srcY,srcZ,dstName,dstTarget,dstLevel,dstX,dstY,dstZ,width,height,depth);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glCopyImageSubDataNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glDepthRangedNV(GLdouble zNear, GLdouble zFar)
    {
    
    glad_glDepthRangedNV(zNear,zFar);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glDepthRangedNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glClearDepthdNV(GLdouble depth)
    {
    
    glad_glClearDepthdNV(depth);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glClearDepthdNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glDepthBoundsdNV(GLdouble zmin, GLdouble zmax)
    {
    
    glad_glDepthBoundsdNV(zmin,zmax);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glDepthBoundsdNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glDrawTextureNV(GLuint texture, GLuint sampler, GLfloat x0, GLfloat y0, GLfloat x1, GLfloat y1, GLfloat z, GLfloat s0, GLfloat t0, GLfloat s1, GLfloat t1)
    {
    
    glad_glDrawTextureNV(texture,sampler,x0,y0,x1,y1,z,s0,t0,s1,t1);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glDrawTextureNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glDrawVkImageNV(GLuint64 vkImage, GLuint sampler, GLfloat x0, GLfloat y0, GLfloat x1, GLfloat y1, GLfloat z, GLfloat s0, GLfloat t0, GLfloat s1, GLfloat t1)
    {
    
    glad_glDrawVkImageNV(vkImage,sampler,x0,y0,x1,y1,z,s0,t0,s1,t1);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glDrawVkImageNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    GLVULKANPROCNV __cdecl glwrap_glGetVkProcAddrNV(const GLchar* name)
    {
    
    GLVULKANPROCNV ret = glad_glGetVkProcAddrNV(name);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetVkProcAddrNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	return ret;
    }

    void __cdecl glwrap_glWaitVkSemaphoreNV(GLuint64 vkSemaphore)
    {
    
    glad_glWaitVkSemaphoreNV(vkSemaphore);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glWaitVkSemaphoreNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glSignalVkSemaphoreNV(GLuint64 vkSemaphore)
    {
    
    glad_glSignalVkSemaphoreNV(vkSemaphore);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glSignalVkSemaphoreNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glSignalVkFenceNV(GLuint64 vkFence)
    {
    
    glad_glSignalVkFenceNV(vkFence);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glSignalVkFenceNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMapControlPointsNV(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLint uorder, GLint vorder, GLboolean packed, const void* points)
    {
    
    glad_glMapControlPointsNV(target,index,type,ustride,vstride,uorder,vorder,packed,points);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMapControlPointsNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMapParameterivNV(GLenum target, GLenum pname, const GLint* params)
    {
    
    glad_glMapParameterivNV(target,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMapParameterivNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMapParameterfvNV(GLenum target, GLenum pname, const GLfloat* params)
    {
    
    glad_glMapParameterfvNV(target,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMapParameterfvNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetMapControlPointsNV(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLboolean packed, void* points)
    {
    
    glad_glGetMapControlPointsNV(target,index,type,ustride,vstride,packed,points);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetMapControlPointsNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetMapParameterivNV(GLenum target, GLenum pname, GLint* params)
    {
    
    glad_glGetMapParameterivNV(target,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetMapParameterivNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetMapParameterfvNV(GLenum target, GLenum pname, GLfloat* params)
    {
    
    glad_glGetMapParameterfvNV(target,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetMapParameterfvNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetMapAttribParameterivNV(GLenum target, GLuint index, GLenum pname, GLint* params)
    {
    
    glad_glGetMapAttribParameterivNV(target,index,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetMapAttribParameterivNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetMapAttribParameterfvNV(GLenum target, GLuint index, GLenum pname, GLfloat* params)
    {
    
    glad_glGetMapAttribParameterfvNV(target,index,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetMapAttribParameterfvNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glEvalMapsNV(GLenum target, GLenum mode)
    {
    
    glad_glEvalMapsNV(target,mode);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glEvalMapsNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetMultisamplefvNV(GLenum pname, GLuint index, GLfloat* val)
    {
    
    glad_glGetMultisamplefvNV(pname,index,val);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetMultisamplefvNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glSampleMaskIndexedNV(GLuint index, GLbitfield mask)
    {
    
    glad_glSampleMaskIndexedNV(index,mask);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glSampleMaskIndexedNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTexRenderbufferNV(GLenum target, GLuint renderbuffer)
    {
    
    glad_glTexRenderbufferNV(target,renderbuffer);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTexRenderbufferNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glDeleteFencesNV(GLsizei n, const GLuint* fences)
    {
    
    glad_glDeleteFencesNV(n,fences);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glDeleteFencesNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGenFencesNV(GLsizei n, GLuint* fences)
    {
    
    glad_glGenFencesNV(n,fences);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGenFencesNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    GLboolean __cdecl glwrap_glIsFenceNV(GLuint fence)
    {
    
    GLboolean ret = glad_glIsFenceNV(fence);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glIsFenceNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	return ret;
    }

    GLboolean __cdecl glwrap_glTestFenceNV(GLuint fence)
    {
    
    GLboolean ret = glad_glTestFenceNV(fence);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTestFenceNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	return ret;
    }

    void __cdecl glwrap_glGetFenceivNV(GLuint fence, GLenum pname, GLint* params)
    {
    
    glad_glGetFenceivNV(fence,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetFenceivNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glFinishFenceNV(GLuint fence)
    {
    
    glad_glFinishFenceNV(fence);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glFinishFenceNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glSetFenceNV(GLuint fence, GLenum condition)
    {
    
    glad_glSetFenceNV(fence,condition);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glSetFenceNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glFragmentCoverageColorNV(GLuint color)
    {
    
    glad_glFragmentCoverageColorNV(color);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glFragmentCoverageColorNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramNamedParameter4fNV(GLuint id, GLsizei len, const GLubyte* name, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
    {
    
    glad_glProgramNamedParameter4fNV(id,len,name,x,y,z,w);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramNamedParameter4fNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramNamedParameter4fvNV(GLuint id, GLsizei len, const GLubyte* name, const GLfloat* v)
    {
    
    glad_glProgramNamedParameter4fvNV(id,len,name,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramNamedParameter4fvNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramNamedParameter4dNV(GLuint id, GLsizei len, const GLubyte* name, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
    {
    
    glad_glProgramNamedParameter4dNV(id,len,name,x,y,z,w);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramNamedParameter4dNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramNamedParameter4dvNV(GLuint id, GLsizei len, const GLubyte* name, const GLdouble* v)
    {
    
    glad_glProgramNamedParameter4dvNV(id,len,name,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramNamedParameter4dvNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetProgramNamedParameterfvNV(GLuint id, GLsizei len, const GLubyte* name, GLfloat* params)
    {
    
    glad_glGetProgramNamedParameterfvNV(id,len,name,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetProgramNamedParameterfvNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetProgramNamedParameterdvNV(GLuint id, GLsizei len, const GLubyte* name, GLdouble* params)
    {
    
    glad_glGetProgramNamedParameterdvNV(id,len,name,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetProgramNamedParameterdvNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glCoverageModulationTableNV(GLsizei n, const GLfloat* v)
    {
    
    glad_glCoverageModulationTableNV(n,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glCoverageModulationTableNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetCoverageModulationTableNV(GLsizei bufsize, GLfloat* v)
    {
    
    glad_glGetCoverageModulationTableNV(bufsize,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetCoverageModulationTableNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glCoverageModulationNV(GLenum components)
    {
    
    glad_glCoverageModulationNV(components);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glCoverageModulationNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glRenderbufferStorageMultisampleCoverageNV(GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height)
    {
    
    glad_glRenderbufferStorageMultisampleCoverageNV(target,coverageSamples,colorSamples,internalformat,width,height);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glRenderbufferStorageMultisampleCoverageNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramVertexLimitNV(GLenum target, GLint limit)
    {
    
    glad_glProgramVertexLimitNV(target,limit);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramVertexLimitNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glFramebufferTextureEXT(GLenum target, GLenum attachment, GLuint texture, GLint level)
    {
    
    glad_glFramebufferTextureEXT(target,attachment,texture,level);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glFramebufferTextureEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glFramebufferTextureFaceEXT(GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face)
    {
    
    glad_glFramebufferTextureFaceEXT(target,attachment,texture,level,face);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glFramebufferTextureFaceEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glRenderGpuMaskNV(GLbitfield mask)
    {
    
    glad_glRenderGpuMaskNV(mask);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glRenderGpuMaskNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMulticastBufferSubDataNV(GLbitfield gpuMask, GLuint buffer, GLintptr offset, GLsizeiptr size, const void* data)
    {
    
    glad_glMulticastBufferSubDataNV(gpuMask,buffer,offset,size,data);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMulticastBufferSubDataNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMulticastCopyBufferSubDataNV(GLuint readGpu, GLbitfield writeGpuMask, GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size)
    {
    
    glad_glMulticastCopyBufferSubDataNV(readGpu,writeGpuMask,readBuffer,writeBuffer,readOffset,writeOffset,size);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMulticastCopyBufferSubDataNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMulticastCopyImageSubDataNV(GLuint srcGpu, GLbitfield dstGpuMask, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth)
    {
    
    glad_glMulticastCopyImageSubDataNV(srcGpu,dstGpuMask,srcName,srcTarget,srcLevel,srcX,srcY,srcZ,dstName,dstTarget,dstLevel,dstX,dstY,dstZ,srcWidth,srcHeight,srcDepth);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMulticastCopyImageSubDataNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMulticastBlitFramebufferNV(GLuint srcGpu, GLuint dstGpu, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)
    {
    
    glad_glMulticastBlitFramebufferNV(srcGpu,dstGpu,srcX0,srcY0,srcX1,srcY1,dstX0,dstY0,dstX1,dstY1,mask,filter);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMulticastBlitFramebufferNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMulticastFramebufferSampleLocationsfvNV(GLuint gpu, GLuint framebuffer, GLuint start, GLsizei count, const GLfloat* v)
    {
    
    glad_glMulticastFramebufferSampleLocationsfvNV(gpu,framebuffer,start,count,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMulticastFramebufferSampleLocationsfvNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMulticastBarrierNV()
    {
    
    glad_glMulticastBarrierNV();
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMulticastBarrierNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMulticastWaitSyncNV(GLuint signalGpu, GLbitfield waitGpuMask)
    {
    
    glad_glMulticastWaitSyncNV(signalGpu,waitGpuMask);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMulticastWaitSyncNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMulticastGetQueryObjectivNV(GLuint gpu, GLuint id, GLenum pname, GLint* params)
    {
    
    glad_glMulticastGetQueryObjectivNV(gpu,id,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMulticastGetQueryObjectivNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMulticastGetQueryObjectuivNV(GLuint gpu, GLuint id, GLenum pname, GLuint* params)
    {
    
    glad_glMulticastGetQueryObjectuivNV(gpu,id,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMulticastGetQueryObjectuivNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMulticastGetQueryObjecti64vNV(GLuint gpu, GLuint id, GLenum pname, GLint64* params)
    {
    
    glad_glMulticastGetQueryObjecti64vNV(gpu,id,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMulticastGetQueryObjecti64vNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMulticastGetQueryObjectui64vNV(GLuint gpu, GLuint id, GLenum pname, GLuint64* params)
    {
    
    glad_glMulticastGetQueryObjectui64vNV(gpu,id,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMulticastGetQueryObjectui64vNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramLocalParameterI4iNV(GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w)
    {
    
    glad_glProgramLocalParameterI4iNV(target,index,x,y,z,w);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramLocalParameterI4iNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramLocalParameterI4ivNV(GLenum target, GLuint index, const GLint* params)
    {
    
    glad_glProgramLocalParameterI4ivNV(target,index,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramLocalParameterI4ivNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramLocalParametersI4ivNV(GLenum target, GLuint index, GLsizei count, const GLint* params)
    {
    
    glad_glProgramLocalParametersI4ivNV(target,index,count,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramLocalParametersI4ivNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramLocalParameterI4uiNV(GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)
    {
    
    glad_glProgramLocalParameterI4uiNV(target,index,x,y,z,w);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramLocalParameterI4uiNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramLocalParameterI4uivNV(GLenum target, GLuint index, const GLuint* params)
    {
    
    glad_glProgramLocalParameterI4uivNV(target,index,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramLocalParameterI4uivNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramLocalParametersI4uivNV(GLenum target, GLuint index, GLsizei count, const GLuint* params)
    {
    
    glad_glProgramLocalParametersI4uivNV(target,index,count,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramLocalParametersI4uivNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramEnvParameterI4iNV(GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w)
    {
    
    glad_glProgramEnvParameterI4iNV(target,index,x,y,z,w);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramEnvParameterI4iNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramEnvParameterI4ivNV(GLenum target, GLuint index, const GLint* params)
    {
    
    glad_glProgramEnvParameterI4ivNV(target,index,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramEnvParameterI4ivNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramEnvParametersI4ivNV(GLenum target, GLuint index, GLsizei count, const GLint* params)
    {
    
    glad_glProgramEnvParametersI4ivNV(target,index,count,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramEnvParametersI4ivNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramEnvParameterI4uiNV(GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)
    {
    
    glad_glProgramEnvParameterI4uiNV(target,index,x,y,z,w);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramEnvParameterI4uiNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramEnvParameterI4uivNV(GLenum target, GLuint index, const GLuint* params)
    {
    
    glad_glProgramEnvParameterI4uivNV(target,index,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramEnvParameterI4uivNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramEnvParametersI4uivNV(GLenum target, GLuint index, GLsizei count, const GLuint* params)
    {
    
    glad_glProgramEnvParametersI4uivNV(target,index,count,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramEnvParametersI4uivNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetProgramLocalParameterIivNV(GLenum target, GLuint index, GLint* params)
    {
    
    glad_glGetProgramLocalParameterIivNV(target,index,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetProgramLocalParameterIivNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetProgramLocalParameterIuivNV(GLenum target, GLuint index, GLuint* params)
    {
    
    glad_glGetProgramLocalParameterIuivNV(target,index,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetProgramLocalParameterIuivNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetProgramEnvParameterIivNV(GLenum target, GLuint index, GLint* params)
    {
    
    glad_glGetProgramEnvParameterIivNV(target,index,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetProgramEnvParameterIivNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetProgramEnvParameterIuivNV(GLenum target, GLuint index, GLuint* params)
    {
    
    glad_glGetProgramEnvParameterIuivNV(target,index,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetProgramEnvParameterIuivNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramSubroutineParametersuivNV(GLenum target, GLsizei count, const GLuint* params)
    {
    
    glad_glProgramSubroutineParametersuivNV(target,count,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramSubroutineParametersuivNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetProgramSubroutineParameteruivNV(GLenum target, GLuint index, GLuint* param)
    {
    
    glad_glGetProgramSubroutineParameteruivNV(target,index,param);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetProgramSubroutineParameteruivNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertex2hNV(GLhalfNV x, GLhalfNV y)
    {
    
    glad_glVertex2hNV(x,y);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertex2hNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertex2hvNV(const GLhalfNV* v)
    {
    
    glad_glVertex2hvNV(v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertex2hvNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertex3hNV(GLhalfNV x, GLhalfNV y, GLhalfNV z)
    {
    
    glad_glVertex3hNV(x,y,z);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertex3hNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertex3hvNV(const GLhalfNV* v)
    {
    
    glad_glVertex3hvNV(v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertex3hvNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertex4hNV(GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w)
    {
    
    glad_glVertex4hNV(x,y,z,w);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertex4hNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertex4hvNV(const GLhalfNV* v)
    {
    
    glad_glVertex4hvNV(v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertex4hvNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glNormal3hNV(GLhalfNV nx, GLhalfNV ny, GLhalfNV nz)
    {
    
    glad_glNormal3hNV(nx,ny,nz);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glNormal3hNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glNormal3hvNV(const GLhalfNV* v)
    {
    
    glad_glNormal3hvNV(v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glNormal3hvNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glColor3hNV(GLhalfNV red, GLhalfNV green, GLhalfNV blue)
    {
    
    glad_glColor3hNV(red,green,blue);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glColor3hNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glColor3hvNV(const GLhalfNV* v)
    {
    
    glad_glColor3hvNV(v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glColor3hvNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glColor4hNV(GLhalfNV red, GLhalfNV green, GLhalfNV blue, GLhalfNV alpha)
    {
    
    glad_glColor4hNV(red,green,blue,alpha);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glColor4hNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glColor4hvNV(const GLhalfNV* v)
    {
    
    glad_glColor4hvNV(v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glColor4hvNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTexCoord1hNV(GLhalfNV s)
    {
    
    glad_glTexCoord1hNV(s);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTexCoord1hNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTexCoord1hvNV(const GLhalfNV* v)
    {
    
    glad_glTexCoord1hvNV(v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTexCoord1hvNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTexCoord2hNV(GLhalfNV s, GLhalfNV t)
    {
    
    glad_glTexCoord2hNV(s,t);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTexCoord2hNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTexCoord2hvNV(const GLhalfNV* v)
    {
    
    glad_glTexCoord2hvNV(v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTexCoord2hvNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTexCoord3hNV(GLhalfNV s, GLhalfNV t, GLhalfNV r)
    {
    
    glad_glTexCoord3hNV(s,t,r);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTexCoord3hNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTexCoord3hvNV(const GLhalfNV* v)
    {
    
    glad_glTexCoord3hvNV(v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTexCoord3hvNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTexCoord4hNV(GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q)
    {
    
    glad_glTexCoord4hNV(s,t,r,q);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTexCoord4hNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTexCoord4hvNV(const GLhalfNV* v)
    {
    
    glad_glTexCoord4hvNV(v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTexCoord4hvNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMultiTexCoord1hNV(GLenum target, GLhalfNV s)
    {
    
    glad_glMultiTexCoord1hNV(target,s);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMultiTexCoord1hNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMultiTexCoord1hvNV(GLenum target, const GLhalfNV* v)
    {
    
    glad_glMultiTexCoord1hvNV(target,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMultiTexCoord1hvNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMultiTexCoord2hNV(GLenum target, GLhalfNV s, GLhalfNV t)
    {
    
    glad_glMultiTexCoord2hNV(target,s,t);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMultiTexCoord2hNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMultiTexCoord2hvNV(GLenum target, const GLhalfNV* v)
    {
    
    glad_glMultiTexCoord2hvNV(target,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMultiTexCoord2hvNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMultiTexCoord3hNV(GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r)
    {
    
    glad_glMultiTexCoord3hNV(target,s,t,r);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMultiTexCoord3hNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMultiTexCoord3hvNV(GLenum target, const GLhalfNV* v)
    {
    
    glad_glMultiTexCoord3hvNV(target,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMultiTexCoord3hvNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMultiTexCoord4hNV(GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q)
    {
    
    glad_glMultiTexCoord4hNV(target,s,t,r,q);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMultiTexCoord4hNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMultiTexCoord4hvNV(GLenum target, const GLhalfNV* v)
    {
    
    glad_glMultiTexCoord4hvNV(target,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMultiTexCoord4hvNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glFogCoordhNV(GLhalfNV fog)
    {
    
    glad_glFogCoordhNV(fog);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glFogCoordhNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glFogCoordhvNV(const GLhalfNV* fog)
    {
    
    glad_glFogCoordhvNV(fog);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glFogCoordhvNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glSecondaryColor3hNV(GLhalfNV red, GLhalfNV green, GLhalfNV blue)
    {
    
    glad_glSecondaryColor3hNV(red,green,blue);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glSecondaryColor3hNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glSecondaryColor3hvNV(const GLhalfNV* v)
    {
    
    glad_glSecondaryColor3hvNV(v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glSecondaryColor3hvNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexWeighthNV(GLhalfNV weight)
    {
    
    glad_glVertexWeighthNV(weight);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexWeighthNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexWeighthvNV(const GLhalfNV* weight)
    {
    
    glad_glVertexWeighthvNV(weight);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexWeighthvNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttrib1hNV(GLuint index, GLhalfNV x)
    {
    
    glad_glVertexAttrib1hNV(index,x);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttrib1hNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttrib1hvNV(GLuint index, const GLhalfNV* v)
    {
    
    glad_glVertexAttrib1hvNV(index,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttrib1hvNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttrib2hNV(GLuint index, GLhalfNV x, GLhalfNV y)
    {
    
    glad_glVertexAttrib2hNV(index,x,y);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttrib2hNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttrib2hvNV(GLuint index, const GLhalfNV* v)
    {
    
    glad_glVertexAttrib2hvNV(index,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttrib2hvNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttrib3hNV(GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z)
    {
    
    glad_glVertexAttrib3hNV(index,x,y,z);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttrib3hNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttrib3hvNV(GLuint index, const GLhalfNV* v)
    {
    
    glad_glVertexAttrib3hvNV(index,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttrib3hvNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttrib4hNV(GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w)
    {
    
    glad_glVertexAttrib4hNV(index,x,y,z,w);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttrib4hNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttrib4hvNV(GLuint index, const GLhalfNV* v)
    {
    
    glad_glVertexAttrib4hvNV(index,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttrib4hvNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttribs1hvNV(GLuint index, GLsizei n, const GLhalfNV* v)
    {
    
    glad_glVertexAttribs1hvNV(index,n,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttribs1hvNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttribs2hvNV(GLuint index, GLsizei n, const GLhalfNV* v)
    {
    
    glad_glVertexAttribs2hvNV(index,n,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttribs2hvNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttribs3hvNV(GLuint index, GLsizei n, const GLhalfNV* v)
    {
    
    glad_glVertexAttribs3hvNV(index,n,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttribs3hvNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttribs4hvNV(GLuint index, GLsizei n, const GLhalfNV* v)
    {
    
    glad_glVertexAttribs4hvNV(index,n,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttribs4hvNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetInternalformatSampleivNV(GLenum target, GLenum internalformat, GLsizei samples, GLenum pname, GLsizei bufSize, GLint* params)
    {
    
    glad_glGetInternalformatSampleivNV(target,internalformat,samples,pname,bufSize,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetInternalformatSampleivNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetMemoryObjectDetachedResourcesuivNV(GLuint memory, GLenum pname, GLint first, GLsizei count, GLuint* params)
    {
    
    glad_glGetMemoryObjectDetachedResourcesuivNV(memory,pname,first,count,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetMemoryObjectDetachedResourcesuivNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glResetMemoryObjectParameterNV(GLuint memory, GLenum pname)
    {
    
    glad_glResetMemoryObjectParameterNV(memory,pname);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glResetMemoryObjectParameterNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTexAttachMemoryNV(GLenum target, GLuint memory, GLuint64 offset)
    {
    
    glad_glTexAttachMemoryNV(target,memory,offset);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTexAttachMemoryNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glBufferAttachMemoryNV(GLenum target, GLuint memory, GLuint64 offset)
    {
    
    glad_glBufferAttachMemoryNV(target,memory,offset);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glBufferAttachMemoryNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTextureAttachMemoryNV(GLuint texture, GLuint memory, GLuint64 offset)
    {
    
    glad_glTextureAttachMemoryNV(texture,memory,offset);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTextureAttachMemoryNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glNamedBufferAttachMemoryNV(GLuint buffer, GLuint memory, GLuint64 offset)
    {
    
    glad_glNamedBufferAttachMemoryNV(buffer,memory,offset);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glNamedBufferAttachMemoryNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glDrawMeshTasksNV(GLuint first, GLuint count)
    {
    
    glad_glDrawMeshTasksNV(first,count);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glDrawMeshTasksNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glDrawMeshTasksIndirectNV(GLintptr indirect)
    {
    
    glad_glDrawMeshTasksIndirectNV(indirect);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glDrawMeshTasksIndirectNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMultiDrawMeshTasksIndirectNV(GLintptr indirect, GLsizei drawcount, GLsizei stride)
    {
    
    glad_glMultiDrawMeshTasksIndirectNV(indirect,drawcount,stride);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMultiDrawMeshTasksIndirectNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMultiDrawMeshTasksIndirectCountNV(GLintptr indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride)
    {
    
    glad_glMultiDrawMeshTasksIndirectCountNV(indirect,drawcount,maxdrawcount,stride);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMultiDrawMeshTasksIndirectCountNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGenOcclusionQueriesNV(GLsizei n, GLuint* ids)
    {
    
    glad_glGenOcclusionQueriesNV(n,ids);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGenOcclusionQueriesNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glDeleteOcclusionQueriesNV(GLsizei n, const GLuint* ids)
    {
    
    glad_glDeleteOcclusionQueriesNV(n,ids);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glDeleteOcclusionQueriesNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    GLboolean __cdecl glwrap_glIsOcclusionQueryNV(GLuint id)
    {
    
    GLboolean ret = glad_glIsOcclusionQueryNV(id);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glIsOcclusionQueryNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	return ret;
    }

    void __cdecl glwrap_glBeginOcclusionQueryNV(GLuint id)
    {
    
    glad_glBeginOcclusionQueryNV(id);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glBeginOcclusionQueryNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glEndOcclusionQueryNV()
    {
    
    glad_glEndOcclusionQueryNV();
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glEndOcclusionQueryNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetOcclusionQueryivNV(GLuint id, GLenum pname, GLint* params)
    {
    
    glad_glGetOcclusionQueryivNV(id,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetOcclusionQueryivNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetOcclusionQueryuivNV(GLuint id, GLenum pname, GLuint* params)
    {
    
    glad_glGetOcclusionQueryuivNV(id,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetOcclusionQueryuivNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramBufferParametersfvNV(GLenum target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, const GLfloat* params)
    {
    
    glad_glProgramBufferParametersfvNV(target,bindingIndex,wordIndex,count,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramBufferParametersfvNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramBufferParametersIivNV(GLenum target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, const GLint* params)
    {
    
    glad_glProgramBufferParametersIivNV(target,bindingIndex,wordIndex,count,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramBufferParametersIivNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramBufferParametersIuivNV(GLenum target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, const GLuint* params)
    {
    
    glad_glProgramBufferParametersIuivNV(target,bindingIndex,wordIndex,count,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramBufferParametersIuivNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    GLuint __cdecl glwrap_glGenPathsNV(GLsizei range)
    {
    
    GLuint ret = glad_glGenPathsNV(range);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGenPathsNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	return ret;
    }

    void __cdecl glwrap_glDeletePathsNV(GLuint path, GLsizei range)
    {
    
    glad_glDeletePathsNV(path,range);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glDeletePathsNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    GLboolean __cdecl glwrap_glIsPathNV(GLuint path)
    {
    
    GLboolean ret = glad_glIsPathNV(path);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glIsPathNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	return ret;
    }

    void __cdecl glwrap_glPathCommandsNV(GLuint path, GLsizei numCommands, const GLubyte* commands, GLsizei numCoords, GLenum coordType, const void* coords)
    {
    
    glad_glPathCommandsNV(path,numCommands,commands,numCoords,coordType,coords);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glPathCommandsNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glPathCoordsNV(GLuint path, GLsizei numCoords, GLenum coordType, const void* coords)
    {
    
    glad_glPathCoordsNV(path,numCoords,coordType,coords);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glPathCoordsNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glPathSubCommandsNV(GLuint path, GLsizei commandStart, GLsizei commandsToDelete, GLsizei numCommands, const GLubyte* commands, GLsizei numCoords, GLenum coordType, const void* coords)
    {
    
    glad_glPathSubCommandsNV(path,commandStart,commandsToDelete,numCommands,commands,numCoords,coordType,coords);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glPathSubCommandsNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glPathSubCoordsNV(GLuint path, GLsizei coordStart, GLsizei numCoords, GLenum coordType, const void* coords)
    {
    
    glad_glPathSubCoordsNV(path,coordStart,numCoords,coordType,coords);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glPathSubCoordsNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glPathStringNV(GLuint path, GLenum format, GLsizei length, const void* pathString)
    {
    
    glad_glPathStringNV(path,format,length,pathString);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glPathStringNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glPathGlyphsNV(GLuint firstPathName, GLenum fontTarget, const void* fontName, GLbitfield fontStyle, GLsizei numGlyphs, GLenum type, const void* charcodes, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale)
    {
    
    glad_glPathGlyphsNV(firstPathName,fontTarget,fontName,fontStyle,numGlyphs,type,charcodes,handleMissingGlyphs,pathParameterTemplate,emScale);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glPathGlyphsNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glPathGlyphRangeNV(GLuint firstPathName, GLenum fontTarget, const void* fontName, GLbitfield fontStyle, GLuint firstGlyph, GLsizei numGlyphs, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale)
    {
    
    glad_glPathGlyphRangeNV(firstPathName,fontTarget,fontName,fontStyle,firstGlyph,numGlyphs,handleMissingGlyphs,pathParameterTemplate,emScale);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glPathGlyphRangeNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glWeightPathsNV(GLuint resultPath, GLsizei numPaths, const GLuint* paths, const GLfloat* weights)
    {
    
    glad_glWeightPathsNV(resultPath,numPaths,paths,weights);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glWeightPathsNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glCopyPathNV(GLuint resultPath, GLuint srcPath)
    {
    
    glad_glCopyPathNV(resultPath,srcPath);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glCopyPathNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glInterpolatePathsNV(GLuint resultPath, GLuint pathA, GLuint pathB, GLfloat weight)
    {
    
    glad_glInterpolatePathsNV(resultPath,pathA,pathB,weight);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glInterpolatePathsNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTransformPathNV(GLuint resultPath, GLuint srcPath, GLenum transformType, const GLfloat* transformValues)
    {
    
    glad_glTransformPathNV(resultPath,srcPath,transformType,transformValues);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTransformPathNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glPathParameterivNV(GLuint path, GLenum pname, const GLint* value)
    {
    
    glad_glPathParameterivNV(path,pname,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glPathParameterivNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glPathParameteriNV(GLuint path, GLenum pname, GLint value)
    {
    
    glad_glPathParameteriNV(path,pname,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glPathParameteriNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glPathParameterfvNV(GLuint path, GLenum pname, const GLfloat* value)
    {
    
    glad_glPathParameterfvNV(path,pname,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glPathParameterfvNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glPathParameterfNV(GLuint path, GLenum pname, GLfloat value)
    {
    
    glad_glPathParameterfNV(path,pname,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glPathParameterfNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glPathDashArrayNV(GLuint path, GLsizei dashCount, const GLfloat* dashArray)
    {
    
    glad_glPathDashArrayNV(path,dashCount,dashArray);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glPathDashArrayNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glPathStencilFuncNV(GLenum func, GLint ref, GLuint mask)
    {
    
    glad_glPathStencilFuncNV(func,ref,mask);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glPathStencilFuncNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glPathStencilDepthOffsetNV(GLfloat factor, GLfloat units)
    {
    
    glad_glPathStencilDepthOffsetNV(factor,units);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glPathStencilDepthOffsetNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glStencilFillPathNV(GLuint path, GLenum fillMode, GLuint mask)
    {
    
    glad_glStencilFillPathNV(path,fillMode,mask);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glStencilFillPathNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glStencilStrokePathNV(GLuint path, GLint reference, GLuint mask)
    {
    
    glad_glStencilStrokePathNV(path,reference,mask);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glStencilStrokePathNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glStencilFillPathInstancedNV(GLsizei numPaths, GLenum pathNameType, const void* paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum transformType, const GLfloat* transformValues)
    {
    
    glad_glStencilFillPathInstancedNV(numPaths,pathNameType,paths,pathBase,fillMode,mask,transformType,transformValues);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glStencilFillPathInstancedNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glStencilStrokePathInstancedNV(GLsizei numPaths, GLenum pathNameType, const void* paths, GLuint pathBase, GLint reference, GLuint mask, GLenum transformType, const GLfloat* transformValues)
    {
    
    glad_glStencilStrokePathInstancedNV(numPaths,pathNameType,paths,pathBase,reference,mask,transformType,transformValues);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glStencilStrokePathInstancedNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glPathCoverDepthFuncNV(GLenum func)
    {
    
    glad_glPathCoverDepthFuncNV(func);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glPathCoverDepthFuncNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glCoverFillPathNV(GLuint path, GLenum coverMode)
    {
    
    glad_glCoverFillPathNV(path,coverMode);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glCoverFillPathNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glCoverStrokePathNV(GLuint path, GLenum coverMode)
    {
    
    glad_glCoverStrokePathNV(path,coverMode);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glCoverStrokePathNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glCoverFillPathInstancedNV(GLsizei numPaths, GLenum pathNameType, const void* paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat* transformValues)
    {
    
    glad_glCoverFillPathInstancedNV(numPaths,pathNameType,paths,pathBase,coverMode,transformType,transformValues);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glCoverFillPathInstancedNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glCoverStrokePathInstancedNV(GLsizei numPaths, GLenum pathNameType, const void* paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat* transformValues)
    {
    
    glad_glCoverStrokePathInstancedNV(numPaths,pathNameType,paths,pathBase,coverMode,transformType,transformValues);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glCoverStrokePathInstancedNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetPathParameterivNV(GLuint path, GLenum pname, GLint* value)
    {
    
    glad_glGetPathParameterivNV(path,pname,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetPathParameterivNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetPathParameterfvNV(GLuint path, GLenum pname, GLfloat* value)
    {
    
    glad_glGetPathParameterfvNV(path,pname,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetPathParameterfvNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetPathCommandsNV(GLuint path, GLubyte* commands)
    {
    
    glad_glGetPathCommandsNV(path,commands);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetPathCommandsNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetPathCoordsNV(GLuint path, GLfloat* coords)
    {
    
    glad_glGetPathCoordsNV(path,coords);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetPathCoordsNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetPathDashArrayNV(GLuint path, GLfloat* dashArray)
    {
    
    glad_glGetPathDashArrayNV(path,dashArray);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetPathDashArrayNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetPathMetricsNV(GLbitfield metricQueryMask, GLsizei numPaths, GLenum pathNameType, const void* paths, GLuint pathBase, GLsizei stride, GLfloat* metrics)
    {
    
    glad_glGetPathMetricsNV(metricQueryMask,numPaths,pathNameType,paths,pathBase,stride,metrics);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetPathMetricsNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetPathMetricRangeNV(GLbitfield metricQueryMask, GLuint firstPathName, GLsizei numPaths, GLsizei stride, GLfloat* metrics)
    {
    
    glad_glGetPathMetricRangeNV(metricQueryMask,firstPathName,numPaths,stride,metrics);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetPathMetricRangeNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetPathSpacingNV(GLenum pathListMode, GLsizei numPaths, GLenum pathNameType, const void* paths, GLuint pathBase, GLfloat advanceScale, GLfloat kerningScale, GLenum transformType, GLfloat* returnedSpacing)
    {
    
    glad_glGetPathSpacingNV(pathListMode,numPaths,pathNameType,paths,pathBase,advanceScale,kerningScale,transformType,returnedSpacing);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetPathSpacingNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    GLboolean __cdecl glwrap_glIsPointInFillPathNV(GLuint path, GLuint mask, GLfloat x, GLfloat y)
    {
    
    GLboolean ret = glad_glIsPointInFillPathNV(path,mask,x,y);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glIsPointInFillPathNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	return ret;
    }

    GLboolean __cdecl glwrap_glIsPointInStrokePathNV(GLuint path, GLfloat x, GLfloat y)
    {
    
    GLboolean ret = glad_glIsPointInStrokePathNV(path,x,y);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glIsPointInStrokePathNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	return ret;
    }

    GLfloat __cdecl glwrap_glGetPathLengthNV(GLuint path, GLsizei startSegment, GLsizei numSegments)
    {
    
    GLfloat ret = glad_glGetPathLengthNV(path,startSegment,numSegments);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetPathLengthNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	return ret;
    }

    GLboolean __cdecl glwrap_glPointAlongPathNV(GLuint path, GLsizei startSegment, GLsizei numSegments, GLfloat distance, GLfloat* x, GLfloat* y, GLfloat* tangentX, GLfloat* tangentY)
    {
    
    GLboolean ret = glad_glPointAlongPathNV(path,startSegment,numSegments,distance,x,y,tangentX,tangentY);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glPointAlongPathNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	return ret;
    }

    void __cdecl glwrap_glMatrixLoad3x2fNV(GLenum matrixMode, const GLfloat* m)
    {
    
    glad_glMatrixLoad3x2fNV(matrixMode,m);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMatrixLoad3x2fNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMatrixLoad3x3fNV(GLenum matrixMode, const GLfloat* m)
    {
    
    glad_glMatrixLoad3x3fNV(matrixMode,m);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMatrixLoad3x3fNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMatrixLoadTranspose3x3fNV(GLenum matrixMode, const GLfloat* m)
    {
    
    glad_glMatrixLoadTranspose3x3fNV(matrixMode,m);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMatrixLoadTranspose3x3fNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMatrixMult3x2fNV(GLenum matrixMode, const GLfloat* m)
    {
    
    glad_glMatrixMult3x2fNV(matrixMode,m);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMatrixMult3x2fNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMatrixMult3x3fNV(GLenum matrixMode, const GLfloat* m)
    {
    
    glad_glMatrixMult3x3fNV(matrixMode,m);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMatrixMult3x3fNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMatrixMultTranspose3x3fNV(GLenum matrixMode, const GLfloat* m)
    {
    
    glad_glMatrixMultTranspose3x3fNV(matrixMode,m);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMatrixMultTranspose3x3fNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glStencilThenCoverFillPathNV(GLuint path, GLenum fillMode, GLuint mask, GLenum coverMode)
    {
    
    glad_glStencilThenCoverFillPathNV(path,fillMode,mask,coverMode);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glStencilThenCoverFillPathNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glStencilThenCoverStrokePathNV(GLuint path, GLint reference, GLuint mask, GLenum coverMode)
    {
    
    glad_glStencilThenCoverStrokePathNV(path,reference,mask,coverMode);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glStencilThenCoverStrokePathNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glStencilThenCoverFillPathInstancedNV(GLsizei numPaths, GLenum pathNameType, const void* paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum coverMode, GLenum transformType, const GLfloat* transformValues)
    {
    
    glad_glStencilThenCoverFillPathInstancedNV(numPaths,pathNameType,paths,pathBase,fillMode,mask,coverMode,transformType,transformValues);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glStencilThenCoverFillPathInstancedNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glStencilThenCoverStrokePathInstancedNV(GLsizei numPaths, GLenum pathNameType, const void* paths, GLuint pathBase, GLint reference, GLuint mask, GLenum coverMode, GLenum transformType, const GLfloat* transformValues)
    {
    
    glad_glStencilThenCoverStrokePathInstancedNV(numPaths,pathNameType,paths,pathBase,reference,mask,coverMode,transformType,transformValues);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glStencilThenCoverStrokePathInstancedNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    GLenum __cdecl glwrap_glPathGlyphIndexRangeNV(GLenum fontTarget, const void* fontName, GLbitfield fontStyle, GLuint pathParameterTemplate, GLfloat emScale, GLuint baseAndCount[2])
    {
    
    GLenum ret = glad_glPathGlyphIndexRangeNV(fontTarget,fontName,fontStyle,pathParameterTemplate,emScale,baseAndCount);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glPathGlyphIndexRangeNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	return ret;
    }

    GLenum __cdecl glwrap_glPathGlyphIndexArrayNV(GLuint firstPathName, GLenum fontTarget, const void* fontName, GLbitfield fontStyle, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale)
    {
    
    GLenum ret = glad_glPathGlyphIndexArrayNV(firstPathName,fontTarget,fontName,fontStyle,firstGlyphIndex,numGlyphs,pathParameterTemplate,emScale);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glPathGlyphIndexArrayNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	return ret;
    }

    GLenum __cdecl glwrap_glPathMemoryGlyphIndexArrayNV(GLuint firstPathName, GLenum fontTarget, GLsizeiptr fontSize, const void* fontData, GLsizei faceIndex, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale)
    {
    
    GLenum ret = glad_glPathMemoryGlyphIndexArrayNV(firstPathName,fontTarget,fontSize,fontData,faceIndex,firstGlyphIndex,numGlyphs,pathParameterTemplate,emScale);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glPathMemoryGlyphIndexArrayNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	return ret;
    }

    void __cdecl glwrap_glProgramPathFragmentInputGenNV(GLuint program, GLint location, GLenum genMode, GLint components, const GLfloat* coeffs)
    {
    
    glad_glProgramPathFragmentInputGenNV(program,location,genMode,components,coeffs);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramPathFragmentInputGenNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetProgramResourcefvNV(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum* props, GLsizei bufSize, GLsizei* length, GLfloat* params)
    {
    
    glad_glGetProgramResourcefvNV(program,programInterface,index,propCount,props,bufSize,length,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetProgramResourcefvNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glPathColorGenNV(GLenum color, GLenum genMode, GLenum colorFormat, const GLfloat* coeffs)
    {
    
    glad_glPathColorGenNV(color,genMode,colorFormat,coeffs);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glPathColorGenNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glPathTexGenNV(GLenum texCoordSet, GLenum genMode, GLint components, const GLfloat* coeffs)
    {
    
    glad_glPathTexGenNV(texCoordSet,genMode,components,coeffs);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glPathTexGenNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glPathFogGenNV(GLenum genMode)
    {
    
    glad_glPathFogGenNV(genMode);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glPathFogGenNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetPathColorGenivNV(GLenum color, GLenum pname, GLint* value)
    {
    
    glad_glGetPathColorGenivNV(color,pname,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetPathColorGenivNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetPathColorGenfvNV(GLenum color, GLenum pname, GLfloat* value)
    {
    
    glad_glGetPathColorGenfvNV(color,pname,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetPathColorGenfvNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetPathTexGenivNV(GLenum texCoordSet, GLenum pname, GLint* value)
    {
    
    glad_glGetPathTexGenivNV(texCoordSet,pname,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetPathTexGenivNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetPathTexGenfvNV(GLenum texCoordSet, GLenum pname, GLfloat* value)
    {
    
    glad_glGetPathTexGenfvNV(texCoordSet,pname,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetPathTexGenfvNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glPixelDataRangeNV(GLenum target, GLsizei length, const void* pointer)
    {
    
    glad_glPixelDataRangeNV(target,length,pointer);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glPixelDataRangeNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glFlushPixelDataRangeNV(GLenum target)
    {
    
    glad_glFlushPixelDataRangeNV(target);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glFlushPixelDataRangeNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glPointParameteriNV(GLenum pname, GLint param)
    {
    
    glad_glPointParameteriNV(pname,param);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glPointParameteriNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glPointParameterivNV(GLenum pname, const GLint* params)
    {
    
    glad_glPointParameterivNV(pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glPointParameterivNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glPresentFrameKeyedNV(GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLuint key0, GLenum target1, GLuint fill1, GLuint key1)
    {
    
    glad_glPresentFrameKeyedNV(video_slot,minPresentTime,beginPresentTimeId,presentDurationId,type,target0,fill0,key0,target1,fill1,key1);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glPresentFrameKeyedNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glPresentFrameDualFillNV(GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLenum target1, GLuint fill1, GLenum target2, GLuint fill2, GLenum target3, GLuint fill3)
    {
    
    glad_glPresentFrameDualFillNV(video_slot,minPresentTime,beginPresentTimeId,presentDurationId,type,target0,fill0,target1,fill1,target2,fill2,target3,fill3);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glPresentFrameDualFillNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetVideoivNV(GLuint video_slot, GLenum pname, GLint* params)
    {
    
    glad_glGetVideoivNV(video_slot,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetVideoivNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetVideouivNV(GLuint video_slot, GLenum pname, GLuint* params)
    {
    
    glad_glGetVideouivNV(video_slot,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetVideouivNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetVideoi64vNV(GLuint video_slot, GLenum pname, GLint64EXT* params)
    {
    
    glad_glGetVideoi64vNV(video_slot,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetVideoi64vNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetVideoui64vNV(GLuint video_slot, GLenum pname, GLuint64EXT* params)
    {
    
    glad_glGetVideoui64vNV(video_slot,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetVideoui64vNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glPrimitiveRestartNV()
    {
    
    glad_glPrimitiveRestartNV();
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glPrimitiveRestartNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glPrimitiveRestartIndexNV(GLuint index)
    {
    
    glad_glPrimitiveRestartIndexNV(index);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glPrimitiveRestartIndexNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    GLint __cdecl glwrap_glQueryResourceNV(GLenum queryType, GLint tagId, GLuint bufSize, GLint* buffer)
    {
    
    GLint ret = glad_glQueryResourceNV(queryType,tagId,bufSize,buffer);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glQueryResourceNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	return ret;
    }

    void __cdecl glwrap_glGenQueryResourceTagNV(GLsizei n, GLint* tagIds)
    {
    
    glad_glGenQueryResourceTagNV(n,tagIds);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGenQueryResourceTagNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glDeleteQueryResourceTagNV(GLsizei n, const GLint* tagIds)
    {
    
    glad_glDeleteQueryResourceTagNV(n,tagIds);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glDeleteQueryResourceTagNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glQueryResourceTagNV(GLint tagId, const GLchar* tagString)
    {
    
    glad_glQueryResourceTagNV(tagId,tagString);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glQueryResourceTagNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glCombinerParameterfvNV(GLenum pname, const GLfloat* params)
    {
    
    glad_glCombinerParameterfvNV(pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glCombinerParameterfvNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glCombinerParameterfNV(GLenum pname, GLfloat param)
    {
    
    glad_glCombinerParameterfNV(pname,param);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glCombinerParameterfNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glCombinerParameterivNV(GLenum pname, const GLint* params)
    {
    
    glad_glCombinerParameterivNV(pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glCombinerParameterivNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glCombinerParameteriNV(GLenum pname, GLint param)
    {
    
    glad_glCombinerParameteriNV(pname,param);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glCombinerParameteriNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glCombinerInputNV(GLenum stage, GLenum portion, GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage)
    {
    
    glad_glCombinerInputNV(stage,portion,variable,input,mapping,componentUsage);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glCombinerInputNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glCombinerOutputNV(GLenum stage, GLenum portion, GLenum abOutput, GLenum cdOutput, GLenum sumOutput, GLenum scale, GLenum bias, GLboolean abDotProduct, GLboolean cdDotProduct, GLboolean muxSum)
    {
    
    glad_glCombinerOutputNV(stage,portion,abOutput,cdOutput,sumOutput,scale,bias,abDotProduct,cdDotProduct,muxSum);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glCombinerOutputNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glFinalCombinerInputNV(GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage)
    {
    
    glad_glFinalCombinerInputNV(variable,input,mapping,componentUsage);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glFinalCombinerInputNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetCombinerInputParameterfvNV(GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLfloat* params)
    {
    
    glad_glGetCombinerInputParameterfvNV(stage,portion,variable,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetCombinerInputParameterfvNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetCombinerInputParameterivNV(GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLint* params)
    {
    
    glad_glGetCombinerInputParameterivNV(stage,portion,variable,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetCombinerInputParameterivNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetCombinerOutputParameterfvNV(GLenum stage, GLenum portion, GLenum pname, GLfloat* params)
    {
    
    glad_glGetCombinerOutputParameterfvNV(stage,portion,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetCombinerOutputParameterfvNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetCombinerOutputParameterivNV(GLenum stage, GLenum portion, GLenum pname, GLint* params)
    {
    
    glad_glGetCombinerOutputParameterivNV(stage,portion,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetCombinerOutputParameterivNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetFinalCombinerInputParameterfvNV(GLenum variable, GLenum pname, GLfloat* params)
    {
    
    glad_glGetFinalCombinerInputParameterfvNV(variable,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetFinalCombinerInputParameterfvNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetFinalCombinerInputParameterivNV(GLenum variable, GLenum pname, GLint* params)
    {
    
    glad_glGetFinalCombinerInputParameterivNV(variable,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetFinalCombinerInputParameterivNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glCombinerStageParameterfvNV(GLenum stage, GLenum pname, const GLfloat* params)
    {
    
    glad_glCombinerStageParameterfvNV(stage,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glCombinerStageParameterfvNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetCombinerStageParameterfvNV(GLenum stage, GLenum pname, GLfloat* params)
    {
    
    glad_glGetCombinerStageParameterfvNV(stage,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetCombinerStageParameterfvNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glFramebufferSampleLocationsfvNV(GLenum target, GLuint start, GLsizei count, const GLfloat* v)
    {
    
    glad_glFramebufferSampleLocationsfvNV(target,start,count,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glFramebufferSampleLocationsfvNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glNamedFramebufferSampleLocationsfvNV(GLuint framebuffer, GLuint start, GLsizei count, const GLfloat* v)
    {
    
    glad_glNamedFramebufferSampleLocationsfvNV(framebuffer,start,count,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glNamedFramebufferSampleLocationsfvNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glResolveDepthValuesNV()
    {
    
    glad_glResolveDepthValuesNV();
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glResolveDepthValuesNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glScissorExclusiveNV(GLint x, GLint y, GLsizei width, GLsizei height)
    {
    
    glad_glScissorExclusiveNV(x,y,width,height);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glScissorExclusiveNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glScissorExclusiveArrayvNV(GLuint first, GLsizei count, const GLint* v)
    {
    
    glad_glScissorExclusiveArrayvNV(first,count,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glScissorExclusiveArrayvNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMakeBufferResidentNV(GLenum target, GLenum access)
    {
    
    glad_glMakeBufferResidentNV(target,access);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMakeBufferResidentNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMakeBufferNonResidentNV(GLenum target)
    {
    
    glad_glMakeBufferNonResidentNV(target);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMakeBufferNonResidentNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    GLboolean __cdecl glwrap_glIsBufferResidentNV(GLenum target)
    {
    
    GLboolean ret = glad_glIsBufferResidentNV(target);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glIsBufferResidentNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	return ret;
    }

    void __cdecl glwrap_glMakeNamedBufferResidentNV(GLuint buffer, GLenum access)
    {
    
    glad_glMakeNamedBufferResidentNV(buffer,access);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMakeNamedBufferResidentNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glMakeNamedBufferNonResidentNV(GLuint buffer)
    {
    
    glad_glMakeNamedBufferNonResidentNV(buffer);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glMakeNamedBufferNonResidentNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    GLboolean __cdecl glwrap_glIsNamedBufferResidentNV(GLuint buffer)
    {
    
    GLboolean ret = glad_glIsNamedBufferResidentNV(buffer);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glIsNamedBufferResidentNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	return ret;
    }

    void __cdecl glwrap_glGetBufferParameterui64vNV(GLenum target, GLenum pname, GLuint64EXT* params)
    {
    
    glad_glGetBufferParameterui64vNV(target,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetBufferParameterui64vNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetNamedBufferParameterui64vNV(GLuint buffer, GLenum pname, GLuint64EXT* params)
    {
    
    glad_glGetNamedBufferParameterui64vNV(buffer,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetNamedBufferParameterui64vNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetIntegerui64vNV(GLenum value, GLuint64EXT* result)
    {
    
    glad_glGetIntegerui64vNV(value,result);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetIntegerui64vNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glUniformui64NV(GLint location, GLuint64EXT value)
    {
    
    glad_glUniformui64NV(location,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glUniformui64NV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glUniformui64vNV(GLint location, GLsizei count, const GLuint64EXT* value)
    {
    
    glad_glUniformui64vNV(location,count,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glUniformui64vNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramUniformui64NV(GLuint program, GLint location, GLuint64EXT value)
    {
    
    glad_glProgramUniformui64NV(program,location,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramUniformui64NV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramUniformui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT* value)
    {
    
    glad_glProgramUniformui64vNV(program,location,count,value);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramUniformui64vNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glBindShadingRateImageNV(GLuint texture)
    {
    
    glad_glBindShadingRateImageNV(texture);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glBindShadingRateImageNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetShadingRateImagePaletteNV(GLuint viewport, GLuint entry, GLenum* rate)
    {
    
    glad_glGetShadingRateImagePaletteNV(viewport,entry,rate);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetShadingRateImagePaletteNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetShadingRateSampleLocationivNV(GLenum rate, GLuint samples, GLuint index, GLint* location)
    {
    
    glad_glGetShadingRateSampleLocationivNV(rate,samples,index,location);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetShadingRateSampleLocationivNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glShadingRateImageBarrierNV(GLboolean synchronize)
    {
    
    glad_glShadingRateImageBarrierNV(synchronize);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glShadingRateImageBarrierNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glShadingRateImagePaletteNV(GLuint viewport, GLuint first, GLsizei count, const GLenum* rates)
    {
    
    glad_glShadingRateImagePaletteNV(viewport,first,count,rates);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glShadingRateImagePaletteNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glShadingRateSampleOrderNV(GLenum order)
    {
    
    glad_glShadingRateSampleOrderNV(order);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glShadingRateSampleOrderNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glShadingRateSampleOrderCustomNV(GLenum rate, GLuint samples, const GLint* locations)
    {
    
    glad_glShadingRateSampleOrderCustomNV(rate,samples,locations);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glShadingRateSampleOrderCustomNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTextureBarrierNV()
    {
    
    glad_glTextureBarrierNV();
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTextureBarrierNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTexImage2DMultisampleCoverageNV(GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations)
    {
    
    glad_glTexImage2DMultisampleCoverageNV(target,coverageSamples,colorSamples,internalFormat,width,height,fixedSampleLocations);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTexImage2DMultisampleCoverageNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTexImage3DMultisampleCoverageNV(GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations)
    {
    
    glad_glTexImage3DMultisampleCoverageNV(target,coverageSamples,colorSamples,internalFormat,width,height,depth,fixedSampleLocations);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTexImage3DMultisampleCoverageNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTextureImage2DMultisampleNV(GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations)
    {
    
    glad_glTextureImage2DMultisampleNV(texture,target,samples,internalFormat,width,height,fixedSampleLocations);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTextureImage2DMultisampleNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTextureImage3DMultisampleNV(GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations)
    {
    
    glad_glTextureImage3DMultisampleNV(texture,target,samples,internalFormat,width,height,depth,fixedSampleLocations);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTextureImage3DMultisampleNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTextureImage2DMultisampleCoverageNV(GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations)
    {
    
    glad_glTextureImage2DMultisampleCoverageNV(texture,target,coverageSamples,colorSamples,internalFormat,width,height,fixedSampleLocations);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTextureImage2DMultisampleCoverageNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTextureImage3DMultisampleCoverageNV(GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations)
    {
    
    glad_glTextureImage3DMultisampleCoverageNV(texture,target,coverageSamples,colorSamples,internalFormat,width,height,depth,fixedSampleLocations);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTextureImage3DMultisampleCoverageNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glBeginTransformFeedbackNV(GLenum primitiveMode)
    {
    
    glad_glBeginTransformFeedbackNV(primitiveMode);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glBeginTransformFeedbackNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glEndTransformFeedbackNV()
    {
    
    glad_glEndTransformFeedbackNV();
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glEndTransformFeedbackNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTransformFeedbackAttribsNV(GLsizei count, const GLint* attribs, GLenum bufferMode)
    {
    
    glad_glTransformFeedbackAttribsNV(count,attribs,bufferMode);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTransformFeedbackAttribsNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glBindBufferRangeNV(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size)
    {
    
    glad_glBindBufferRangeNV(target,index,buffer,offset,size);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glBindBufferRangeNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glBindBufferOffsetNV(GLenum target, GLuint index, GLuint buffer, GLintptr offset)
    {
    
    glad_glBindBufferOffsetNV(target,index,buffer,offset);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glBindBufferOffsetNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glBindBufferBaseNV(GLenum target, GLuint index, GLuint buffer)
    {
    
    glad_glBindBufferBaseNV(target,index,buffer);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glBindBufferBaseNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTransformFeedbackVaryingsNV(GLuint program, GLsizei count, const GLint* locations, GLenum bufferMode)
    {
    
    glad_glTransformFeedbackVaryingsNV(program,count,locations,bufferMode);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTransformFeedbackVaryingsNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glActiveVaryingNV(GLuint program, const GLchar* name)
    {
    
    glad_glActiveVaryingNV(program,name);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glActiveVaryingNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    GLint __cdecl glwrap_glGetVaryingLocationNV(GLuint program, const GLchar* name)
    {
    
    GLint ret = glad_glGetVaryingLocationNV(program,name);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetVaryingLocationNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	return ret;
    }

    void __cdecl glwrap_glGetActiveVaryingNV(GLuint program, GLuint index, GLsizei bufSize, GLsizei* length, GLsizei* size, GLenum* type, GLchar* name)
    {
    
    glad_glGetActiveVaryingNV(program,index,bufSize,length,size,type,name);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetActiveVaryingNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetTransformFeedbackVaryingNV(GLuint program, GLuint index, GLint* location)
    {
    
    glad_glGetTransformFeedbackVaryingNV(program,index,location);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetTransformFeedbackVaryingNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTransformFeedbackStreamAttribsNV(GLsizei count, const GLint* attribs, GLsizei nbuffers, const GLint* bufstreams, GLenum bufferMode)
    {
    
    glad_glTransformFeedbackStreamAttribsNV(count,attribs,nbuffers,bufstreams,bufferMode);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTransformFeedbackStreamAttribsNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glBindTransformFeedbackNV(GLenum target, GLuint id)
    {
    
    glad_glBindTransformFeedbackNV(target,id);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glBindTransformFeedbackNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glDeleteTransformFeedbacksNV(GLsizei n, const GLuint* ids)
    {
    
    glad_glDeleteTransformFeedbacksNV(n,ids);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glDeleteTransformFeedbacksNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGenTransformFeedbacksNV(GLsizei n, GLuint* ids)
    {
    
    glad_glGenTransformFeedbacksNV(n,ids);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGenTransformFeedbacksNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    GLboolean __cdecl glwrap_glIsTransformFeedbackNV(GLuint id)
    {
    
    GLboolean ret = glad_glIsTransformFeedbackNV(id);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glIsTransformFeedbackNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	return ret;
    }

    void __cdecl glwrap_glPauseTransformFeedbackNV()
    {
    
    glad_glPauseTransformFeedbackNV();
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glPauseTransformFeedbackNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glResumeTransformFeedbackNV()
    {
    
    glad_glResumeTransformFeedbackNV();
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glResumeTransformFeedbackNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glDrawTransformFeedbackNV(GLenum mode, GLuint id)
    {
    
    glad_glDrawTransformFeedbackNV(mode,id);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glDrawTransformFeedbackNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVDPAUInitNV(const void* vdpDevice, const void* getProcAddress)
    {
    
    glad_glVDPAUInitNV(vdpDevice,getProcAddress);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVDPAUInitNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVDPAUFiniNV()
    {
    
    glad_glVDPAUFiniNV();
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVDPAUFiniNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    GLvdpauSurfaceNV __cdecl glwrap_glVDPAURegisterVideoSurfaceNV(const void* vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint* textureNames)
    {
    
    GLvdpauSurfaceNV ret = glad_glVDPAURegisterVideoSurfaceNV(vdpSurface,target,numTextureNames,textureNames);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVDPAURegisterVideoSurfaceNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	return ret;
    }

    GLvdpauSurfaceNV __cdecl glwrap_glVDPAURegisterOutputSurfaceNV(const void* vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint* textureNames)
    {
    
    GLvdpauSurfaceNV ret = glad_glVDPAURegisterOutputSurfaceNV(vdpSurface,target,numTextureNames,textureNames);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVDPAURegisterOutputSurfaceNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	return ret;
    }

    GLboolean __cdecl glwrap_glVDPAUIsSurfaceNV(GLvdpauSurfaceNV surface)
    {
    
    GLboolean ret = glad_glVDPAUIsSurfaceNV(surface);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVDPAUIsSurfaceNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	return ret;
    }

    void __cdecl glwrap_glVDPAUUnregisterSurfaceNV(GLvdpauSurfaceNV surface)
    {
    
    glad_glVDPAUUnregisterSurfaceNV(surface);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVDPAUUnregisterSurfaceNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVDPAUGetSurfaceivNV(GLvdpauSurfaceNV surface, GLenum pname, GLsizei bufSize, GLsizei* length, GLint* values)
    {
    
    glad_glVDPAUGetSurfaceivNV(surface,pname,bufSize,length,values);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVDPAUGetSurfaceivNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVDPAUSurfaceAccessNV(GLvdpauSurfaceNV surface, GLenum access)
    {
    
    glad_glVDPAUSurfaceAccessNV(surface,access);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVDPAUSurfaceAccessNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVDPAUMapSurfacesNV(GLsizei numSurfaces, const GLvdpauSurfaceNV* surfaces)
    {
    
    glad_glVDPAUMapSurfacesNV(numSurfaces,surfaces);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVDPAUMapSurfacesNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVDPAUUnmapSurfacesNV(GLsizei numSurface, const GLvdpauSurfaceNV* surfaces)
    {
    
    glad_glVDPAUUnmapSurfacesNV(numSurface,surfaces);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVDPAUUnmapSurfacesNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    GLvdpauSurfaceNV __cdecl glwrap_glVDPAURegisterVideoSurfaceWithPictureStructureNV(const void* vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint* textureNames, GLboolean isFrameStructure)
    {
    
    GLvdpauSurfaceNV ret = glad_glVDPAURegisterVideoSurfaceWithPictureStructureNV(vdpSurface,target,numTextureNames,textureNames,isFrameStructure);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVDPAURegisterVideoSurfaceWithPictureStructureNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	return ret;
    }

    void __cdecl glwrap_glFlushVertexArrayRangeNV()
    {
    
    glad_glFlushVertexArrayRangeNV();
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glFlushVertexArrayRangeNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexArrayRangeNV(GLsizei length, const void* pointer)
    {
    
    glad_glVertexArrayRangeNV(length,pointer);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexArrayRangeNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttribL1i64NV(GLuint index, GLint64EXT x)
    {
    
    glad_glVertexAttribL1i64NV(index,x);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttribL1i64NV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttribL2i64NV(GLuint index, GLint64EXT x, GLint64EXT y)
    {
    
    glad_glVertexAttribL2i64NV(index,x,y);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttribL2i64NV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttribL3i64NV(GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z)
    {
    
    glad_glVertexAttribL3i64NV(index,x,y,z);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttribL3i64NV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttribL4i64NV(GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w)
    {
    
    glad_glVertexAttribL4i64NV(index,x,y,z,w);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttribL4i64NV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttribL1i64vNV(GLuint index, const GLint64EXT* v)
    {
    
    glad_glVertexAttribL1i64vNV(index,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttribL1i64vNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttribL2i64vNV(GLuint index, const GLint64EXT* v)
    {
    
    glad_glVertexAttribL2i64vNV(index,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttribL2i64vNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttribL3i64vNV(GLuint index, const GLint64EXT* v)
    {
    
    glad_glVertexAttribL3i64vNV(index,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttribL3i64vNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttribL4i64vNV(GLuint index, const GLint64EXT* v)
    {
    
    glad_glVertexAttribL4i64vNV(index,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttribL4i64vNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttribL1ui64NV(GLuint index, GLuint64EXT x)
    {
    
    glad_glVertexAttribL1ui64NV(index,x);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttribL1ui64NV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttribL2ui64NV(GLuint index, GLuint64EXT x, GLuint64EXT y)
    {
    
    glad_glVertexAttribL2ui64NV(index,x,y);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttribL2ui64NV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttribL3ui64NV(GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z)
    {
    
    glad_glVertexAttribL3ui64NV(index,x,y,z);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttribL3ui64NV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttribL4ui64NV(GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w)
    {
    
    glad_glVertexAttribL4ui64NV(index,x,y,z,w);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttribL4ui64NV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttribL1ui64vNV(GLuint index, const GLuint64EXT* v)
    {
    
    glad_glVertexAttribL1ui64vNV(index,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttribL1ui64vNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttribL2ui64vNV(GLuint index, const GLuint64EXT* v)
    {
    
    glad_glVertexAttribL2ui64vNV(index,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttribL2ui64vNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttribL3ui64vNV(GLuint index, const GLuint64EXT* v)
    {
    
    glad_glVertexAttribL3ui64vNV(index,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttribL3ui64vNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttribL4ui64vNV(GLuint index, const GLuint64EXT* v)
    {
    
    glad_glVertexAttribL4ui64vNV(index,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttribL4ui64vNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetVertexAttribLi64vNV(GLuint index, GLenum pname, GLint64EXT* params)
    {
    
    glad_glGetVertexAttribLi64vNV(index,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetVertexAttribLi64vNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetVertexAttribLui64vNV(GLuint index, GLenum pname, GLuint64EXT* params)
    {
    
    glad_glGetVertexAttribLui64vNV(index,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetVertexAttribLui64vNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttribLFormatNV(GLuint index, GLint size, GLenum type, GLsizei stride)
    {
    
    glad_glVertexAttribLFormatNV(index,size,type,stride);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttribLFormatNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glBufferAddressRangeNV(GLenum pname, GLuint index, GLuint64EXT address, GLsizeiptr length)
    {
    
    glad_glBufferAddressRangeNV(pname,index,address,length);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glBufferAddressRangeNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexFormatNV(GLint size, GLenum type, GLsizei stride)
    {
    
    glad_glVertexFormatNV(size,type,stride);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexFormatNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glNormalFormatNV(GLenum type, GLsizei stride)
    {
    
    glad_glNormalFormatNV(type,stride);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glNormalFormatNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glColorFormatNV(GLint size, GLenum type, GLsizei stride)
    {
    
    glad_glColorFormatNV(size,type,stride);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glColorFormatNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glIndexFormatNV(GLenum type, GLsizei stride)
    {
    
    glad_glIndexFormatNV(type,stride);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glIndexFormatNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTexCoordFormatNV(GLint size, GLenum type, GLsizei stride)
    {
    
    glad_glTexCoordFormatNV(size,type,stride);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTexCoordFormatNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glEdgeFlagFormatNV(GLsizei stride)
    {
    
    glad_glEdgeFlagFormatNV(stride);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glEdgeFlagFormatNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glSecondaryColorFormatNV(GLint size, GLenum type, GLsizei stride)
    {
    
    glad_glSecondaryColorFormatNV(size,type,stride);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glSecondaryColorFormatNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glFogCoordFormatNV(GLenum type, GLsizei stride)
    {
    
    glad_glFogCoordFormatNV(type,stride);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glFogCoordFormatNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttribFormatNV(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride)
    {
    
    glad_glVertexAttribFormatNV(index,size,type,normalized,stride);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttribFormatNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttribIFormatNV(GLuint index, GLint size, GLenum type, GLsizei stride)
    {
    
    glad_glVertexAttribIFormatNV(index,size,type,stride);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttribIFormatNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetIntegerui64i_vNV(GLenum value, GLuint index, GLuint64EXT* result)
    {
    
    glad_glGetIntegerui64i_vNV(value,index,result);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetIntegerui64i_vNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    GLboolean __cdecl glwrap_glAreProgramsResidentNV(GLsizei n, const GLuint* programs, GLboolean* residences)
    {
    
    GLboolean ret = glad_glAreProgramsResidentNV(n,programs,residences);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glAreProgramsResidentNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	return ret;
    }

    void __cdecl glwrap_glBindProgramNV(GLenum target, GLuint id)
    {
    
    glad_glBindProgramNV(target,id);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glBindProgramNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glDeleteProgramsNV(GLsizei n, const GLuint* programs)
    {
    
    glad_glDeleteProgramsNV(n,programs);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glDeleteProgramsNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glExecuteProgramNV(GLenum target, GLuint id, const GLfloat* params)
    {
    
    glad_glExecuteProgramNV(target,id,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glExecuteProgramNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGenProgramsNV(GLsizei n, GLuint* programs)
    {
    
    glad_glGenProgramsNV(n,programs);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGenProgramsNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetProgramParameterdvNV(GLenum target, GLuint index, GLenum pname, GLdouble* params)
    {
    
    glad_glGetProgramParameterdvNV(target,index,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetProgramParameterdvNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetProgramParameterfvNV(GLenum target, GLuint index, GLenum pname, GLfloat* params)
    {
    
    glad_glGetProgramParameterfvNV(target,index,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetProgramParameterfvNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetProgramivNV(GLuint id, GLenum pname, GLint* params)
    {
    
    glad_glGetProgramivNV(id,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetProgramivNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetProgramStringNV(GLuint id, GLenum pname, GLubyte* program)
    {
    
    glad_glGetProgramStringNV(id,pname,program);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetProgramStringNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetTrackMatrixivNV(GLenum target, GLuint address, GLenum pname, GLint* params)
    {
    
    glad_glGetTrackMatrixivNV(target,address,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetTrackMatrixivNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetVertexAttribdvNV(GLuint index, GLenum pname, GLdouble* params)
    {
    
    glad_glGetVertexAttribdvNV(index,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetVertexAttribdvNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetVertexAttribfvNV(GLuint index, GLenum pname, GLfloat* params)
    {
    
    glad_glGetVertexAttribfvNV(index,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetVertexAttribfvNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetVertexAttribivNV(GLuint index, GLenum pname, GLint* params)
    {
    
    glad_glGetVertexAttribivNV(index,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetVertexAttribivNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetVertexAttribPointervNV(GLuint index, GLenum pname, void** pointer)
    {
    
    glad_glGetVertexAttribPointervNV(index,pname,pointer);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetVertexAttribPointervNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    GLboolean __cdecl glwrap_glIsProgramNV(GLuint id)
    {
    
    GLboolean ret = glad_glIsProgramNV(id);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glIsProgramNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	return ret;
    }

    void __cdecl glwrap_glLoadProgramNV(GLenum target, GLuint id, GLsizei len, const GLubyte* program)
    {
    
    glad_glLoadProgramNV(target,id,len,program);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glLoadProgramNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramParameter4dNV(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
    {
    
    glad_glProgramParameter4dNV(target,index,x,y,z,w);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramParameter4dNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramParameter4dvNV(GLenum target, GLuint index, const GLdouble* v)
    {
    
    glad_glProgramParameter4dvNV(target,index,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramParameter4dvNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramParameter4fNV(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
    {
    
    glad_glProgramParameter4fNV(target,index,x,y,z,w);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramParameter4fNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramParameter4fvNV(GLenum target, GLuint index, const GLfloat* v)
    {
    
    glad_glProgramParameter4fvNV(target,index,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramParameter4fvNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramParameters4dvNV(GLenum target, GLuint index, GLsizei count, const GLdouble* v)
    {
    
    glad_glProgramParameters4dvNV(target,index,count,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramParameters4dvNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glProgramParameters4fvNV(GLenum target, GLuint index, GLsizei count, const GLfloat* v)
    {
    
    glad_glProgramParameters4fvNV(target,index,count,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glProgramParameters4fvNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glRequestResidentProgramsNV(GLsizei n, const GLuint* programs)
    {
    
    glad_glRequestResidentProgramsNV(n,programs);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glRequestResidentProgramsNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTrackMatrixNV(GLenum target, GLuint address, GLenum matrix, GLenum transform)
    {
    
    glad_glTrackMatrixNV(target,address,matrix,transform);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTrackMatrixNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttribPointerNV(GLuint index, GLint fsize, GLenum type, GLsizei stride, const void* pointer)
    {
    
    glad_glVertexAttribPointerNV(index,fsize,type,stride,pointer);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttribPointerNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttrib1dNV(GLuint index, GLdouble x)
    {
    
    glad_glVertexAttrib1dNV(index,x);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttrib1dNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttrib1dvNV(GLuint index, const GLdouble* v)
    {
    
    glad_glVertexAttrib1dvNV(index,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttrib1dvNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttrib1fNV(GLuint index, GLfloat x)
    {
    
    glad_glVertexAttrib1fNV(index,x);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttrib1fNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttrib1fvNV(GLuint index, const GLfloat* v)
    {
    
    glad_glVertexAttrib1fvNV(index,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttrib1fvNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttrib1sNV(GLuint index, GLshort x)
    {
    
    glad_glVertexAttrib1sNV(index,x);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttrib1sNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttrib1svNV(GLuint index, const GLshort* v)
    {
    
    glad_glVertexAttrib1svNV(index,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttrib1svNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttrib2dNV(GLuint index, GLdouble x, GLdouble y)
    {
    
    glad_glVertexAttrib2dNV(index,x,y);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttrib2dNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttrib2dvNV(GLuint index, const GLdouble* v)
    {
    
    glad_glVertexAttrib2dvNV(index,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttrib2dvNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttrib2fNV(GLuint index, GLfloat x, GLfloat y)
    {
    
    glad_glVertexAttrib2fNV(index,x,y);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttrib2fNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttrib2fvNV(GLuint index, const GLfloat* v)
    {
    
    glad_glVertexAttrib2fvNV(index,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttrib2fvNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttrib2sNV(GLuint index, GLshort x, GLshort y)
    {
    
    glad_glVertexAttrib2sNV(index,x,y);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttrib2sNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttrib2svNV(GLuint index, const GLshort* v)
    {
    
    glad_glVertexAttrib2svNV(index,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttrib2svNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttrib3dNV(GLuint index, GLdouble x, GLdouble y, GLdouble z)
    {
    
    glad_glVertexAttrib3dNV(index,x,y,z);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttrib3dNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttrib3dvNV(GLuint index, const GLdouble* v)
    {
    
    glad_glVertexAttrib3dvNV(index,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttrib3dvNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttrib3fNV(GLuint index, GLfloat x, GLfloat y, GLfloat z)
    {
    
    glad_glVertexAttrib3fNV(index,x,y,z);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttrib3fNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttrib3fvNV(GLuint index, const GLfloat* v)
    {
    
    glad_glVertexAttrib3fvNV(index,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttrib3fvNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttrib3sNV(GLuint index, GLshort x, GLshort y, GLshort z)
    {
    
    glad_glVertexAttrib3sNV(index,x,y,z);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttrib3sNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttrib3svNV(GLuint index, const GLshort* v)
    {
    
    glad_glVertexAttrib3svNV(index,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttrib3svNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttrib4dNV(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
    {
    
    glad_glVertexAttrib4dNV(index,x,y,z,w);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttrib4dNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttrib4dvNV(GLuint index, const GLdouble* v)
    {
    
    glad_glVertexAttrib4dvNV(index,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttrib4dvNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttrib4fNV(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
    {
    
    glad_glVertexAttrib4fNV(index,x,y,z,w);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttrib4fNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttrib4fvNV(GLuint index, const GLfloat* v)
    {
    
    glad_glVertexAttrib4fvNV(index,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttrib4fvNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttrib4sNV(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w)
    {
    
    glad_glVertexAttrib4sNV(index,x,y,z,w);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttrib4sNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttrib4svNV(GLuint index, const GLshort* v)
    {
    
    glad_glVertexAttrib4svNV(index,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttrib4svNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttrib4ubNV(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w)
    {
    
    glad_glVertexAttrib4ubNV(index,x,y,z,w);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttrib4ubNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttrib4ubvNV(GLuint index, const GLubyte* v)
    {
    
    glad_glVertexAttrib4ubvNV(index,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttrib4ubvNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttribs1dvNV(GLuint index, GLsizei count, const GLdouble* v)
    {
    
    glad_glVertexAttribs1dvNV(index,count,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttribs1dvNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttribs1fvNV(GLuint index, GLsizei count, const GLfloat* v)
    {
    
    glad_glVertexAttribs1fvNV(index,count,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttribs1fvNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttribs1svNV(GLuint index, GLsizei count, const GLshort* v)
    {
    
    glad_glVertexAttribs1svNV(index,count,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttribs1svNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttribs2dvNV(GLuint index, GLsizei count, const GLdouble* v)
    {
    
    glad_glVertexAttribs2dvNV(index,count,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttribs2dvNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttribs2fvNV(GLuint index, GLsizei count, const GLfloat* v)
    {
    
    glad_glVertexAttribs2fvNV(index,count,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttribs2fvNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttribs2svNV(GLuint index, GLsizei count, const GLshort* v)
    {
    
    glad_glVertexAttribs2svNV(index,count,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttribs2svNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttribs3dvNV(GLuint index, GLsizei count, const GLdouble* v)
    {
    
    glad_glVertexAttribs3dvNV(index,count,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttribs3dvNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttribs3fvNV(GLuint index, GLsizei count, const GLfloat* v)
    {
    
    glad_glVertexAttribs3fvNV(index,count,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttribs3fvNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttribs3svNV(GLuint index, GLsizei count, const GLshort* v)
    {
    
    glad_glVertexAttribs3svNV(index,count,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttribs3svNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttribs4dvNV(GLuint index, GLsizei count, const GLdouble* v)
    {
    
    glad_glVertexAttribs4dvNV(index,count,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttribs4dvNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttribs4fvNV(GLuint index, GLsizei count, const GLfloat* v)
    {
    
    glad_glVertexAttribs4fvNV(index,count,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttribs4fvNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttribs4svNV(GLuint index, GLsizei count, const GLshort* v)
    {
    
    glad_glVertexAttribs4svNV(index,count,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttribs4svNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttribs4ubvNV(GLuint index, GLsizei count, const GLubyte* v)
    {
    
    glad_glVertexAttribs4ubvNV(index,count,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttribs4ubvNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttribI1iEXT(GLuint index, GLint x)
    {
    
    glad_glVertexAttribI1iEXT(index,x);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttribI1iEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttribI2iEXT(GLuint index, GLint x, GLint y)
    {
    
    glad_glVertexAttribI2iEXT(index,x,y);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttribI2iEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttribI3iEXT(GLuint index, GLint x, GLint y, GLint z)
    {
    
    glad_glVertexAttribI3iEXT(index,x,y,z);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttribI3iEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttribI4iEXT(GLuint index, GLint x, GLint y, GLint z, GLint w)
    {
    
    glad_glVertexAttribI4iEXT(index,x,y,z,w);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttribI4iEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttribI1uiEXT(GLuint index, GLuint x)
    {
    
    glad_glVertexAttribI1uiEXT(index,x);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttribI1uiEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttribI2uiEXT(GLuint index, GLuint x, GLuint y)
    {
    
    glad_glVertexAttribI2uiEXT(index,x,y);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttribI2uiEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttribI3uiEXT(GLuint index, GLuint x, GLuint y, GLuint z)
    {
    
    glad_glVertexAttribI3uiEXT(index,x,y,z);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttribI3uiEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttribI4uiEXT(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)
    {
    
    glad_glVertexAttribI4uiEXT(index,x,y,z,w);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttribI4uiEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttribI1ivEXT(GLuint index, const GLint* v)
    {
    
    glad_glVertexAttribI1ivEXT(index,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttribI1ivEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttribI2ivEXT(GLuint index, const GLint* v)
    {
    
    glad_glVertexAttribI2ivEXT(index,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttribI2ivEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttribI3ivEXT(GLuint index, const GLint* v)
    {
    
    glad_glVertexAttribI3ivEXT(index,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttribI3ivEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttribI4ivEXT(GLuint index, const GLint* v)
    {
    
    glad_glVertexAttribI4ivEXT(index,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttribI4ivEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttribI1uivEXT(GLuint index, const GLuint* v)
    {
    
    glad_glVertexAttribI1uivEXT(index,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttribI1uivEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttribI2uivEXT(GLuint index, const GLuint* v)
    {
    
    glad_glVertexAttribI2uivEXT(index,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttribI2uivEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttribI3uivEXT(GLuint index, const GLuint* v)
    {
    
    glad_glVertexAttribI3uivEXT(index,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttribI3uivEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttribI4uivEXT(GLuint index, const GLuint* v)
    {
    
    glad_glVertexAttribI4uivEXT(index,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttribI4uivEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttribI4bvEXT(GLuint index, const GLbyte* v)
    {
    
    glad_glVertexAttribI4bvEXT(index,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttribI4bvEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttribI4svEXT(GLuint index, const GLshort* v)
    {
    
    glad_glVertexAttribI4svEXT(index,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttribI4svEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttribI4ubvEXT(GLuint index, const GLubyte* v)
    {
    
    glad_glVertexAttribI4ubvEXT(index,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttribI4ubvEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttribI4usvEXT(GLuint index, const GLushort* v)
    {
    
    glad_glVertexAttribI4usvEXT(index,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttribI4usvEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVertexAttribIPointerEXT(GLuint index, GLint size, GLenum type, GLsizei stride, const void* pointer)
    {
    
    glad_glVertexAttribIPointerEXT(index,size,type,stride,pointer);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVertexAttribIPointerEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetVertexAttribIivEXT(GLuint index, GLenum pname, GLint* params)
    {
    
    glad_glGetVertexAttribIivEXT(index,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetVertexAttribIivEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetVertexAttribIuivEXT(GLuint index, GLenum pname, GLuint* params)
    {
    
    glad_glGetVertexAttribIuivEXT(index,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetVertexAttribIuivEXT");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glBeginVideoCaptureNV(GLuint video_capture_slot)
    {
    
    glad_glBeginVideoCaptureNV(video_capture_slot);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glBeginVideoCaptureNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glBindVideoCaptureStreamBufferNV(GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLintptrARB offset)
    {
    
    glad_glBindVideoCaptureStreamBufferNV(video_capture_slot,stream,frame_region,offset);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glBindVideoCaptureStreamBufferNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glBindVideoCaptureStreamTextureNV(GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLenum target, GLuint texture)
    {
    
    glad_glBindVideoCaptureStreamTextureNV(video_capture_slot,stream,frame_region,target,texture);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glBindVideoCaptureStreamTextureNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glEndVideoCaptureNV(GLuint video_capture_slot)
    {
    
    glad_glEndVideoCaptureNV(video_capture_slot);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glEndVideoCaptureNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetVideoCaptureivNV(GLuint video_capture_slot, GLenum pname, GLint* params)
    {
    
    glad_glGetVideoCaptureivNV(video_capture_slot,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetVideoCaptureivNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetVideoCaptureStreamivNV(GLuint video_capture_slot, GLuint stream, GLenum pname, GLint* params)
    {
    
    glad_glGetVideoCaptureStreamivNV(video_capture_slot,stream,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetVideoCaptureStreamivNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetVideoCaptureStreamfvNV(GLuint video_capture_slot, GLuint stream, GLenum pname, GLfloat* params)
    {
    
    glad_glGetVideoCaptureStreamfvNV(video_capture_slot,stream,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetVideoCaptureStreamfvNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetVideoCaptureStreamdvNV(GLuint video_capture_slot, GLuint stream, GLenum pname, GLdouble* params)
    {
    
    glad_glGetVideoCaptureStreamdvNV(video_capture_slot,stream,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetVideoCaptureStreamdvNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    GLenum __cdecl glwrap_glVideoCaptureNV(GLuint video_capture_slot, GLuint* sequence_num, GLuint64EXT* capture_time)
    {
    
    GLenum ret = glad_glVideoCaptureNV(video_capture_slot,sequence_num,capture_time);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVideoCaptureNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	return ret;
    }

    void __cdecl glwrap_glVideoCaptureStreamParameterivNV(GLuint video_capture_slot, GLuint stream, GLenum pname, const GLint* params)
    {
    
    glad_glVideoCaptureStreamParameterivNV(video_capture_slot,stream,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVideoCaptureStreamParameterivNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVideoCaptureStreamParameterfvNV(GLuint video_capture_slot, GLuint stream, GLenum pname, const GLfloat* params)
    {
    
    glad_glVideoCaptureStreamParameterfvNV(video_capture_slot,stream,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVideoCaptureStreamParameterfvNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glVideoCaptureStreamParameterdvNV(GLuint video_capture_slot, GLuint stream, GLenum pname, const GLdouble* params)
    {
    
    glad_glVideoCaptureStreamParameterdvNV(video_capture_slot,stream,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glVideoCaptureStreamParameterdvNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glViewportSwizzleNV(GLuint index, GLenum swizzlex, GLenum swizzley, GLenum swizzlez, GLenum swizzlew)
    {
    
    glad_glViewportSwizzleNV(index,swizzlex,swizzley,swizzlez,swizzlew);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glViewportSwizzleNV");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glFramebufferTextureMultiviewOVR(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint baseViewIndex, GLsizei numViews)
    {
    
    glad_glFramebufferTextureMultiviewOVR(target,attachment,texture,level,baseViewIndex,numViews);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glFramebufferTextureMultiviewOVR");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glHintPGI(GLenum target, GLint mode)
    {
    
    glad_glHintPGI(target,mode);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glHintPGI");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glDetailTexFuncSGIS(GLenum target, GLsizei n, const GLfloat* points)
    {
    
    glad_glDetailTexFuncSGIS(target,n,points);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glDetailTexFuncSGIS");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetDetailTexFuncSGIS(GLenum target, GLfloat* points)
    {
    
    glad_glGetDetailTexFuncSGIS(target,points);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetDetailTexFuncSGIS");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glFogFuncSGIS(GLsizei n, const GLfloat* points)
    {
    
    glad_glFogFuncSGIS(n,points);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glFogFuncSGIS");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetFogFuncSGIS(GLfloat* points)
    {
    
    glad_glGetFogFuncSGIS(points);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetFogFuncSGIS");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glSampleMaskSGIS(GLclampf value, GLboolean invert)
    {
    
    glad_glSampleMaskSGIS(value,invert);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glSampleMaskSGIS");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glSamplePatternSGIS(GLenum pattern)
    {
    
    glad_glSamplePatternSGIS(pattern);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glSamplePatternSGIS");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glPixelTexGenParameteriSGIS(GLenum pname, GLint param)
    {
    
    glad_glPixelTexGenParameteriSGIS(pname,param);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glPixelTexGenParameteriSGIS");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glPixelTexGenParameterivSGIS(GLenum pname, const GLint* params)
    {
    
    glad_glPixelTexGenParameterivSGIS(pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glPixelTexGenParameterivSGIS");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glPixelTexGenParameterfSGIS(GLenum pname, GLfloat param)
    {
    
    glad_glPixelTexGenParameterfSGIS(pname,param);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glPixelTexGenParameterfSGIS");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glPixelTexGenParameterfvSGIS(GLenum pname, const GLfloat* params)
    {
    
    glad_glPixelTexGenParameterfvSGIS(pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glPixelTexGenParameterfvSGIS");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetPixelTexGenParameterivSGIS(GLenum pname, GLint* params)
    {
    
    glad_glGetPixelTexGenParameterivSGIS(pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetPixelTexGenParameterivSGIS");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetPixelTexGenParameterfvSGIS(GLenum pname, GLfloat* params)
    {
    
    glad_glGetPixelTexGenParameterfvSGIS(pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetPixelTexGenParameterfvSGIS");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glPointParameterfSGIS(GLenum pname, GLfloat param)
    {
    
    glad_glPointParameterfSGIS(pname,param);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glPointParameterfSGIS");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glPointParameterfvSGIS(GLenum pname, const GLfloat* params)
    {
    
    glad_glPointParameterfvSGIS(pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glPointParameterfvSGIS");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glSharpenTexFuncSGIS(GLenum target, GLsizei n, const GLfloat* points)
    {
    
    glad_glSharpenTexFuncSGIS(target,n,points);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glSharpenTexFuncSGIS");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetSharpenTexFuncSGIS(GLenum target, GLfloat* points)
    {
    
    glad_glGetSharpenTexFuncSGIS(target,points);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetSharpenTexFuncSGIS");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTexImage4DSGIS(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLint border, GLenum format, GLenum type, const void* pixels)
    {
    
    glad_glTexImage4DSGIS(target,level,internalformat,width,height,depth,size4d,border,format,type,pixels);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTexImage4DSGIS");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTexSubImage4DSGIS(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint woffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLenum format, GLenum type, const void* pixels)
    {
    
    glad_glTexSubImage4DSGIS(target,level,xoffset,yoffset,zoffset,woffset,width,height,depth,size4d,format,type,pixels);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTexSubImage4DSGIS");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTextureColorMaskSGIS(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha)
    {
    
    glad_glTextureColorMaskSGIS(red,green,blue,alpha);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTextureColorMaskSGIS");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetTexFilterFuncSGIS(GLenum target, GLenum filter, GLfloat* weights)
    {
    
    glad_glGetTexFilterFuncSGIS(target,filter,weights);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetTexFilterFuncSGIS");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTexFilterFuncSGIS(GLenum target, GLenum filter, GLsizei n, const GLfloat* weights)
    {
    
    glad_glTexFilterFuncSGIS(target,filter,n,weights);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTexFilterFuncSGIS");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glAsyncMarkerSGIX(GLuint marker)
    {
    
    glad_glAsyncMarkerSGIX(marker);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glAsyncMarkerSGIX");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    GLint __cdecl glwrap_glFinishAsyncSGIX(GLuint* markerp)
    {
    
    GLint ret = glad_glFinishAsyncSGIX(markerp);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glFinishAsyncSGIX");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	return ret;
    }

    GLint __cdecl glwrap_glPollAsyncSGIX(GLuint* markerp)
    {
    
    GLint ret = glad_glPollAsyncSGIX(markerp);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glPollAsyncSGIX");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	return ret;
    }

    GLuint __cdecl glwrap_glGenAsyncMarkersSGIX(GLsizei range)
    {
    
    GLuint ret = glad_glGenAsyncMarkersSGIX(range);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGenAsyncMarkersSGIX");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	return ret;
    }

    void __cdecl glwrap_glDeleteAsyncMarkersSGIX(GLuint marker, GLsizei range)
    {
    
    glad_glDeleteAsyncMarkersSGIX(marker,range);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glDeleteAsyncMarkersSGIX");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    GLboolean __cdecl glwrap_glIsAsyncMarkerSGIX(GLuint marker)
    {
    
    GLboolean ret = glad_glIsAsyncMarkerSGIX(marker);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glIsAsyncMarkerSGIX");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	return ret;
    }

    void __cdecl glwrap_glFlushRasterSGIX()
    {
    
    glad_glFlushRasterSGIX();
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glFlushRasterSGIX");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glFragmentColorMaterialSGIX(GLenum face, GLenum mode)
    {
    
    glad_glFragmentColorMaterialSGIX(face,mode);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glFragmentColorMaterialSGIX");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glFragmentLightfSGIX(GLenum light, GLenum pname, GLfloat param)
    {
    
    glad_glFragmentLightfSGIX(light,pname,param);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glFragmentLightfSGIX");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glFragmentLightfvSGIX(GLenum light, GLenum pname, const GLfloat* params)
    {
    
    glad_glFragmentLightfvSGIX(light,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glFragmentLightfvSGIX");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glFragmentLightiSGIX(GLenum light, GLenum pname, GLint param)
    {
    
    glad_glFragmentLightiSGIX(light,pname,param);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glFragmentLightiSGIX");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glFragmentLightivSGIX(GLenum light, GLenum pname, const GLint* params)
    {
    
    glad_glFragmentLightivSGIX(light,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glFragmentLightivSGIX");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glFragmentLightModelfSGIX(GLenum pname, GLfloat param)
    {
    
    glad_glFragmentLightModelfSGIX(pname,param);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glFragmentLightModelfSGIX");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glFragmentLightModelfvSGIX(GLenum pname, const GLfloat* params)
    {
    
    glad_glFragmentLightModelfvSGIX(pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glFragmentLightModelfvSGIX");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glFragmentLightModeliSGIX(GLenum pname, GLint param)
    {
    
    glad_glFragmentLightModeliSGIX(pname,param);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glFragmentLightModeliSGIX");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glFragmentLightModelivSGIX(GLenum pname, const GLint* params)
    {
    
    glad_glFragmentLightModelivSGIX(pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glFragmentLightModelivSGIX");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glFragmentMaterialfSGIX(GLenum face, GLenum pname, GLfloat param)
    {
    
    glad_glFragmentMaterialfSGIX(face,pname,param);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glFragmentMaterialfSGIX");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glFragmentMaterialfvSGIX(GLenum face, GLenum pname, const GLfloat* params)
    {
    
    glad_glFragmentMaterialfvSGIX(face,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glFragmentMaterialfvSGIX");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glFragmentMaterialiSGIX(GLenum face, GLenum pname, GLint param)
    {
    
    glad_glFragmentMaterialiSGIX(face,pname,param);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glFragmentMaterialiSGIX");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glFragmentMaterialivSGIX(GLenum face, GLenum pname, const GLint* params)
    {
    
    glad_glFragmentMaterialivSGIX(face,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glFragmentMaterialivSGIX");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetFragmentLightfvSGIX(GLenum light, GLenum pname, GLfloat* params)
    {
    
    glad_glGetFragmentLightfvSGIX(light,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetFragmentLightfvSGIX");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetFragmentLightivSGIX(GLenum light, GLenum pname, GLint* params)
    {
    
    glad_glGetFragmentLightivSGIX(light,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetFragmentLightivSGIX");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetFragmentMaterialfvSGIX(GLenum face, GLenum pname, GLfloat* params)
    {
    
    glad_glGetFragmentMaterialfvSGIX(face,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetFragmentMaterialfvSGIX");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetFragmentMaterialivSGIX(GLenum face, GLenum pname, GLint* params)
    {
    
    glad_glGetFragmentMaterialivSGIX(face,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetFragmentMaterialivSGIX");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glLightEnviSGIX(GLenum pname, GLint param)
    {
    
    glad_glLightEnviSGIX(pname,param);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glLightEnviSGIX");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glFrameZoomSGIX(GLint factor)
    {
    
    glad_glFrameZoomSGIX(factor);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glFrameZoomSGIX");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glIglooInterfaceSGIX(GLenum pname, const void* params)
    {
    
    glad_glIglooInterfaceSGIX(pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glIglooInterfaceSGIX");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    GLint __cdecl glwrap_glGetInstrumentsSGIX()
    {
    
    GLint ret = glad_glGetInstrumentsSGIX();
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetInstrumentsSGIX");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	return ret;
    }

    void __cdecl glwrap_glInstrumentsBufferSGIX(GLsizei size, GLint* buffer)
    {
    
    glad_glInstrumentsBufferSGIX(size,buffer);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glInstrumentsBufferSGIX");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    GLint __cdecl glwrap_glPollInstrumentsSGIX(GLint* marker_p)
    {
    
    GLint ret = glad_glPollInstrumentsSGIX(marker_p);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glPollInstrumentsSGIX");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	return ret;
    }

    void __cdecl glwrap_glReadInstrumentsSGIX(GLint marker)
    {
    
    glad_glReadInstrumentsSGIX(marker);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glReadInstrumentsSGIX");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glStartInstrumentsSGIX()
    {
    
    glad_glStartInstrumentsSGIX();
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glStartInstrumentsSGIX");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glStopInstrumentsSGIX(GLint marker)
    {
    
    glad_glStopInstrumentsSGIX(marker);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glStopInstrumentsSGIX");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetListParameterfvSGIX(GLuint list, GLenum pname, GLfloat* params)
    {
    
    glad_glGetListParameterfvSGIX(list,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetListParameterfvSGIX");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetListParameterivSGIX(GLuint list, GLenum pname, GLint* params)
    {
    
    glad_glGetListParameterivSGIX(list,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetListParameterivSGIX");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glListParameterfSGIX(GLuint list, GLenum pname, GLfloat param)
    {
    
    glad_glListParameterfSGIX(list,pname,param);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glListParameterfSGIX");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glListParameterfvSGIX(GLuint list, GLenum pname, const GLfloat* params)
    {
    
    glad_glListParameterfvSGIX(list,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glListParameterfvSGIX");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glListParameteriSGIX(GLuint list, GLenum pname, GLint param)
    {
    
    glad_glListParameteriSGIX(list,pname,param);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glListParameteriSGIX");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glListParameterivSGIX(GLuint list, GLenum pname, const GLint* params)
    {
    
    glad_glListParameterivSGIX(list,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glListParameterivSGIX");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glPixelTexGenSGIX(GLenum mode)
    {
    
    glad_glPixelTexGenSGIX(mode);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glPixelTexGenSGIX");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glDeformationMap3dSGIX(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, GLdouble w1, GLdouble w2, GLint wstride, GLint worder, const GLdouble* points)
    {
    
    glad_glDeformationMap3dSGIX(target,u1,u2,ustride,uorder,v1,v2,vstride,vorder,w1,w2,wstride,worder,points);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glDeformationMap3dSGIX");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glDeformationMap3fSGIX(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, GLfloat w1, GLfloat w2, GLint wstride, GLint worder, const GLfloat* points)
    {
    
    glad_glDeformationMap3fSGIX(target,u1,u2,ustride,uorder,v1,v2,vstride,vorder,w1,w2,wstride,worder,points);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glDeformationMap3fSGIX");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glDeformSGIX(GLbitfield mask)
    {
    
    glad_glDeformSGIX(mask);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glDeformSGIX");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glLoadIdentityDeformationMapSGIX(GLbitfield mask)
    {
    
    glad_glLoadIdentityDeformationMapSGIX(mask);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glLoadIdentityDeformationMapSGIX");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glReferencePlaneSGIX(const GLdouble* equation)
    {
    
    glad_glReferencePlaneSGIX(equation);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glReferencePlaneSGIX");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glSpriteParameterfSGIX(GLenum pname, GLfloat param)
    {
    
    glad_glSpriteParameterfSGIX(pname,param);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glSpriteParameterfSGIX");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glSpriteParameterfvSGIX(GLenum pname, const GLfloat* params)
    {
    
    glad_glSpriteParameterfvSGIX(pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glSpriteParameterfvSGIX");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glSpriteParameteriSGIX(GLenum pname, GLint param)
    {
    
    glad_glSpriteParameteriSGIX(pname,param);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glSpriteParameteriSGIX");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glSpriteParameterivSGIX(GLenum pname, const GLint* params)
    {
    
    glad_glSpriteParameterivSGIX(pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glSpriteParameterivSGIX");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTagSampleBufferSGIX()
    {
    
    glad_glTagSampleBufferSGIX();
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTagSampleBufferSGIX");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glColorTableSGI(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void* table)
    {
    
    glad_glColorTableSGI(target,internalformat,width,format,type,table);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glColorTableSGI");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glColorTableParameterfvSGI(GLenum target, GLenum pname, const GLfloat* params)
    {
    
    glad_glColorTableParameterfvSGI(target,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glColorTableParameterfvSGI");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glColorTableParameterivSGI(GLenum target, GLenum pname, const GLint* params)
    {
    
    glad_glColorTableParameterivSGI(target,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glColorTableParameterivSGI");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glCopyColorTableSGI(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width)
    {
    
    glad_glCopyColorTableSGI(target,internalformat,x,y,width);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glCopyColorTableSGI");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetColorTableSGI(GLenum target, GLenum format, GLenum type, void* table)
    {
    
    glad_glGetColorTableSGI(target,format,type,table);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetColorTableSGI");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetColorTableParameterfvSGI(GLenum target, GLenum pname, GLfloat* params)
    {
    
    glad_glGetColorTableParameterfvSGI(target,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetColorTableParameterfvSGI");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGetColorTableParameterivSGI(GLenum target, GLenum pname, GLint* params)
    {
    
    glad_glGetColorTableParameterivSGI(target,pname,params);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGetColorTableParameterivSGI");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glFinishTextureSUNX()
    {
    
    glad_glFinishTextureSUNX();
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glFinishTextureSUNX");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGlobalAlphaFactorbSUN(GLbyte factor)
    {
    
    glad_glGlobalAlphaFactorbSUN(factor);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGlobalAlphaFactorbSUN");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGlobalAlphaFactorsSUN(GLshort factor)
    {
    
    glad_glGlobalAlphaFactorsSUN(factor);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGlobalAlphaFactorsSUN");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGlobalAlphaFactoriSUN(GLint factor)
    {
    
    glad_glGlobalAlphaFactoriSUN(factor);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGlobalAlphaFactoriSUN");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGlobalAlphaFactorfSUN(GLfloat factor)
    {
    
    glad_glGlobalAlphaFactorfSUN(factor);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGlobalAlphaFactorfSUN");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGlobalAlphaFactordSUN(GLdouble factor)
    {
    
    glad_glGlobalAlphaFactordSUN(factor);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGlobalAlphaFactordSUN");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGlobalAlphaFactorubSUN(GLubyte factor)
    {
    
    glad_glGlobalAlphaFactorubSUN(factor);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGlobalAlphaFactorubSUN");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGlobalAlphaFactorusSUN(GLushort factor)
    {
    
    glad_glGlobalAlphaFactorusSUN(factor);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGlobalAlphaFactorusSUN");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glGlobalAlphaFactoruiSUN(GLuint factor)
    {
    
    glad_glGlobalAlphaFactoruiSUN(factor);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glGlobalAlphaFactoruiSUN");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glDrawMeshArraysSUN(GLenum mode, GLint first, GLsizei count, GLsizei width)
    {
    
    glad_glDrawMeshArraysSUN(mode,first,count,width);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glDrawMeshArraysSUN");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glReplacementCodeuiSUN(GLuint code)
    {
    
    glad_glReplacementCodeuiSUN(code);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glReplacementCodeuiSUN");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glReplacementCodeusSUN(GLushort code)
    {
    
    glad_glReplacementCodeusSUN(code);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glReplacementCodeusSUN");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glReplacementCodeubSUN(GLubyte code)
    {
    
    glad_glReplacementCodeubSUN(code);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glReplacementCodeubSUN");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glReplacementCodeuivSUN(const GLuint* code)
    {
    
    glad_glReplacementCodeuivSUN(code);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glReplacementCodeuivSUN");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glReplacementCodeusvSUN(const GLushort* code)
    {
    
    glad_glReplacementCodeusvSUN(code);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glReplacementCodeusvSUN");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glReplacementCodeubvSUN(const GLubyte* code)
    {
    
    glad_glReplacementCodeubvSUN(code);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glReplacementCodeubvSUN");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glReplacementCodePointerSUN(GLenum type, GLsizei stride, const void** pointer)
    {
    
    glad_glReplacementCodePointerSUN(type,stride,pointer);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glReplacementCodePointerSUN");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glColor4ubVertex2fSUN(GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y)
    {
    
    glad_glColor4ubVertex2fSUN(r,g,b,a,x,y);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glColor4ubVertex2fSUN");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glColor4ubVertex2fvSUN(const GLubyte* c, const GLfloat* v)
    {
    
    glad_glColor4ubVertex2fvSUN(c,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glColor4ubVertex2fvSUN");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glColor4ubVertex3fSUN(GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z)
    {
    
    glad_glColor4ubVertex3fSUN(r,g,b,a,x,y,z);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glColor4ubVertex3fSUN");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glColor4ubVertex3fvSUN(const GLubyte* c, const GLfloat* v)
    {
    
    glad_glColor4ubVertex3fvSUN(c,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glColor4ubVertex3fvSUN");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glColor3fVertex3fSUN(GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z)
    {
    
    glad_glColor3fVertex3fSUN(r,g,b,x,y,z);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glColor3fVertex3fSUN");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glColor3fVertex3fvSUN(const GLfloat* c, const GLfloat* v)
    {
    
    glad_glColor3fVertex3fvSUN(c,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glColor3fVertex3fvSUN");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glNormal3fVertex3fSUN(GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
    {
    
    glad_glNormal3fVertex3fSUN(nx,ny,nz,x,y,z);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glNormal3fVertex3fSUN");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glNormal3fVertex3fvSUN(const GLfloat* n, const GLfloat* v)
    {
    
    glad_glNormal3fVertex3fvSUN(n,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glNormal3fVertex3fvSUN");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glColor4fNormal3fVertex3fSUN(GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
    {
    
    glad_glColor4fNormal3fVertex3fSUN(r,g,b,a,nx,ny,nz,x,y,z);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glColor4fNormal3fVertex3fSUN");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glColor4fNormal3fVertex3fvSUN(const GLfloat* c, const GLfloat* n, const GLfloat* v)
    {
    
    glad_glColor4fNormal3fVertex3fvSUN(c,n,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glColor4fNormal3fVertex3fvSUN");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTexCoord2fVertex3fSUN(GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z)
    {
    
    glad_glTexCoord2fVertex3fSUN(s,t,x,y,z);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTexCoord2fVertex3fSUN");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTexCoord2fVertex3fvSUN(const GLfloat* tc, const GLfloat* v)
    {
    
    glad_glTexCoord2fVertex3fvSUN(tc,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTexCoord2fVertex3fvSUN");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTexCoord4fVertex4fSUN(GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
    {
    
    glad_glTexCoord4fVertex4fSUN(s,t,p,q,x,y,z,w);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTexCoord4fVertex4fSUN");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTexCoord4fVertex4fvSUN(const GLfloat* tc, const GLfloat* v)
    {
    
    glad_glTexCoord4fVertex4fvSUN(tc,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTexCoord4fVertex4fvSUN");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTexCoord2fColor4ubVertex3fSUN(GLfloat s, GLfloat t, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z)
    {
    
    glad_glTexCoord2fColor4ubVertex3fSUN(s,t,r,g,b,a,x,y,z);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTexCoord2fColor4ubVertex3fSUN");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTexCoord2fColor4ubVertex3fvSUN(const GLfloat* tc, const GLubyte* c, const GLfloat* v)
    {
    
    glad_glTexCoord2fColor4ubVertex3fvSUN(tc,c,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTexCoord2fColor4ubVertex3fvSUN");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTexCoord2fColor3fVertex3fSUN(GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z)
    {
    
    glad_glTexCoord2fColor3fVertex3fSUN(s,t,r,g,b,x,y,z);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTexCoord2fColor3fVertex3fSUN");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTexCoord2fColor3fVertex3fvSUN(const GLfloat* tc, const GLfloat* c, const GLfloat* v)
    {
    
    glad_glTexCoord2fColor3fVertex3fvSUN(tc,c,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTexCoord2fColor3fVertex3fvSUN");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTexCoord2fNormal3fVertex3fSUN(GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
    {
    
    glad_glTexCoord2fNormal3fVertex3fSUN(s,t,nx,ny,nz,x,y,z);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTexCoord2fNormal3fVertex3fSUN");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTexCoord2fNormal3fVertex3fvSUN(const GLfloat* tc, const GLfloat* n, const GLfloat* v)
    {
    
    glad_glTexCoord2fNormal3fVertex3fvSUN(tc,n,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTexCoord2fNormal3fVertex3fvSUN");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTexCoord2fColor4fNormal3fVertex3fSUN(GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
    {
    
    glad_glTexCoord2fColor4fNormal3fVertex3fSUN(s,t,r,g,b,a,nx,ny,nz,x,y,z);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTexCoord2fColor4fNormal3fVertex3fSUN");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTexCoord2fColor4fNormal3fVertex3fvSUN(const GLfloat* tc, const GLfloat* c, const GLfloat* n, const GLfloat* v)
    {
    
    glad_glTexCoord2fColor4fNormal3fVertex3fvSUN(tc,c,n,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTexCoord2fColor4fNormal3fVertex3fvSUN");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTexCoord4fColor4fNormal3fVertex4fSUN(GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
    {
    
    glad_glTexCoord4fColor4fNormal3fVertex4fSUN(s,t,p,q,r,g,b,a,nx,ny,nz,x,y,z,w);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTexCoord4fColor4fNormal3fVertex4fSUN");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glTexCoord4fColor4fNormal3fVertex4fvSUN(const GLfloat* tc, const GLfloat* c, const GLfloat* n, const GLfloat* v)
    {
    
    glad_glTexCoord4fColor4fNormal3fVertex4fvSUN(tc,c,n,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glTexCoord4fColor4fNormal3fVertex4fvSUN");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glReplacementCodeuiVertex3fSUN(GLuint rc, GLfloat x, GLfloat y, GLfloat z)
    {
    
    glad_glReplacementCodeuiVertex3fSUN(rc,x,y,z);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glReplacementCodeuiVertex3fSUN");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glReplacementCodeuiVertex3fvSUN(const GLuint* rc, const GLfloat* v)
    {
    
    glad_glReplacementCodeuiVertex3fvSUN(rc,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glReplacementCodeuiVertex3fvSUN");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glReplacementCodeuiColor4ubVertex3fSUN(GLuint rc, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z)
    {
    
    glad_glReplacementCodeuiColor4ubVertex3fSUN(rc,r,g,b,a,x,y,z);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glReplacementCodeuiColor4ubVertex3fSUN");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glReplacementCodeuiColor4ubVertex3fvSUN(const GLuint* rc, const GLubyte* c, const GLfloat* v)
    {
    
    glad_glReplacementCodeuiColor4ubVertex3fvSUN(rc,c,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glReplacementCodeuiColor4ubVertex3fvSUN");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glReplacementCodeuiColor3fVertex3fSUN(GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z)
    {
    
    glad_glReplacementCodeuiColor3fVertex3fSUN(rc,r,g,b,x,y,z);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glReplacementCodeuiColor3fVertex3fSUN");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glReplacementCodeuiColor3fVertex3fvSUN(const GLuint* rc, const GLfloat* c, const GLfloat* v)
    {
    
    glad_glReplacementCodeuiColor3fVertex3fvSUN(rc,c,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glReplacementCodeuiColor3fVertex3fvSUN");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glReplacementCodeuiNormal3fVertex3fSUN(GLuint rc, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
    {
    
    glad_glReplacementCodeuiNormal3fVertex3fSUN(rc,nx,ny,nz,x,y,z);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glReplacementCodeuiNormal3fVertex3fSUN");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glReplacementCodeuiNormal3fVertex3fvSUN(const GLuint* rc, const GLfloat* n, const GLfloat* v)
    {
    
    glad_glReplacementCodeuiNormal3fVertex3fvSUN(rc,n,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glReplacementCodeuiNormal3fVertex3fvSUN");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glReplacementCodeuiColor4fNormal3fVertex3fSUN(GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
    {
    
    glad_glReplacementCodeuiColor4fNormal3fVertex3fSUN(rc,r,g,b,a,nx,ny,nz,x,y,z);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glReplacementCodeuiColor4fNormal3fVertex3fSUN");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glReplacementCodeuiColor4fNormal3fVertex3fvSUN(const GLuint* rc, const GLfloat* c, const GLfloat* n, const GLfloat* v)
    {
    
    glad_glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc,c,n,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glReplacementCodeuiColor4fNormal3fVertex3fvSUN");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glReplacementCodeuiTexCoord2fVertex3fSUN(GLuint rc, GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z)
    {
    
    glad_glReplacementCodeuiTexCoord2fVertex3fSUN(rc,s,t,x,y,z);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glReplacementCodeuiTexCoord2fVertex3fSUN");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glReplacementCodeuiTexCoord2fVertex3fvSUN(const GLuint* rc, const GLfloat* tc, const GLfloat* v)
    {
    
    glad_glReplacementCodeuiTexCoord2fVertex3fvSUN(rc,tc,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glReplacementCodeuiTexCoord2fVertex3fvSUN");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(GLuint rc, GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
    {
    
    glad_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(rc,s,t,nx,ny,nz,x,y,z);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(const GLuint* rc, const GLfloat* tc, const GLfloat* n, const GLfloat* v)
    {
    
    glad_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc,tc,n,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(GLuint rc, GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
    {
    
    glad_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(rc,s,t,r,g,b,a,nx,ny,nz,x,y,z);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }

    void __cdecl glwrap_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(const GLuint* rc, const GLfloat* tc, const GLfloat* c, const GLfloat* n, const GLfloat* v)
    {
    
    glad_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc,tc,c,n,v);
	
			int error = glad_glGetError();
			if (error != 0) {
				printf("gl error %d on %s\n", error, "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN");
				//printf("%p\n", __builtin_extract_return_addr (__builtin_return_address (0)));
			}
			
	
    }
std::unordered_map<const char *, void *> GL_WRAP_FUNCS = {
{"glAccum", (void *)glwrap_glAccum},
{"glAlphaFunc", (void *)glwrap_glAlphaFunc},
{"glAreTexturesResident", (void *)glwrap_glAreTexturesResident},
{"glArrayElement", (void *)glwrap_glArrayElement},
{"glBegin", (void *)glwrap_glBegin},
{"glBindTexture", (void *)glwrap_glBindTexture},
{"glBitmap", (void *)glwrap_glBitmap},
{"glBlendFunc", (void *)glwrap_glBlendFunc},
{"glCallList", (void *)glwrap_glCallList},
{"glCallLists", (void *)glwrap_glCallLists},
{"glClear", (void *)glwrap_glClear},
{"glClearAccum", (void *)glwrap_glClearAccum},
{"glClearColor", (void *)glwrap_glClearColor},
{"glClearDepth", (void *)glwrap_glClearDepth},
{"glClearIndex", (void *)glwrap_glClearIndex},
{"glClearStencil", (void *)glwrap_glClearStencil},
{"glClipPlane", (void *)glwrap_glClipPlane},
{"glColor3b", (void *)glwrap_glColor3b},
{"glColor3bv", (void *)glwrap_glColor3bv},
{"glColor3d", (void *)glwrap_glColor3d},
{"glColor3dv", (void *)glwrap_glColor3dv},
{"glColor3f", (void *)glwrap_glColor3f},
{"glColor3fv", (void *)glwrap_glColor3fv},
{"glColor3i", (void *)glwrap_glColor3i},
{"glColor3iv", (void *)glwrap_glColor3iv},
{"glColor3s", (void *)glwrap_glColor3s},
{"glColor3sv", (void *)glwrap_glColor3sv},
{"glColor3ub", (void *)glwrap_glColor3ub},
{"glColor3ubv", (void *)glwrap_glColor3ubv},
{"glColor3ui", (void *)glwrap_glColor3ui},
{"glColor3uiv", (void *)glwrap_glColor3uiv},
{"glColor3us", (void *)glwrap_glColor3us},
{"glColor3usv", (void *)glwrap_glColor3usv},
{"glColor4b", (void *)glwrap_glColor4b},
{"glColor4bv", (void *)glwrap_glColor4bv},
{"glColor4d", (void *)glwrap_glColor4d},
{"glColor4dv", (void *)glwrap_glColor4dv},
{"glColor4f", (void *)glwrap_glColor4f},
{"glColor4fv", (void *)glwrap_glColor4fv},
{"glColor4i", (void *)glwrap_glColor4i},
{"glColor4iv", (void *)glwrap_glColor4iv},
{"glColor4s", (void *)glwrap_glColor4s},
{"glColor4sv", (void *)glwrap_glColor4sv},
{"glColor4ub", (void *)glwrap_glColor4ub},
{"glColor4ubv", (void *)glwrap_glColor4ubv},
{"glColor4ui", (void *)glwrap_glColor4ui},
{"glColor4uiv", (void *)glwrap_glColor4uiv},
{"glColor4us", (void *)glwrap_glColor4us},
{"glColor4usv", (void *)glwrap_glColor4usv},
{"glColorMask", (void *)glwrap_glColorMask},
{"glColorMaterial", (void *)glwrap_glColorMaterial},
{"glColorPointer", (void *)glwrap_glColorPointer},
{"glCopyPixels", (void *)glwrap_glCopyPixels},
{"glCopyTexImage1D", (void *)glwrap_glCopyTexImage1D},
{"glCopyTexImage2D", (void *)glwrap_glCopyTexImage2D},
{"glCopyTexSubImage1D", (void *)glwrap_glCopyTexSubImage1D},
{"glCopyTexSubImage2D", (void *)glwrap_glCopyTexSubImage2D},
{"glCullFace", (void *)glwrap_glCullFace},
{"glDeleteLists", (void *)glwrap_glDeleteLists},
{"glDeleteTextures", (void *)glwrap_glDeleteTextures},
{"glDepthFunc", (void *)glwrap_glDepthFunc},
{"glDepthMask", (void *)glwrap_glDepthMask},
{"glDepthRange", (void *)glwrap_glDepthRange},
{"glDisable", (void *)glwrap_glDisable},
{"glDisableClientState", (void *)glwrap_glDisableClientState},
{"glDrawArrays", (void *)glwrap_glDrawArrays},
{"glDrawBuffer", (void *)glwrap_glDrawBuffer},
{"glDrawElements", (void *)glwrap_glDrawElements},
{"glDrawPixels", (void *)glwrap_glDrawPixels},
{"glEdgeFlag", (void *)glwrap_glEdgeFlag},
{"glEdgeFlagPointer", (void *)glwrap_glEdgeFlagPointer},
{"glEdgeFlagv", (void *)glwrap_glEdgeFlagv},
{"glEnable", (void *)glwrap_glEnable},
{"glEnableClientState", (void *)glwrap_glEnableClientState},
{"glEnd", (void *)glwrap_glEnd},
{"glEndList", (void *)glwrap_glEndList},
{"glEvalCoord1d", (void *)glwrap_glEvalCoord1d},
{"glEvalCoord1dv", (void *)glwrap_glEvalCoord1dv},
{"glEvalCoord1f", (void *)glwrap_glEvalCoord1f},
{"glEvalCoord1fv", (void *)glwrap_glEvalCoord1fv},
{"glEvalCoord2d", (void *)glwrap_glEvalCoord2d},
{"glEvalCoord2dv", (void *)glwrap_glEvalCoord2dv},
{"glEvalCoord2f", (void *)glwrap_glEvalCoord2f},
{"glEvalCoord2fv", (void *)glwrap_glEvalCoord2fv},
{"glEvalMesh1", (void *)glwrap_glEvalMesh1},
{"glEvalMesh2", (void *)glwrap_glEvalMesh2},
{"glEvalPoint1", (void *)glwrap_glEvalPoint1},
{"glEvalPoint2", (void *)glwrap_glEvalPoint2},
{"glFeedbackBuffer", (void *)glwrap_glFeedbackBuffer},
{"glFinish", (void *)glwrap_glFinish},
{"glFlush", (void *)glwrap_glFlush},
{"glFogf", (void *)glwrap_glFogf},
{"glFogfv", (void *)glwrap_glFogfv},
{"glFogi", (void *)glwrap_glFogi},
{"glFogiv", (void *)glwrap_glFogiv},
{"glFrontFace", (void *)glwrap_glFrontFace},
{"glFrustum", (void *)glwrap_glFrustum},
{"glGenLists", (void *)glwrap_glGenLists},
{"glGenTextures", (void *)glwrap_glGenTextures},
{"glGetBooleanv", (void *)glwrap_glGetBooleanv},
{"glGetClipPlane", (void *)glwrap_glGetClipPlane},
{"glGetDoublev", (void *)glwrap_glGetDoublev},
{"glGetError", (void *)glwrap_glGetError},
{"glGetFloatv", (void *)glwrap_glGetFloatv},
{"glGetIntegerv", (void *)glwrap_glGetIntegerv},
{"glGetLightfv", (void *)glwrap_glGetLightfv},
{"glGetLightiv", (void *)glwrap_glGetLightiv},
{"glGetMapdv", (void *)glwrap_glGetMapdv},
{"glGetMapfv", (void *)glwrap_glGetMapfv},
{"glGetMapiv", (void *)glwrap_glGetMapiv},
{"glGetMaterialfv", (void *)glwrap_glGetMaterialfv},
{"glGetMaterialiv", (void *)glwrap_glGetMaterialiv},
{"glGetPixelMapfv", (void *)glwrap_glGetPixelMapfv},
{"glGetPixelMapuiv", (void *)glwrap_glGetPixelMapuiv},
{"glGetPixelMapusv", (void *)glwrap_glGetPixelMapusv},
{"glGetPointerv", (void *)glwrap_glGetPointerv},
{"glGetPolygonStipple", (void *)glwrap_glGetPolygonStipple},
{"glGetString", (void *)glwrap_glGetString},
{"glGetTexEnvfv", (void *)glwrap_glGetTexEnvfv},
{"glGetTexEnviv", (void *)glwrap_glGetTexEnviv},
{"glGetTexGendv", (void *)glwrap_glGetTexGendv},
{"glGetTexGenfv", (void *)glwrap_glGetTexGenfv},
{"glGetTexGeniv", (void *)glwrap_glGetTexGeniv},
{"glGetTexImage", (void *)glwrap_glGetTexImage},
{"glGetTexLevelParameterfv", (void *)glwrap_glGetTexLevelParameterfv},
{"glGetTexLevelParameteriv", (void *)glwrap_glGetTexLevelParameteriv},
{"glGetTexParameterfv", (void *)glwrap_glGetTexParameterfv},
{"glGetTexParameteriv", (void *)glwrap_glGetTexParameteriv},
{"glHint", (void *)glwrap_glHint},
{"glIndexMask", (void *)glwrap_glIndexMask},
{"glIndexPointer", (void *)glwrap_glIndexPointer},
{"glIndexd", (void *)glwrap_glIndexd},
{"glIndexdv", (void *)glwrap_glIndexdv},
{"glIndexf", (void *)glwrap_glIndexf},
{"glIndexfv", (void *)glwrap_glIndexfv},
{"glIndexi", (void *)glwrap_glIndexi},
{"glIndexiv", (void *)glwrap_glIndexiv},
{"glIndexs", (void *)glwrap_glIndexs},
{"glIndexsv", (void *)glwrap_glIndexsv},
{"glIndexub", (void *)glwrap_glIndexub},
{"glIndexubv", (void *)glwrap_glIndexubv},
{"glInitNames", (void *)glwrap_glInitNames},
{"glInterleavedArrays", (void *)glwrap_glInterleavedArrays},
{"glIsEnabled", (void *)glwrap_glIsEnabled},
{"glIsList", (void *)glwrap_glIsList},
{"glIsTexture", (void *)glwrap_glIsTexture},
{"glLightModelf", (void *)glwrap_glLightModelf},
{"glLightModelfv", (void *)glwrap_glLightModelfv},
{"glLightModeli", (void *)glwrap_glLightModeli},
{"glLightModeliv", (void *)glwrap_glLightModeliv},
{"glLightf", (void *)glwrap_glLightf},
{"glLightfv", (void *)glwrap_glLightfv},
{"glLighti", (void *)glwrap_glLighti},
{"glLightiv", (void *)glwrap_glLightiv},
{"glLineStipple", (void *)glwrap_glLineStipple},
{"glLineWidth", (void *)glwrap_glLineWidth},
{"glListBase", (void *)glwrap_glListBase},
{"glLoadIdentity", (void *)glwrap_glLoadIdentity},
{"glLoadMatrixd", (void *)glwrap_glLoadMatrixd},
{"glLoadMatrixf", (void *)glwrap_glLoadMatrixf},
{"glLoadName", (void *)glwrap_glLoadName},
{"glLogicOp", (void *)glwrap_glLogicOp},
{"glMap1d", (void *)glwrap_glMap1d},
{"glMap1f", (void *)glwrap_glMap1f},
{"glMap2d", (void *)glwrap_glMap2d},
{"glMap2f", (void *)glwrap_glMap2f},
{"glMapGrid1d", (void *)glwrap_glMapGrid1d},
{"glMapGrid1f", (void *)glwrap_glMapGrid1f},
{"glMapGrid2d", (void *)glwrap_glMapGrid2d},
{"glMapGrid2f", (void *)glwrap_glMapGrid2f},
{"glMaterialf", (void *)glwrap_glMaterialf},
{"glMaterialfv", (void *)glwrap_glMaterialfv},
{"glMateriali", (void *)glwrap_glMateriali},
{"glMaterialiv", (void *)glwrap_glMaterialiv},
{"glMatrixMode", (void *)glwrap_glMatrixMode},
{"glMultMatrixd", (void *)glwrap_glMultMatrixd},
{"glMultMatrixf", (void *)glwrap_glMultMatrixf},
{"glNewList", (void *)glwrap_glNewList},
{"glNormal3b", (void *)glwrap_glNormal3b},
{"glNormal3bv", (void *)glwrap_glNormal3bv},
{"glNormal3d", (void *)glwrap_glNormal3d},
{"glNormal3dv", (void *)glwrap_glNormal3dv},
{"glNormal3f", (void *)glwrap_glNormal3f},
{"glNormal3fv", (void *)glwrap_glNormal3fv},
{"glNormal3i", (void *)glwrap_glNormal3i},
{"glNormal3iv", (void *)glwrap_glNormal3iv},
{"glNormal3s", (void *)glwrap_glNormal3s},
{"glNormal3sv", (void *)glwrap_glNormal3sv},
{"glNormalPointer", (void *)glwrap_glNormalPointer},
{"glOrtho", (void *)glwrap_glOrtho},
{"glPassThrough", (void *)glwrap_glPassThrough},
{"glPixelMapfv", (void *)glwrap_glPixelMapfv},
{"glPixelMapuiv", (void *)glwrap_glPixelMapuiv},
{"glPixelMapusv", (void *)glwrap_glPixelMapusv},
{"glPixelStoref", (void *)glwrap_glPixelStoref},
{"glPixelStorei", (void *)glwrap_glPixelStorei},
{"glPixelTransferf", (void *)glwrap_glPixelTransferf},
{"glPixelTransferi", (void *)glwrap_glPixelTransferi},
{"glPixelZoom", (void *)glwrap_glPixelZoom},
{"glPointSize", (void *)glwrap_glPointSize},
{"glPolygonMode", (void *)glwrap_glPolygonMode},
{"glPolygonOffset", (void *)glwrap_glPolygonOffset},
{"glPolygonStipple", (void *)glwrap_glPolygonStipple},
{"glPopAttrib", (void *)glwrap_glPopAttrib},
{"glPopClientAttrib", (void *)glwrap_glPopClientAttrib},
{"glPopMatrix", (void *)glwrap_glPopMatrix},
{"glPopName", (void *)glwrap_glPopName},
{"glPrioritizeTextures", (void *)glwrap_glPrioritizeTextures},
{"glPushAttrib", (void *)glwrap_glPushAttrib},
{"glPushClientAttrib", (void *)glwrap_glPushClientAttrib},
{"glPushMatrix", (void *)glwrap_glPushMatrix},
{"glPushName", (void *)glwrap_glPushName},
{"glRasterPos2d", (void *)glwrap_glRasterPos2d},
{"glRasterPos2dv", (void *)glwrap_glRasterPos2dv},
{"glRasterPos2f", (void *)glwrap_glRasterPos2f},
{"glRasterPos2fv", (void *)glwrap_glRasterPos2fv},
{"glRasterPos2i", (void *)glwrap_glRasterPos2i},
{"glRasterPos2iv", (void *)glwrap_glRasterPos2iv},
{"glRasterPos2s", (void *)glwrap_glRasterPos2s},
{"glRasterPos2sv", (void *)glwrap_glRasterPos2sv},
{"glRasterPos3d", (void *)glwrap_glRasterPos3d},
{"glRasterPos3dv", (void *)glwrap_glRasterPos3dv},
{"glRasterPos3f", (void *)glwrap_glRasterPos3f},
{"glRasterPos3fv", (void *)glwrap_glRasterPos3fv},
{"glRasterPos3i", (void *)glwrap_glRasterPos3i},
{"glRasterPos3iv", (void *)glwrap_glRasterPos3iv},
{"glRasterPos3s", (void *)glwrap_glRasterPos3s},
{"glRasterPos3sv", (void *)glwrap_glRasterPos3sv},
{"glRasterPos4d", (void *)glwrap_glRasterPos4d},
{"glRasterPos4dv", (void *)glwrap_glRasterPos4dv},
{"glRasterPos4f", (void *)glwrap_glRasterPos4f},
{"glRasterPos4fv", (void *)glwrap_glRasterPos4fv},
{"glRasterPos4i", (void *)glwrap_glRasterPos4i},
{"glRasterPos4iv", (void *)glwrap_glRasterPos4iv},
{"glRasterPos4s", (void *)glwrap_glRasterPos4s},
{"glRasterPos4sv", (void *)glwrap_glRasterPos4sv},
{"glReadBuffer", (void *)glwrap_glReadBuffer},
{"glReadPixels", (void *)glwrap_glReadPixels},
{"glRectd", (void *)glwrap_glRectd},
{"glRectdv", (void *)glwrap_glRectdv},
{"glRectf", (void *)glwrap_glRectf},
{"glRectfv", (void *)glwrap_glRectfv},
{"glRecti", (void *)glwrap_glRecti},
{"glRectiv", (void *)glwrap_glRectiv},
{"glRects", (void *)glwrap_glRects},
{"glRectsv", (void *)glwrap_glRectsv},
{"glRenderMode", (void *)glwrap_glRenderMode},
{"glRotated", (void *)glwrap_glRotated},
{"glRotatef", (void *)glwrap_glRotatef},
{"glScaled", (void *)glwrap_glScaled},
{"glScalef", (void *)glwrap_glScalef},
{"glScissor", (void *)glwrap_glScissor},
{"glSelectBuffer", (void *)glwrap_glSelectBuffer},
{"glShadeModel", (void *)glwrap_glShadeModel},
{"glStencilFunc", (void *)glwrap_glStencilFunc},
{"glStencilMask", (void *)glwrap_glStencilMask},
{"glStencilOp", (void *)glwrap_glStencilOp},
{"glTexCoord1d", (void *)glwrap_glTexCoord1d},
{"glTexCoord1dv", (void *)glwrap_glTexCoord1dv},
{"glTexCoord1f", (void *)glwrap_glTexCoord1f},
{"glTexCoord1fv", (void *)glwrap_glTexCoord1fv},
{"glTexCoord1i", (void *)glwrap_glTexCoord1i},
{"glTexCoord1iv", (void *)glwrap_glTexCoord1iv},
{"glTexCoord1s", (void *)glwrap_glTexCoord1s},
{"glTexCoord1sv", (void *)glwrap_glTexCoord1sv},
{"glTexCoord2d", (void *)glwrap_glTexCoord2d},
{"glTexCoord2dv", (void *)glwrap_glTexCoord2dv},
{"glTexCoord2f", (void *)glwrap_glTexCoord2f},
{"glTexCoord2fv", (void *)glwrap_glTexCoord2fv},
{"glTexCoord2i", (void *)glwrap_glTexCoord2i},
{"glTexCoord2iv", (void *)glwrap_glTexCoord2iv},
{"glTexCoord2s", (void *)glwrap_glTexCoord2s},
{"glTexCoord2sv", (void *)glwrap_glTexCoord2sv},
{"glTexCoord3d", (void *)glwrap_glTexCoord3d},
{"glTexCoord3dv", (void *)glwrap_glTexCoord3dv},
{"glTexCoord3f", (void *)glwrap_glTexCoord3f},
{"glTexCoord3fv", (void *)glwrap_glTexCoord3fv},
{"glTexCoord3i", (void *)glwrap_glTexCoord3i},
{"glTexCoord3iv", (void *)glwrap_glTexCoord3iv},
{"glTexCoord3s", (void *)glwrap_glTexCoord3s},
{"glTexCoord3sv", (void *)glwrap_glTexCoord3sv},
{"glTexCoord4d", (void *)glwrap_glTexCoord4d},
{"glTexCoord4dv", (void *)glwrap_glTexCoord4dv},
{"glTexCoord4f", (void *)glwrap_glTexCoord4f},
{"glTexCoord4fv", (void *)glwrap_glTexCoord4fv},
{"glTexCoord4i", (void *)glwrap_glTexCoord4i},
{"glTexCoord4iv", (void *)glwrap_glTexCoord4iv},
{"glTexCoord4s", (void *)glwrap_glTexCoord4s},
{"glTexCoord4sv", (void *)glwrap_glTexCoord4sv},
{"glTexCoordPointer", (void *)glwrap_glTexCoordPointer},
{"glTexEnvf", (void *)glwrap_glTexEnvf},
{"glTexEnvfv", (void *)glwrap_glTexEnvfv},
{"glTexEnvi", (void *)glwrap_glTexEnvi},
{"glTexEnviv", (void *)glwrap_glTexEnviv},
{"glTexGend", (void *)glwrap_glTexGend},
{"glTexGendv", (void *)glwrap_glTexGendv},
{"glTexGenf", (void *)glwrap_glTexGenf},
{"glTexGenfv", (void *)glwrap_glTexGenfv},
{"glTexGeni", (void *)glwrap_glTexGeni},
{"glTexGeniv", (void *)glwrap_glTexGeniv},
{"glTexImage1D", (void *)glwrap_glTexImage1D},
{"glTexImage2D", (void *)glwrap_glTexImage2D},
{"glTexParameterf", (void *)glwrap_glTexParameterf},
{"glTexParameterfv", (void *)glwrap_glTexParameterfv},
{"glTexParameteri", (void *)glwrap_glTexParameteri},
{"glTexParameteriv", (void *)glwrap_glTexParameteriv},
{"glTexSubImage1D", (void *)glwrap_glTexSubImage1D},
{"glTexSubImage2D", (void *)glwrap_glTexSubImage2D},
{"glTranslated", (void *)glwrap_glTranslated},
{"glTranslatef", (void *)glwrap_glTranslatef},
{"glVertex2d", (void *)glwrap_glVertex2d},
{"glVertex2dv", (void *)glwrap_glVertex2dv},
{"glVertex2f", (void *)glwrap_glVertex2f},
{"glVertex2fv", (void *)glwrap_glVertex2fv},
{"glVertex2i", (void *)glwrap_glVertex2i},
{"glVertex2iv", (void *)glwrap_glVertex2iv},
{"glVertex2s", (void *)glwrap_glVertex2s},
{"glVertex2sv", (void *)glwrap_glVertex2sv},
{"glVertex3d", (void *)glwrap_glVertex3d},
{"glVertex3dv", (void *)glwrap_glVertex3dv},
{"glVertex3f", (void *)glwrap_glVertex3f},
{"glVertex3fv", (void *)glwrap_glVertex3fv},
{"glVertex3i", (void *)glwrap_glVertex3i},
{"glVertex3iv", (void *)glwrap_glVertex3iv},
{"glVertex3s", (void *)glwrap_glVertex3s},
{"glVertex3sv", (void *)glwrap_glVertex3sv},
{"glVertex4d", (void *)glwrap_glVertex4d},
{"glVertex4dv", (void *)glwrap_glVertex4dv},
{"glVertex4f", (void *)glwrap_glVertex4f},
{"glVertex4fv", (void *)glwrap_glVertex4fv},
{"glVertex4i", (void *)glwrap_glVertex4i},
{"glVertex4iv", (void *)glwrap_glVertex4iv},
{"glVertex4s", (void *)glwrap_glVertex4s},
{"glVertex4sv", (void *)glwrap_glVertex4sv},
{"glVertexPointer", (void *)glwrap_glVertexPointer},
{"glViewport", (void *)glwrap_glViewport},
{"glDrawRangeElements", (void *)glwrap_glDrawRangeElements},
{"glTexImage3D", (void *)glwrap_glTexImage3D},
{"glTexSubImage3D", (void *)glwrap_glTexSubImage3D},
{"glCopyTexSubImage3D", (void *)glwrap_glCopyTexSubImage3D},
{"glActiveTexture", (void *)glwrap_glActiveTexture},
{"glSampleCoverage", (void *)glwrap_glSampleCoverage},
{"glCompressedTexImage3D", (void *)glwrap_glCompressedTexImage3D},
{"glCompressedTexImage2D", (void *)glwrap_glCompressedTexImage2D},
{"glCompressedTexImage1D", (void *)glwrap_glCompressedTexImage1D},
{"glCompressedTexSubImage3D", (void *)glwrap_glCompressedTexSubImage3D},
{"glCompressedTexSubImage2D", (void *)glwrap_glCompressedTexSubImage2D},
{"glCompressedTexSubImage1D", (void *)glwrap_glCompressedTexSubImage1D},
{"glGetCompressedTexImage", (void *)glwrap_glGetCompressedTexImage},
{"glClientActiveTexture", (void *)glwrap_glClientActiveTexture},
{"glMultiTexCoord1d", (void *)glwrap_glMultiTexCoord1d},
{"glMultiTexCoord1dv", (void *)glwrap_glMultiTexCoord1dv},
{"glMultiTexCoord1f", (void *)glwrap_glMultiTexCoord1f},
{"glMultiTexCoord1fv", (void *)glwrap_glMultiTexCoord1fv},
{"glMultiTexCoord1i", (void *)glwrap_glMultiTexCoord1i},
{"glMultiTexCoord1iv", (void *)glwrap_glMultiTexCoord1iv},
{"glMultiTexCoord1s", (void *)glwrap_glMultiTexCoord1s},
{"glMultiTexCoord1sv", (void *)glwrap_glMultiTexCoord1sv},
{"glMultiTexCoord2d", (void *)glwrap_glMultiTexCoord2d},
{"glMultiTexCoord2dv", (void *)glwrap_glMultiTexCoord2dv},
{"glMultiTexCoord2f", (void *)glwrap_glMultiTexCoord2f},
{"glMultiTexCoord2fv", (void *)glwrap_glMultiTexCoord2fv},
{"glMultiTexCoord2i", (void *)glwrap_glMultiTexCoord2i},
{"glMultiTexCoord2iv", (void *)glwrap_glMultiTexCoord2iv},
{"glMultiTexCoord2s", (void *)glwrap_glMultiTexCoord2s},
{"glMultiTexCoord2sv", (void *)glwrap_glMultiTexCoord2sv},
{"glMultiTexCoord3d", (void *)glwrap_glMultiTexCoord3d},
{"glMultiTexCoord3dv", (void *)glwrap_glMultiTexCoord3dv},
{"glMultiTexCoord3f", (void *)glwrap_glMultiTexCoord3f},
{"glMultiTexCoord3fv", (void *)glwrap_glMultiTexCoord3fv},
{"glMultiTexCoord3i", (void *)glwrap_glMultiTexCoord3i},
{"glMultiTexCoord3iv", (void *)glwrap_glMultiTexCoord3iv},
{"glMultiTexCoord3s", (void *)glwrap_glMultiTexCoord3s},
{"glMultiTexCoord3sv", (void *)glwrap_glMultiTexCoord3sv},
{"glMultiTexCoord4d", (void *)glwrap_glMultiTexCoord4d},
{"glMultiTexCoord4dv", (void *)glwrap_glMultiTexCoord4dv},
{"glMultiTexCoord4f", (void *)glwrap_glMultiTexCoord4f},
{"glMultiTexCoord4fv", (void *)glwrap_glMultiTexCoord4fv},
{"glMultiTexCoord4i", (void *)glwrap_glMultiTexCoord4i},
{"glMultiTexCoord4iv", (void *)glwrap_glMultiTexCoord4iv},
{"glMultiTexCoord4s", (void *)glwrap_glMultiTexCoord4s},
{"glMultiTexCoord4sv", (void *)glwrap_glMultiTexCoord4sv},
{"glLoadTransposeMatrixf", (void *)glwrap_glLoadTransposeMatrixf},
{"glLoadTransposeMatrixd", (void *)glwrap_glLoadTransposeMatrixd},
{"glMultTransposeMatrixf", (void *)glwrap_glMultTransposeMatrixf},
{"glMultTransposeMatrixd", (void *)glwrap_glMultTransposeMatrixd},
{"glBlendFuncSeparate", (void *)glwrap_glBlendFuncSeparate},
{"glMultiDrawArrays", (void *)glwrap_glMultiDrawArrays},
{"glMultiDrawElements", (void *)glwrap_glMultiDrawElements},
{"glPointParameterf", (void *)glwrap_glPointParameterf},
{"glPointParameterfv", (void *)glwrap_glPointParameterfv},
{"glPointParameteri", (void *)glwrap_glPointParameteri},
{"glPointParameteriv", (void *)glwrap_glPointParameteriv},
{"glFogCoordf", (void *)glwrap_glFogCoordf},
{"glFogCoordfv", (void *)glwrap_glFogCoordfv},
{"glFogCoordd", (void *)glwrap_glFogCoordd},
{"glFogCoorddv", (void *)glwrap_glFogCoorddv},
{"glFogCoordPointer", (void *)glwrap_glFogCoordPointer},
{"glSecondaryColor3b", (void *)glwrap_glSecondaryColor3b},
{"glSecondaryColor3bv", (void *)glwrap_glSecondaryColor3bv},
{"glSecondaryColor3d", (void *)glwrap_glSecondaryColor3d},
{"glSecondaryColor3dv", (void *)glwrap_glSecondaryColor3dv},
{"glSecondaryColor3f", (void *)glwrap_glSecondaryColor3f},
{"glSecondaryColor3fv", (void *)glwrap_glSecondaryColor3fv},
{"glSecondaryColor3i", (void *)glwrap_glSecondaryColor3i},
{"glSecondaryColor3iv", (void *)glwrap_glSecondaryColor3iv},
{"glSecondaryColor3s", (void *)glwrap_glSecondaryColor3s},
{"glSecondaryColor3sv", (void *)glwrap_glSecondaryColor3sv},
{"glSecondaryColor3ub", (void *)glwrap_glSecondaryColor3ub},
{"glSecondaryColor3ubv", (void *)glwrap_glSecondaryColor3ubv},
{"glSecondaryColor3ui", (void *)glwrap_glSecondaryColor3ui},
{"glSecondaryColor3uiv", (void *)glwrap_glSecondaryColor3uiv},
{"glSecondaryColor3us", (void *)glwrap_glSecondaryColor3us},
{"glSecondaryColor3usv", (void *)glwrap_glSecondaryColor3usv},
{"glSecondaryColorPointer", (void *)glwrap_glSecondaryColorPointer},
{"glWindowPos2d", (void *)glwrap_glWindowPos2d},
{"glWindowPos2dv", (void *)glwrap_glWindowPos2dv},
{"glWindowPos2f", (void *)glwrap_glWindowPos2f},
{"glWindowPos2fv", (void *)glwrap_glWindowPos2fv},
{"glWindowPos2i", (void *)glwrap_glWindowPos2i},
{"glWindowPos2iv", (void *)glwrap_glWindowPos2iv},
{"glWindowPos2s", (void *)glwrap_glWindowPos2s},
{"glWindowPos2sv", (void *)glwrap_glWindowPos2sv},
{"glWindowPos3d", (void *)glwrap_glWindowPos3d},
{"glWindowPos3dv", (void *)glwrap_glWindowPos3dv},
{"glWindowPos3f", (void *)glwrap_glWindowPos3f},
{"glWindowPos3fv", (void *)glwrap_glWindowPos3fv},
{"glWindowPos3i", (void *)glwrap_glWindowPos3i},
{"glWindowPos3iv", (void *)glwrap_glWindowPos3iv},
{"glWindowPos3s", (void *)glwrap_glWindowPos3s},
{"glWindowPos3sv", (void *)glwrap_glWindowPos3sv},
{"glBlendColor", (void *)glwrap_glBlendColor},
{"glBlendEquation", (void *)glwrap_glBlendEquation},
{"glGenQueries", (void *)glwrap_glGenQueries},
{"glDeleteQueries", (void *)glwrap_glDeleteQueries},
{"glIsQuery", (void *)glwrap_glIsQuery},
{"glBeginQuery", (void *)glwrap_glBeginQuery},
{"glEndQuery", (void *)glwrap_glEndQuery},
{"glGetQueryiv", (void *)glwrap_glGetQueryiv},
{"glGetQueryObjectiv", (void *)glwrap_glGetQueryObjectiv},
{"glGetQueryObjectuiv", (void *)glwrap_glGetQueryObjectuiv},
{"glBindBuffer", (void *)glwrap_glBindBuffer},
{"glDeleteBuffers", (void *)glwrap_glDeleteBuffers},
{"glGenBuffers", (void *)glwrap_glGenBuffers},
{"glIsBuffer", (void *)glwrap_glIsBuffer},
{"glBufferData", (void *)glwrap_glBufferData},
{"glBufferSubData", (void *)glwrap_glBufferSubData},
{"glGetBufferSubData", (void *)glwrap_glGetBufferSubData},
{"glMapBuffer", (void *)glwrap_glMapBuffer},
{"glUnmapBuffer", (void *)glwrap_glUnmapBuffer},
{"glGetBufferParameteriv", (void *)glwrap_glGetBufferParameteriv},
{"glGetBufferPointerv", (void *)glwrap_glGetBufferPointerv},
{"glBlendEquationSeparate", (void *)glwrap_glBlendEquationSeparate},
{"glDrawBuffers", (void *)glwrap_glDrawBuffers},
{"glStencilOpSeparate", (void *)glwrap_glStencilOpSeparate},
{"glStencilFuncSeparate", (void *)glwrap_glStencilFuncSeparate},
{"glStencilMaskSeparate", (void *)glwrap_glStencilMaskSeparate},
{"glAttachShader", (void *)glwrap_glAttachShader},
{"glBindAttribLocation", (void *)glwrap_glBindAttribLocation},
{"glCompileShader", (void *)glwrap_glCompileShader},
{"glCreateProgram", (void *)glwrap_glCreateProgram},
{"glCreateShader", (void *)glwrap_glCreateShader},
{"glDeleteProgram", (void *)glwrap_glDeleteProgram},
{"glDeleteShader", (void *)glwrap_glDeleteShader},
{"glDetachShader", (void *)glwrap_glDetachShader},
{"glDisableVertexAttribArray", (void *)glwrap_glDisableVertexAttribArray},
{"glEnableVertexAttribArray", (void *)glwrap_glEnableVertexAttribArray},
{"glGetActiveAttrib", (void *)glwrap_glGetActiveAttrib},
{"glGetActiveUniform", (void *)glwrap_glGetActiveUniform},
{"glGetAttachedShaders", (void *)glwrap_glGetAttachedShaders},
{"glGetAttribLocation", (void *)glwrap_glGetAttribLocation},
{"glGetProgramiv", (void *)glwrap_glGetProgramiv},
{"glGetProgramInfoLog", (void *)glwrap_glGetProgramInfoLog},
{"glGetShaderiv", (void *)glwrap_glGetShaderiv},
{"glGetShaderInfoLog", (void *)glwrap_glGetShaderInfoLog},
{"glGetShaderSource", (void *)glwrap_glGetShaderSource},
{"glGetUniformLocation", (void *)glwrap_glGetUniformLocation},
{"glGetUniformfv", (void *)glwrap_glGetUniformfv},
{"glGetUniformiv", (void *)glwrap_glGetUniformiv},
{"glGetVertexAttribdv", (void *)glwrap_glGetVertexAttribdv},
{"glGetVertexAttribfv", (void *)glwrap_glGetVertexAttribfv},
{"glGetVertexAttribiv", (void *)glwrap_glGetVertexAttribiv},
{"glGetVertexAttribPointerv", (void *)glwrap_glGetVertexAttribPointerv},
{"glIsProgram", (void *)glwrap_glIsProgram},
{"glIsShader", (void *)glwrap_glIsShader},
{"glLinkProgram", (void *)glwrap_glLinkProgram},
{"glShaderSource", (void *)glwrap_glShaderSource},
{"glUseProgram", (void *)glwrap_glUseProgram},
{"glUniform1f", (void *)glwrap_glUniform1f},
{"glUniform2f", (void *)glwrap_glUniform2f},
{"glUniform3f", (void *)glwrap_glUniform3f},
{"glUniform4f", (void *)glwrap_glUniform4f},
{"glUniform1i", (void *)glwrap_glUniform1i},
{"glUniform2i", (void *)glwrap_glUniform2i},
{"glUniform3i", (void *)glwrap_glUniform3i},
{"glUniform4i", (void *)glwrap_glUniform4i},
{"glUniform1fv", (void *)glwrap_glUniform1fv},
{"glUniform2fv", (void *)glwrap_glUniform2fv},
{"glUniform3fv", (void *)glwrap_glUniform3fv},
{"glUniform4fv", (void *)glwrap_glUniform4fv},
{"glUniform1iv", (void *)glwrap_glUniform1iv},
{"glUniform2iv", (void *)glwrap_glUniform2iv},
{"glUniform3iv", (void *)glwrap_glUniform3iv},
{"glUniform4iv", (void *)glwrap_glUniform4iv},
{"glUniformMatrix2fv", (void *)glwrap_glUniformMatrix2fv},
{"glUniformMatrix3fv", (void *)glwrap_glUniformMatrix3fv},
{"glUniformMatrix4fv", (void *)glwrap_glUniformMatrix4fv},
{"glValidateProgram", (void *)glwrap_glValidateProgram},
{"glVertexAttrib1d", (void *)glwrap_glVertexAttrib1d},
{"glVertexAttrib1dv", (void *)glwrap_glVertexAttrib1dv},
{"glVertexAttrib1f", (void *)glwrap_glVertexAttrib1f},
{"glVertexAttrib1fv", (void *)glwrap_glVertexAttrib1fv},
{"glVertexAttrib1s", (void *)glwrap_glVertexAttrib1s},
{"glVertexAttrib1sv", (void *)glwrap_glVertexAttrib1sv},
{"glVertexAttrib2d", (void *)glwrap_glVertexAttrib2d},
{"glVertexAttrib2dv", (void *)glwrap_glVertexAttrib2dv},
{"glVertexAttrib2f", (void *)glwrap_glVertexAttrib2f},
{"glVertexAttrib2fv", (void *)glwrap_glVertexAttrib2fv},
{"glVertexAttrib2s", (void *)glwrap_glVertexAttrib2s},
{"glVertexAttrib2sv", (void *)glwrap_glVertexAttrib2sv},
{"glVertexAttrib3d", (void *)glwrap_glVertexAttrib3d},
{"glVertexAttrib3dv", (void *)glwrap_glVertexAttrib3dv},
{"glVertexAttrib3f", (void *)glwrap_glVertexAttrib3f},
{"glVertexAttrib3fv", (void *)glwrap_glVertexAttrib3fv},
{"glVertexAttrib3s", (void *)glwrap_glVertexAttrib3s},
{"glVertexAttrib3sv", (void *)glwrap_glVertexAttrib3sv},
{"glVertexAttrib4Nbv", (void *)glwrap_glVertexAttrib4Nbv},
{"glVertexAttrib4Niv", (void *)glwrap_glVertexAttrib4Niv},
{"glVertexAttrib4Nsv", (void *)glwrap_glVertexAttrib4Nsv},
{"glVertexAttrib4Nub", (void *)glwrap_glVertexAttrib4Nub},
{"glVertexAttrib4Nubv", (void *)glwrap_glVertexAttrib4Nubv},
{"glVertexAttrib4Nuiv", (void *)glwrap_glVertexAttrib4Nuiv},
{"glVertexAttrib4Nusv", (void *)glwrap_glVertexAttrib4Nusv},
{"glVertexAttrib4bv", (void *)glwrap_glVertexAttrib4bv},
{"glVertexAttrib4d", (void *)glwrap_glVertexAttrib4d},
{"glVertexAttrib4dv", (void *)glwrap_glVertexAttrib4dv},
{"glVertexAttrib4f", (void *)glwrap_glVertexAttrib4f},
{"glVertexAttrib4fv", (void *)glwrap_glVertexAttrib4fv},
{"glVertexAttrib4iv", (void *)glwrap_glVertexAttrib4iv},
{"glVertexAttrib4s", (void *)glwrap_glVertexAttrib4s},
{"glVertexAttrib4sv", (void *)glwrap_glVertexAttrib4sv},
{"glVertexAttrib4ubv", (void *)glwrap_glVertexAttrib4ubv},
{"glVertexAttrib4uiv", (void *)glwrap_glVertexAttrib4uiv},
{"glVertexAttrib4usv", (void *)glwrap_glVertexAttrib4usv},
{"glVertexAttribPointer", (void *)glwrap_glVertexAttribPointer},
{"glUniformMatrix2x3fv", (void *)glwrap_glUniformMatrix2x3fv},
{"glUniformMatrix3x2fv", (void *)glwrap_glUniformMatrix3x2fv},
{"glUniformMatrix2x4fv", (void *)glwrap_glUniformMatrix2x4fv},
{"glUniformMatrix4x2fv", (void *)glwrap_glUniformMatrix4x2fv},
{"glUniformMatrix3x4fv", (void *)glwrap_glUniformMatrix3x4fv},
{"glUniformMatrix4x3fv", (void *)glwrap_glUniformMatrix4x3fv},
{"glColorMaski", (void *)glwrap_glColorMaski},
{"glGetBooleani_v", (void *)glwrap_glGetBooleani_v},
{"glGetIntegeri_v", (void *)glwrap_glGetIntegeri_v},
{"glEnablei", (void *)glwrap_glEnablei},
{"glDisablei", (void *)glwrap_glDisablei},
{"glIsEnabledi", (void *)glwrap_glIsEnabledi},
{"glBeginTransformFeedback", (void *)glwrap_glBeginTransformFeedback},
{"glEndTransformFeedback", (void *)glwrap_glEndTransformFeedback},
{"glBindBufferRange", (void *)glwrap_glBindBufferRange},
{"glBindBufferBase", (void *)glwrap_glBindBufferBase},
{"glTransformFeedbackVaryings", (void *)glwrap_glTransformFeedbackVaryings},
{"glGetTransformFeedbackVarying", (void *)glwrap_glGetTransformFeedbackVarying},
{"glClampColor", (void *)glwrap_glClampColor},
{"glBeginConditionalRender", (void *)glwrap_glBeginConditionalRender},
{"glEndConditionalRender", (void *)glwrap_glEndConditionalRender},
{"glVertexAttribIPointer", (void *)glwrap_glVertexAttribIPointer},
{"glGetVertexAttribIiv", (void *)glwrap_glGetVertexAttribIiv},
{"glGetVertexAttribIuiv", (void *)glwrap_glGetVertexAttribIuiv},
{"glVertexAttribI1i", (void *)glwrap_glVertexAttribI1i},
{"glVertexAttribI2i", (void *)glwrap_glVertexAttribI2i},
{"glVertexAttribI3i", (void *)glwrap_glVertexAttribI3i},
{"glVertexAttribI4i", (void *)glwrap_glVertexAttribI4i},
{"glVertexAttribI1ui", (void *)glwrap_glVertexAttribI1ui},
{"glVertexAttribI2ui", (void *)glwrap_glVertexAttribI2ui},
{"glVertexAttribI3ui", (void *)glwrap_glVertexAttribI3ui},
{"glVertexAttribI4ui", (void *)glwrap_glVertexAttribI4ui},
{"glVertexAttribI1iv", (void *)glwrap_glVertexAttribI1iv},
{"glVertexAttribI2iv", (void *)glwrap_glVertexAttribI2iv},
{"glVertexAttribI3iv", (void *)glwrap_glVertexAttribI3iv},
{"glVertexAttribI4iv", (void *)glwrap_glVertexAttribI4iv},
{"glVertexAttribI1uiv", (void *)glwrap_glVertexAttribI1uiv},
{"glVertexAttribI2uiv", (void *)glwrap_glVertexAttribI2uiv},
{"glVertexAttribI3uiv", (void *)glwrap_glVertexAttribI3uiv},
{"glVertexAttribI4uiv", (void *)glwrap_glVertexAttribI4uiv},
{"glVertexAttribI4bv", (void *)glwrap_glVertexAttribI4bv},
{"glVertexAttribI4sv", (void *)glwrap_glVertexAttribI4sv},
{"glVertexAttribI4ubv", (void *)glwrap_glVertexAttribI4ubv},
{"glVertexAttribI4usv", (void *)glwrap_glVertexAttribI4usv},
{"glGetUniformuiv", (void *)glwrap_glGetUniformuiv},
{"glBindFragDataLocation", (void *)glwrap_glBindFragDataLocation},
{"glGetFragDataLocation", (void *)glwrap_glGetFragDataLocation},
{"glUniform1ui", (void *)glwrap_glUniform1ui},
{"glUniform2ui", (void *)glwrap_glUniform2ui},
{"glUniform3ui", (void *)glwrap_glUniform3ui},
{"glUniform4ui", (void *)glwrap_glUniform4ui},
{"glUniform1uiv", (void *)glwrap_glUniform1uiv},
{"glUniform2uiv", (void *)glwrap_glUniform2uiv},
{"glUniform3uiv", (void *)glwrap_glUniform3uiv},
{"glUniform4uiv", (void *)glwrap_glUniform4uiv},
{"glTexParameterIiv", (void *)glwrap_glTexParameterIiv},
{"glTexParameterIuiv", (void *)glwrap_glTexParameterIuiv},
{"glGetTexParameterIiv", (void *)glwrap_glGetTexParameterIiv},
{"glGetTexParameterIuiv", (void *)glwrap_glGetTexParameterIuiv},
{"glClearBufferiv", (void *)glwrap_glClearBufferiv},
{"glClearBufferuiv", (void *)glwrap_glClearBufferuiv},
{"glClearBufferfv", (void *)glwrap_glClearBufferfv},
{"glClearBufferfi", (void *)glwrap_glClearBufferfi},
{"glGetStringi", (void *)glwrap_glGetStringi},
{"glIsRenderbuffer", (void *)glwrap_glIsRenderbuffer},
{"glBindRenderbuffer", (void *)glwrap_glBindRenderbuffer},
{"glDeleteRenderbuffers", (void *)glwrap_glDeleteRenderbuffers},
{"glGenRenderbuffers", (void *)glwrap_glGenRenderbuffers},
{"glRenderbufferStorage", (void *)glwrap_glRenderbufferStorage},
{"glGetRenderbufferParameteriv", (void *)glwrap_glGetRenderbufferParameteriv},
{"glIsFramebuffer", (void *)glwrap_glIsFramebuffer},
{"glBindFramebuffer", (void *)glwrap_glBindFramebuffer},
{"glDeleteFramebuffers", (void *)glwrap_glDeleteFramebuffers},
{"glGenFramebuffers", (void *)glwrap_glGenFramebuffers},
{"glCheckFramebufferStatus", (void *)glwrap_glCheckFramebufferStatus},
{"glFramebufferTexture1D", (void *)glwrap_glFramebufferTexture1D},
{"glFramebufferTexture2D", (void *)glwrap_glFramebufferTexture2D},
{"glFramebufferTexture3D", (void *)glwrap_glFramebufferTexture3D},
{"glFramebufferRenderbuffer", (void *)glwrap_glFramebufferRenderbuffer},
{"glGetFramebufferAttachmentParameteriv", (void *)glwrap_glGetFramebufferAttachmentParameteriv},
{"glGenerateMipmap", (void *)glwrap_glGenerateMipmap},
{"glBlitFramebuffer", (void *)glwrap_glBlitFramebuffer},
{"glRenderbufferStorageMultisample", (void *)glwrap_glRenderbufferStorageMultisample},
{"glFramebufferTextureLayer", (void *)glwrap_glFramebufferTextureLayer},
{"glMapBufferRange", (void *)glwrap_glMapBufferRange},
{"glFlushMappedBufferRange", (void *)glwrap_glFlushMappedBufferRange},
{"glBindVertexArray", (void *)glwrap_glBindVertexArray},
{"glDeleteVertexArrays", (void *)glwrap_glDeleteVertexArrays},
{"glGenVertexArrays", (void *)glwrap_glGenVertexArrays},
{"glIsVertexArray", (void *)glwrap_glIsVertexArray},
{"glDrawArraysInstanced", (void *)glwrap_glDrawArraysInstanced},
{"glDrawElementsInstanced", (void *)glwrap_glDrawElementsInstanced},
{"glTexBuffer", (void *)glwrap_glTexBuffer},
{"glPrimitiveRestartIndex", (void *)glwrap_glPrimitiveRestartIndex},
{"glCopyBufferSubData", (void *)glwrap_glCopyBufferSubData},
{"glGetUniformIndices", (void *)glwrap_glGetUniformIndices},
{"glGetActiveUniformsiv", (void *)glwrap_glGetActiveUniformsiv},
{"glGetActiveUniformName", (void *)glwrap_glGetActiveUniformName},
{"glGetUniformBlockIndex", (void *)glwrap_glGetUniformBlockIndex},
{"glGetActiveUniformBlockiv", (void *)glwrap_glGetActiveUniformBlockiv},
{"glGetActiveUniformBlockName", (void *)glwrap_glGetActiveUniformBlockName},
{"glUniformBlockBinding", (void *)glwrap_glUniformBlockBinding},
{"glDrawElementsBaseVertex", (void *)glwrap_glDrawElementsBaseVertex},
{"glDrawRangeElementsBaseVertex", (void *)glwrap_glDrawRangeElementsBaseVertex},
{"glDrawElementsInstancedBaseVertex", (void *)glwrap_glDrawElementsInstancedBaseVertex},
{"glMultiDrawElementsBaseVertex", (void *)glwrap_glMultiDrawElementsBaseVertex},
{"glProvokingVertex", (void *)glwrap_glProvokingVertex},
{"glFenceSync", (void *)glwrap_glFenceSync},
{"glIsSync", (void *)glwrap_glIsSync},
{"glDeleteSync", (void *)glwrap_glDeleteSync},
{"glClientWaitSync", (void *)glwrap_glClientWaitSync},
{"glWaitSync", (void *)glwrap_glWaitSync},
{"glGetInteger64v", (void *)glwrap_glGetInteger64v},
{"glGetSynciv", (void *)glwrap_glGetSynciv},
{"glGetInteger64i_v", (void *)glwrap_glGetInteger64i_v},
{"glGetBufferParameteri64v", (void *)glwrap_glGetBufferParameteri64v},
{"glFramebufferTexture", (void *)glwrap_glFramebufferTexture},
{"glTexImage2DMultisample", (void *)glwrap_glTexImage2DMultisample},
{"glTexImage3DMultisample", (void *)glwrap_glTexImage3DMultisample},
{"glGetMultisamplefv", (void *)glwrap_glGetMultisamplefv},
{"glSampleMaski", (void *)glwrap_glSampleMaski},
{"glBindFragDataLocationIndexed", (void *)glwrap_glBindFragDataLocationIndexed},
{"glGetFragDataIndex", (void *)glwrap_glGetFragDataIndex},
{"glGenSamplers", (void *)glwrap_glGenSamplers},
{"glDeleteSamplers", (void *)glwrap_glDeleteSamplers},
{"glIsSampler", (void *)glwrap_glIsSampler},
{"glBindSampler", (void *)glwrap_glBindSampler},
{"glSamplerParameteri", (void *)glwrap_glSamplerParameteri},
{"glSamplerParameteriv", (void *)glwrap_glSamplerParameteriv},
{"glSamplerParameterf", (void *)glwrap_glSamplerParameterf},
{"glSamplerParameterfv", (void *)glwrap_glSamplerParameterfv},
{"glSamplerParameterIiv", (void *)glwrap_glSamplerParameterIiv},
{"glSamplerParameterIuiv", (void *)glwrap_glSamplerParameterIuiv},
{"glGetSamplerParameteriv", (void *)glwrap_glGetSamplerParameteriv},
{"glGetSamplerParameterIiv", (void *)glwrap_glGetSamplerParameterIiv},
{"glGetSamplerParameterfv", (void *)glwrap_glGetSamplerParameterfv},
{"glGetSamplerParameterIuiv", (void *)glwrap_glGetSamplerParameterIuiv},
{"glQueryCounter", (void *)glwrap_glQueryCounter},
{"glGetQueryObjecti64v", (void *)glwrap_glGetQueryObjecti64v},
{"glGetQueryObjectui64v", (void *)glwrap_glGetQueryObjectui64v},
{"glVertexAttribDivisor", (void *)glwrap_glVertexAttribDivisor},
{"glVertexAttribP1ui", (void *)glwrap_glVertexAttribP1ui},
{"glVertexAttribP1uiv", (void *)glwrap_glVertexAttribP1uiv},
{"glVertexAttribP2ui", (void *)glwrap_glVertexAttribP2ui},
{"glVertexAttribP2uiv", (void *)glwrap_glVertexAttribP2uiv},
{"glVertexAttribP3ui", (void *)glwrap_glVertexAttribP3ui},
{"glVertexAttribP3uiv", (void *)glwrap_glVertexAttribP3uiv},
{"glVertexAttribP4ui", (void *)glwrap_glVertexAttribP4ui},
{"glVertexAttribP4uiv", (void *)glwrap_glVertexAttribP4uiv},
{"glVertexP2ui", (void *)glwrap_glVertexP2ui},
{"glVertexP2uiv", (void *)glwrap_glVertexP2uiv},
{"glVertexP3ui", (void *)glwrap_glVertexP3ui},
{"glVertexP3uiv", (void *)glwrap_glVertexP3uiv},
{"glVertexP4ui", (void *)glwrap_glVertexP4ui},
{"glVertexP4uiv", (void *)glwrap_glVertexP4uiv},
{"glTexCoordP1ui", (void *)glwrap_glTexCoordP1ui},
{"glTexCoordP1uiv", (void *)glwrap_glTexCoordP1uiv},
{"glTexCoordP2ui", (void *)glwrap_glTexCoordP2ui},
{"glTexCoordP2uiv", (void *)glwrap_glTexCoordP2uiv},
{"glTexCoordP3ui", (void *)glwrap_glTexCoordP3ui},
{"glTexCoordP3uiv", (void *)glwrap_glTexCoordP3uiv},
{"glTexCoordP4ui", (void *)glwrap_glTexCoordP4ui},
{"glTexCoordP4uiv", (void *)glwrap_glTexCoordP4uiv},
{"glMultiTexCoordP1ui", (void *)glwrap_glMultiTexCoordP1ui},
{"glMultiTexCoordP1uiv", (void *)glwrap_glMultiTexCoordP1uiv},
{"glMultiTexCoordP2ui", (void *)glwrap_glMultiTexCoordP2ui},
{"glMultiTexCoordP2uiv", (void *)glwrap_glMultiTexCoordP2uiv},
{"glMultiTexCoordP3ui", (void *)glwrap_glMultiTexCoordP3ui},
{"glMultiTexCoordP3uiv", (void *)glwrap_glMultiTexCoordP3uiv},
{"glMultiTexCoordP4ui", (void *)glwrap_glMultiTexCoordP4ui},
{"glMultiTexCoordP4uiv", (void *)glwrap_glMultiTexCoordP4uiv},
{"glNormalP3ui", (void *)glwrap_glNormalP3ui},
{"glNormalP3uiv", (void *)glwrap_glNormalP3uiv},
{"glColorP3ui", (void *)glwrap_glColorP3ui},
{"glColorP3uiv", (void *)glwrap_glColorP3uiv},
{"glColorP4ui", (void *)glwrap_glColorP4ui},
{"glColorP4uiv", (void *)glwrap_glColorP4uiv},
{"glSecondaryColorP3ui", (void *)glwrap_glSecondaryColorP3ui},
{"glSecondaryColorP3uiv", (void *)glwrap_glSecondaryColorP3uiv},
{"glMinSampleShading", (void *)glwrap_glMinSampleShading},
{"glBlendEquationi", (void *)glwrap_glBlendEquationi},
{"glBlendEquationSeparatei", (void *)glwrap_glBlendEquationSeparatei},
{"glBlendFunci", (void *)glwrap_glBlendFunci},
{"glBlendFuncSeparatei", (void *)glwrap_glBlendFuncSeparatei},
{"glDrawArraysIndirect", (void *)glwrap_glDrawArraysIndirect},
{"glDrawElementsIndirect", (void *)glwrap_glDrawElementsIndirect},
{"glUniform1d", (void *)glwrap_glUniform1d},
{"glUniform2d", (void *)glwrap_glUniform2d},
{"glUniform3d", (void *)glwrap_glUniform3d},
{"glUniform4d", (void *)glwrap_glUniform4d},
{"glUniform1dv", (void *)glwrap_glUniform1dv},
{"glUniform2dv", (void *)glwrap_glUniform2dv},
{"glUniform3dv", (void *)glwrap_glUniform3dv},
{"glUniform4dv", (void *)glwrap_glUniform4dv},
{"glUniformMatrix2dv", (void *)glwrap_glUniformMatrix2dv},
{"glUniformMatrix3dv", (void *)glwrap_glUniformMatrix3dv},
{"glUniformMatrix4dv", (void *)glwrap_glUniformMatrix4dv},
{"glUniformMatrix2x3dv", (void *)glwrap_glUniformMatrix2x3dv},
{"glUniformMatrix2x4dv", (void *)glwrap_glUniformMatrix2x4dv},
{"glUniformMatrix3x2dv", (void *)glwrap_glUniformMatrix3x2dv},
{"glUniformMatrix3x4dv", (void *)glwrap_glUniformMatrix3x4dv},
{"glUniformMatrix4x2dv", (void *)glwrap_glUniformMatrix4x2dv},
{"glUniformMatrix4x3dv", (void *)glwrap_glUniformMatrix4x3dv},
{"glGetUniformdv", (void *)glwrap_glGetUniformdv},
{"glGetSubroutineUniformLocation", (void *)glwrap_glGetSubroutineUniformLocation},
{"glGetSubroutineIndex", (void *)glwrap_glGetSubroutineIndex},
{"glGetActiveSubroutineUniformiv", (void *)glwrap_glGetActiveSubroutineUniformiv},
{"glGetActiveSubroutineUniformName", (void *)glwrap_glGetActiveSubroutineUniformName},
{"glGetActiveSubroutineName", (void *)glwrap_glGetActiveSubroutineName},
{"glUniformSubroutinesuiv", (void *)glwrap_glUniformSubroutinesuiv},
{"glGetUniformSubroutineuiv", (void *)glwrap_glGetUniformSubroutineuiv},
{"glGetProgramStageiv", (void *)glwrap_glGetProgramStageiv},
{"glPatchParameteri", (void *)glwrap_glPatchParameteri},
{"glPatchParameterfv", (void *)glwrap_glPatchParameterfv},
{"glBindTransformFeedback", (void *)glwrap_glBindTransformFeedback},
{"glDeleteTransformFeedbacks", (void *)glwrap_glDeleteTransformFeedbacks},
{"glGenTransformFeedbacks", (void *)glwrap_glGenTransformFeedbacks},
{"glIsTransformFeedback", (void *)glwrap_glIsTransformFeedback},
{"glPauseTransformFeedback", (void *)glwrap_glPauseTransformFeedback},
{"glResumeTransformFeedback", (void *)glwrap_glResumeTransformFeedback},
{"glDrawTransformFeedback", (void *)glwrap_glDrawTransformFeedback},
{"glDrawTransformFeedbackStream", (void *)glwrap_glDrawTransformFeedbackStream},
{"glBeginQueryIndexed", (void *)glwrap_glBeginQueryIndexed},
{"glEndQueryIndexed", (void *)glwrap_glEndQueryIndexed},
{"glGetQueryIndexediv", (void *)glwrap_glGetQueryIndexediv},
{"glReleaseShaderCompiler", (void *)glwrap_glReleaseShaderCompiler},
{"glShaderBinary", (void *)glwrap_glShaderBinary},
{"glGetShaderPrecisionFormat", (void *)glwrap_glGetShaderPrecisionFormat},
{"glDepthRangef", (void *)glwrap_glDepthRangef},
{"glClearDepthf", (void *)glwrap_glClearDepthf},
{"glGetProgramBinary", (void *)glwrap_glGetProgramBinary},
{"glProgramBinary", (void *)glwrap_glProgramBinary},
{"glProgramParameteri", (void *)glwrap_glProgramParameteri},
{"glUseProgramStages", (void *)glwrap_glUseProgramStages},
{"glActiveShaderProgram", (void *)glwrap_glActiveShaderProgram},
{"glCreateShaderProgramv", (void *)glwrap_glCreateShaderProgramv},
{"glBindProgramPipeline", (void *)glwrap_glBindProgramPipeline},
{"glDeleteProgramPipelines", (void *)glwrap_glDeleteProgramPipelines},
{"glGenProgramPipelines", (void *)glwrap_glGenProgramPipelines},
{"glIsProgramPipeline", (void *)glwrap_glIsProgramPipeline},
{"glGetProgramPipelineiv", (void *)glwrap_glGetProgramPipelineiv},
{"glProgramUniform1i", (void *)glwrap_glProgramUniform1i},
{"glProgramUniform1iv", (void *)glwrap_glProgramUniform1iv},
{"glProgramUniform1f", (void *)glwrap_glProgramUniform1f},
{"glProgramUniform1fv", (void *)glwrap_glProgramUniform1fv},
{"glProgramUniform1d", (void *)glwrap_glProgramUniform1d},
{"glProgramUniform1dv", (void *)glwrap_glProgramUniform1dv},
{"glProgramUniform1ui", (void *)glwrap_glProgramUniform1ui},
{"glProgramUniform1uiv", (void *)glwrap_glProgramUniform1uiv},
{"glProgramUniform2i", (void *)glwrap_glProgramUniform2i},
{"glProgramUniform2iv", (void *)glwrap_glProgramUniform2iv},
{"glProgramUniform2f", (void *)glwrap_glProgramUniform2f},
{"glProgramUniform2fv", (void *)glwrap_glProgramUniform2fv},
{"glProgramUniform2d", (void *)glwrap_glProgramUniform2d},
{"glProgramUniform2dv", (void *)glwrap_glProgramUniform2dv},
{"glProgramUniform2ui", (void *)glwrap_glProgramUniform2ui},
{"glProgramUniform2uiv", (void *)glwrap_glProgramUniform2uiv},
{"glProgramUniform3i", (void *)glwrap_glProgramUniform3i},
{"glProgramUniform3iv", (void *)glwrap_glProgramUniform3iv},
{"glProgramUniform3f", (void *)glwrap_glProgramUniform3f},
{"glProgramUniform3fv", (void *)glwrap_glProgramUniform3fv},
{"glProgramUniform3d", (void *)glwrap_glProgramUniform3d},
{"glProgramUniform3dv", (void *)glwrap_glProgramUniform3dv},
{"glProgramUniform3ui", (void *)glwrap_glProgramUniform3ui},
{"glProgramUniform3uiv", (void *)glwrap_glProgramUniform3uiv},
{"glProgramUniform4i", (void *)glwrap_glProgramUniform4i},
{"glProgramUniform4iv", (void *)glwrap_glProgramUniform4iv},
{"glProgramUniform4f", (void *)glwrap_glProgramUniform4f},
{"glProgramUniform4fv", (void *)glwrap_glProgramUniform4fv},
{"glProgramUniform4d", (void *)glwrap_glProgramUniform4d},
{"glProgramUniform4dv", (void *)glwrap_glProgramUniform4dv},
{"glProgramUniform4ui", (void *)glwrap_glProgramUniform4ui},
{"glProgramUniform4uiv", (void *)glwrap_glProgramUniform4uiv},
{"glProgramUniformMatrix2fv", (void *)glwrap_glProgramUniformMatrix2fv},
{"glProgramUniformMatrix3fv", (void *)glwrap_glProgramUniformMatrix3fv},
{"glProgramUniformMatrix4fv", (void *)glwrap_glProgramUniformMatrix4fv},
{"glProgramUniformMatrix2dv", (void *)glwrap_glProgramUniformMatrix2dv},
{"glProgramUniformMatrix3dv", (void *)glwrap_glProgramUniformMatrix3dv},
{"glProgramUniformMatrix4dv", (void *)glwrap_glProgramUniformMatrix4dv},
{"glProgramUniformMatrix2x3fv", (void *)glwrap_glProgramUniformMatrix2x3fv},
{"glProgramUniformMatrix3x2fv", (void *)glwrap_glProgramUniformMatrix3x2fv},
{"glProgramUniformMatrix2x4fv", (void *)glwrap_glProgramUniformMatrix2x4fv},
{"glProgramUniformMatrix4x2fv", (void *)glwrap_glProgramUniformMatrix4x2fv},
{"glProgramUniformMatrix3x4fv", (void *)glwrap_glProgramUniformMatrix3x4fv},
{"glProgramUniformMatrix4x3fv", (void *)glwrap_glProgramUniformMatrix4x3fv},
{"glProgramUniformMatrix2x3dv", (void *)glwrap_glProgramUniformMatrix2x3dv},
{"glProgramUniformMatrix3x2dv", (void *)glwrap_glProgramUniformMatrix3x2dv},
{"glProgramUniformMatrix2x4dv", (void *)glwrap_glProgramUniformMatrix2x4dv},
{"glProgramUniformMatrix4x2dv", (void *)glwrap_glProgramUniformMatrix4x2dv},
{"glProgramUniformMatrix3x4dv", (void *)glwrap_glProgramUniformMatrix3x4dv},
{"glProgramUniformMatrix4x3dv", (void *)glwrap_glProgramUniformMatrix4x3dv},
{"glValidateProgramPipeline", (void *)glwrap_glValidateProgramPipeline},
{"glGetProgramPipelineInfoLog", (void *)glwrap_glGetProgramPipelineInfoLog},
{"glVertexAttribL1d", (void *)glwrap_glVertexAttribL1d},
{"glVertexAttribL2d", (void *)glwrap_glVertexAttribL2d},
{"glVertexAttribL3d", (void *)glwrap_glVertexAttribL3d},
{"glVertexAttribL4d", (void *)glwrap_glVertexAttribL4d},
{"glVertexAttribL1dv", (void *)glwrap_glVertexAttribL1dv},
{"glVertexAttribL2dv", (void *)glwrap_glVertexAttribL2dv},
{"glVertexAttribL3dv", (void *)glwrap_glVertexAttribL3dv},
{"glVertexAttribL4dv", (void *)glwrap_glVertexAttribL4dv},
{"glVertexAttribLPointer", (void *)glwrap_glVertexAttribLPointer},
{"glGetVertexAttribLdv", (void *)glwrap_glGetVertexAttribLdv},
{"glViewportArrayv", (void *)glwrap_glViewportArrayv},
{"glViewportIndexedf", (void *)glwrap_glViewportIndexedf},
{"glViewportIndexedfv", (void *)glwrap_glViewportIndexedfv},
{"glScissorArrayv", (void *)glwrap_glScissorArrayv},
{"glScissorIndexed", (void *)glwrap_glScissorIndexed},
{"glScissorIndexedv", (void *)glwrap_glScissorIndexedv},
{"glDepthRangeArrayv", (void *)glwrap_glDepthRangeArrayv},
{"glDepthRangeIndexed", (void *)glwrap_glDepthRangeIndexed},
{"glGetFloati_v", (void *)glwrap_glGetFloati_v},
{"glGetDoublei_v", (void *)glwrap_glGetDoublei_v},
{"glDrawArraysInstancedBaseInstance", (void *)glwrap_glDrawArraysInstancedBaseInstance},
{"glDrawElementsInstancedBaseInstance", (void *)glwrap_glDrawElementsInstancedBaseInstance},
{"glDrawElementsInstancedBaseVertexBaseInstance", (void *)glwrap_glDrawElementsInstancedBaseVertexBaseInstance},
{"glGetInternalformativ", (void *)glwrap_glGetInternalformativ},
{"glGetActiveAtomicCounterBufferiv", (void *)glwrap_glGetActiveAtomicCounterBufferiv},
{"glBindImageTexture", (void *)glwrap_glBindImageTexture},
{"glMemoryBarrier", (void *)glwrap_glMemoryBarrier},
{"glTexStorage1D", (void *)glwrap_glTexStorage1D},
{"glTexStorage2D", (void *)glwrap_glTexStorage2D},
{"glTexStorage3D", (void *)glwrap_glTexStorage3D},
{"glDrawTransformFeedbackInstanced", (void *)glwrap_glDrawTransformFeedbackInstanced},
{"glDrawTransformFeedbackStreamInstanced", (void *)glwrap_glDrawTransformFeedbackStreamInstanced},
{"glClearBufferData", (void *)glwrap_glClearBufferData},
{"glClearBufferSubData", (void *)glwrap_glClearBufferSubData},
{"glDispatchCompute", (void *)glwrap_glDispatchCompute},
{"glDispatchComputeIndirect", (void *)glwrap_glDispatchComputeIndirect},
{"glCopyImageSubData", (void *)glwrap_glCopyImageSubData},
{"glFramebufferParameteri", (void *)glwrap_glFramebufferParameteri},
{"glGetFramebufferParameteriv", (void *)glwrap_glGetFramebufferParameteriv},
{"glGetInternalformati64v", (void *)glwrap_glGetInternalformati64v},
{"glInvalidateTexSubImage", (void *)glwrap_glInvalidateTexSubImage},
{"glInvalidateTexImage", (void *)glwrap_glInvalidateTexImage},
{"glInvalidateBufferSubData", (void *)glwrap_glInvalidateBufferSubData},
{"glInvalidateBufferData", (void *)glwrap_glInvalidateBufferData},
{"glInvalidateFramebuffer", (void *)glwrap_glInvalidateFramebuffer},
{"glInvalidateSubFramebuffer", (void *)glwrap_glInvalidateSubFramebuffer},
{"glMultiDrawArraysIndirect", (void *)glwrap_glMultiDrawArraysIndirect},
{"glMultiDrawElementsIndirect", (void *)glwrap_glMultiDrawElementsIndirect},
{"glGetProgramInterfaceiv", (void *)glwrap_glGetProgramInterfaceiv},
{"glGetProgramResourceIndex", (void *)glwrap_glGetProgramResourceIndex},
{"glGetProgramResourceName", (void *)glwrap_glGetProgramResourceName},
{"glGetProgramResourceiv", (void *)glwrap_glGetProgramResourceiv},
{"glGetProgramResourceLocation", (void *)glwrap_glGetProgramResourceLocation},
{"glGetProgramResourceLocationIndex", (void *)glwrap_glGetProgramResourceLocationIndex},
{"glShaderStorageBlockBinding", (void *)glwrap_glShaderStorageBlockBinding},
{"glTexBufferRange", (void *)glwrap_glTexBufferRange},
{"glTexStorage2DMultisample", (void *)glwrap_glTexStorage2DMultisample},
{"glTexStorage3DMultisample", (void *)glwrap_glTexStorage3DMultisample},
{"glTextureView", (void *)glwrap_glTextureView},
{"glBindVertexBuffer", (void *)glwrap_glBindVertexBuffer},
{"glVertexAttribFormat", (void *)glwrap_glVertexAttribFormat},
{"glVertexAttribIFormat", (void *)glwrap_glVertexAttribIFormat},
{"glVertexAttribLFormat", (void *)glwrap_glVertexAttribLFormat},
{"glVertexAttribBinding", (void *)glwrap_glVertexAttribBinding},
{"glVertexBindingDivisor", (void *)glwrap_glVertexBindingDivisor},
{"glDebugMessageControl", (void *)glwrap_glDebugMessageControl},
{"glDebugMessageInsert", (void *)glwrap_glDebugMessageInsert},
{"glDebugMessageCallback", (void *)glwrap_glDebugMessageCallback},
{"glGetDebugMessageLog", (void *)glwrap_glGetDebugMessageLog},
{"glPushDebugGroup", (void *)glwrap_glPushDebugGroup},
{"glPopDebugGroup", (void *)glwrap_glPopDebugGroup},
{"glObjectLabel", (void *)glwrap_glObjectLabel},
{"glGetObjectLabel", (void *)glwrap_glGetObjectLabel},
{"glObjectPtrLabel", (void *)glwrap_glObjectPtrLabel},
{"glGetObjectPtrLabel", (void *)glwrap_glGetObjectPtrLabel},
{"glBufferStorage", (void *)glwrap_glBufferStorage},
{"glClearTexImage", (void *)glwrap_glClearTexImage},
{"glClearTexSubImage", (void *)glwrap_glClearTexSubImage},
{"glBindBuffersBase", (void *)glwrap_glBindBuffersBase},
{"glBindBuffersRange", (void *)glwrap_glBindBuffersRange},
{"glBindTextures", (void *)glwrap_glBindTextures},
{"glBindSamplers", (void *)glwrap_glBindSamplers},
{"glBindImageTextures", (void *)glwrap_glBindImageTextures},
{"glBindVertexBuffers", (void *)glwrap_glBindVertexBuffers},
{"glClipControl", (void *)glwrap_glClipControl},
{"glCreateTransformFeedbacks", (void *)glwrap_glCreateTransformFeedbacks},
{"glTransformFeedbackBufferBase", (void *)glwrap_glTransformFeedbackBufferBase},
{"glTransformFeedbackBufferRange", (void *)glwrap_glTransformFeedbackBufferRange},
{"glGetTransformFeedbackiv", (void *)glwrap_glGetTransformFeedbackiv},
{"glGetTransformFeedbacki_v", (void *)glwrap_glGetTransformFeedbacki_v},
{"glGetTransformFeedbacki64_v", (void *)glwrap_glGetTransformFeedbacki64_v},
{"glCreateBuffers", (void *)glwrap_glCreateBuffers},
{"glNamedBufferStorage", (void *)glwrap_glNamedBufferStorage},
{"glNamedBufferData", (void *)glwrap_glNamedBufferData},
{"glNamedBufferSubData", (void *)glwrap_glNamedBufferSubData},
{"glCopyNamedBufferSubData", (void *)glwrap_glCopyNamedBufferSubData},
{"glClearNamedBufferData", (void *)glwrap_glClearNamedBufferData},
{"glClearNamedBufferSubData", (void *)glwrap_glClearNamedBufferSubData},
{"glMapNamedBuffer", (void *)glwrap_glMapNamedBuffer},
{"glMapNamedBufferRange", (void *)glwrap_glMapNamedBufferRange},
{"glUnmapNamedBuffer", (void *)glwrap_glUnmapNamedBuffer},
{"glFlushMappedNamedBufferRange", (void *)glwrap_glFlushMappedNamedBufferRange},
{"glGetNamedBufferParameteriv", (void *)glwrap_glGetNamedBufferParameteriv},
{"glGetNamedBufferParameteri64v", (void *)glwrap_glGetNamedBufferParameteri64v},
{"glGetNamedBufferPointerv", (void *)glwrap_glGetNamedBufferPointerv},
{"glGetNamedBufferSubData", (void *)glwrap_glGetNamedBufferSubData},
{"glCreateFramebuffers", (void *)glwrap_glCreateFramebuffers},
{"glNamedFramebufferRenderbuffer", (void *)glwrap_glNamedFramebufferRenderbuffer},
{"glNamedFramebufferParameteri", (void *)glwrap_glNamedFramebufferParameteri},
{"glNamedFramebufferTexture", (void *)glwrap_glNamedFramebufferTexture},
{"glNamedFramebufferTextureLayer", (void *)glwrap_glNamedFramebufferTextureLayer},
{"glNamedFramebufferDrawBuffer", (void *)glwrap_glNamedFramebufferDrawBuffer},
{"glNamedFramebufferDrawBuffers", (void *)glwrap_glNamedFramebufferDrawBuffers},
{"glNamedFramebufferReadBuffer", (void *)glwrap_glNamedFramebufferReadBuffer},
{"glInvalidateNamedFramebufferData", (void *)glwrap_glInvalidateNamedFramebufferData},
{"glInvalidateNamedFramebufferSubData", (void *)glwrap_glInvalidateNamedFramebufferSubData},
{"glClearNamedFramebufferiv", (void *)glwrap_glClearNamedFramebufferiv},
{"glClearNamedFramebufferuiv", (void *)glwrap_glClearNamedFramebufferuiv},
{"glClearNamedFramebufferfv", (void *)glwrap_glClearNamedFramebufferfv},
{"glClearNamedFramebufferfi", (void *)glwrap_glClearNamedFramebufferfi},
{"glBlitNamedFramebuffer", (void *)glwrap_glBlitNamedFramebuffer},
{"glCheckNamedFramebufferStatus", (void *)glwrap_glCheckNamedFramebufferStatus},
{"glGetNamedFramebufferParameteriv", (void *)glwrap_glGetNamedFramebufferParameteriv},
{"glGetNamedFramebufferAttachmentParameteriv", (void *)glwrap_glGetNamedFramebufferAttachmentParameteriv},
{"glCreateRenderbuffers", (void *)glwrap_glCreateRenderbuffers},
{"glNamedRenderbufferStorage", (void *)glwrap_glNamedRenderbufferStorage},
{"glNamedRenderbufferStorageMultisample", (void *)glwrap_glNamedRenderbufferStorageMultisample},
{"glGetNamedRenderbufferParameteriv", (void *)glwrap_glGetNamedRenderbufferParameteriv},
{"glCreateTextures", (void *)glwrap_glCreateTextures},
{"glTextureBuffer", (void *)glwrap_glTextureBuffer},
{"glTextureBufferRange", (void *)glwrap_glTextureBufferRange},
{"glTextureStorage1D", (void *)glwrap_glTextureStorage1D},
{"glTextureStorage2D", (void *)glwrap_glTextureStorage2D},
{"glTextureStorage3D", (void *)glwrap_glTextureStorage3D},
{"glTextureStorage2DMultisample", (void *)glwrap_glTextureStorage2DMultisample},
{"glTextureStorage3DMultisample", (void *)glwrap_glTextureStorage3DMultisample},
{"glTextureSubImage1D", (void *)glwrap_glTextureSubImage1D},
{"glTextureSubImage2D", (void *)glwrap_glTextureSubImage2D},
{"glTextureSubImage3D", (void *)glwrap_glTextureSubImage3D},
{"glCompressedTextureSubImage1D", (void *)glwrap_glCompressedTextureSubImage1D},
{"glCompressedTextureSubImage2D", (void *)glwrap_glCompressedTextureSubImage2D},
{"glCompressedTextureSubImage3D", (void *)glwrap_glCompressedTextureSubImage3D},
{"glCopyTextureSubImage1D", (void *)glwrap_glCopyTextureSubImage1D},
{"glCopyTextureSubImage2D", (void *)glwrap_glCopyTextureSubImage2D},
{"glCopyTextureSubImage3D", (void *)glwrap_glCopyTextureSubImage3D},
{"glTextureParameterf", (void *)glwrap_glTextureParameterf},
{"glTextureParameterfv", (void *)glwrap_glTextureParameterfv},
{"glTextureParameteri", (void *)glwrap_glTextureParameteri},
{"glTextureParameterIiv", (void *)glwrap_glTextureParameterIiv},
{"glTextureParameterIuiv", (void *)glwrap_glTextureParameterIuiv},
{"glTextureParameteriv", (void *)glwrap_glTextureParameteriv},
{"glGenerateTextureMipmap", (void *)glwrap_glGenerateTextureMipmap},
{"glBindTextureUnit", (void *)glwrap_glBindTextureUnit},
{"glGetTextureImage", (void *)glwrap_glGetTextureImage},
{"glGetCompressedTextureImage", (void *)glwrap_glGetCompressedTextureImage},
{"glGetTextureLevelParameterfv", (void *)glwrap_glGetTextureLevelParameterfv},
{"glGetTextureLevelParameteriv", (void *)glwrap_glGetTextureLevelParameteriv},
{"glGetTextureParameterfv", (void *)glwrap_glGetTextureParameterfv},
{"glGetTextureParameterIiv", (void *)glwrap_glGetTextureParameterIiv},
{"glGetTextureParameterIuiv", (void *)glwrap_glGetTextureParameterIuiv},
{"glGetTextureParameteriv", (void *)glwrap_glGetTextureParameteriv},
{"glCreateVertexArrays", (void *)glwrap_glCreateVertexArrays},
{"glDisableVertexArrayAttrib", (void *)glwrap_glDisableVertexArrayAttrib},
{"glEnableVertexArrayAttrib", (void *)glwrap_glEnableVertexArrayAttrib},
{"glVertexArrayElementBuffer", (void *)glwrap_glVertexArrayElementBuffer},
{"glVertexArrayVertexBuffer", (void *)glwrap_glVertexArrayVertexBuffer},
{"glVertexArrayVertexBuffers", (void *)glwrap_glVertexArrayVertexBuffers},
{"glVertexArrayAttribBinding", (void *)glwrap_glVertexArrayAttribBinding},
{"glVertexArrayAttribFormat", (void *)glwrap_glVertexArrayAttribFormat},
{"glVertexArrayAttribIFormat", (void *)glwrap_glVertexArrayAttribIFormat},
{"glVertexArrayAttribLFormat", (void *)glwrap_glVertexArrayAttribLFormat},
{"glVertexArrayBindingDivisor", (void *)glwrap_glVertexArrayBindingDivisor},
{"glGetVertexArrayiv", (void *)glwrap_glGetVertexArrayiv},
{"glGetVertexArrayIndexediv", (void *)glwrap_glGetVertexArrayIndexediv},
{"glGetVertexArrayIndexed64iv", (void *)glwrap_glGetVertexArrayIndexed64iv},
{"glCreateSamplers", (void *)glwrap_glCreateSamplers},
{"glCreateProgramPipelines", (void *)glwrap_glCreateProgramPipelines},
{"glCreateQueries", (void *)glwrap_glCreateQueries},
{"glGetQueryBufferObjecti64v", (void *)glwrap_glGetQueryBufferObjecti64v},
{"glGetQueryBufferObjectiv", (void *)glwrap_glGetQueryBufferObjectiv},
{"glGetQueryBufferObjectui64v", (void *)glwrap_glGetQueryBufferObjectui64v},
{"glGetQueryBufferObjectuiv", (void *)glwrap_glGetQueryBufferObjectuiv},
{"glMemoryBarrierByRegion", (void *)glwrap_glMemoryBarrierByRegion},
{"glGetTextureSubImage", (void *)glwrap_glGetTextureSubImage},
{"glGetCompressedTextureSubImage", (void *)glwrap_glGetCompressedTextureSubImage},
{"glGetGraphicsResetStatus", (void *)glwrap_glGetGraphicsResetStatus},
{"glGetnCompressedTexImage", (void *)glwrap_glGetnCompressedTexImage},
{"glGetnTexImage", (void *)glwrap_glGetnTexImage},
{"glGetnUniformdv", (void *)glwrap_glGetnUniformdv},
{"glGetnUniformfv", (void *)glwrap_glGetnUniformfv},
{"glGetnUniformiv", (void *)glwrap_glGetnUniformiv},
{"glGetnUniformuiv", (void *)glwrap_glGetnUniformuiv},
{"glReadnPixels", (void *)glwrap_glReadnPixels},
{"glGetnMapdv", (void *)glwrap_glGetnMapdv},
{"glGetnMapfv", (void *)glwrap_glGetnMapfv},
{"glGetnMapiv", (void *)glwrap_glGetnMapiv},
{"glGetnPixelMapfv", (void *)glwrap_glGetnPixelMapfv},
{"glGetnPixelMapuiv", (void *)glwrap_glGetnPixelMapuiv},
{"glGetnPixelMapusv", (void *)glwrap_glGetnPixelMapusv},
{"glGetnPolygonStipple", (void *)glwrap_glGetnPolygonStipple},
{"glGetnColorTable", (void *)glwrap_glGetnColorTable},
{"glGetnConvolutionFilter", (void *)glwrap_glGetnConvolutionFilter},
{"glGetnSeparableFilter", (void *)glwrap_glGetnSeparableFilter},
{"glGetnHistogram", (void *)glwrap_glGetnHistogram},
{"glGetnMinmax", (void *)glwrap_glGetnMinmax},
{"glTextureBarrier", (void *)glwrap_glTextureBarrier},
{"glSpecializeShader", (void *)glwrap_glSpecializeShader},
{"glMultiDrawArraysIndirectCount", (void *)glwrap_glMultiDrawArraysIndirectCount},
{"glMultiDrawElementsIndirectCount", (void *)glwrap_glMultiDrawElementsIndirectCount},
{"glPolygonOffsetClamp", (void *)glwrap_glPolygonOffsetClamp},
{"glPrimitiveBoundingBoxARB", (void *)glwrap_glPrimitiveBoundingBoxARB},
{"glGetTextureHandleARB", (void *)glwrap_glGetTextureHandleARB},
{"glGetTextureSamplerHandleARB", (void *)glwrap_glGetTextureSamplerHandleARB},
{"glMakeTextureHandleResidentARB", (void *)glwrap_glMakeTextureHandleResidentARB},
{"glMakeTextureHandleNonResidentARB", (void *)glwrap_glMakeTextureHandleNonResidentARB},
{"glGetImageHandleARB", (void *)glwrap_glGetImageHandleARB},
{"glMakeImageHandleResidentARB", (void *)glwrap_glMakeImageHandleResidentARB},
{"glMakeImageHandleNonResidentARB", (void *)glwrap_glMakeImageHandleNonResidentARB},
{"glUniformHandleui64ARB", (void *)glwrap_glUniformHandleui64ARB},
{"glUniformHandleui64vARB", (void *)glwrap_glUniformHandleui64vARB},
{"glProgramUniformHandleui64ARB", (void *)glwrap_glProgramUniformHandleui64ARB},
{"glProgramUniformHandleui64vARB", (void *)glwrap_glProgramUniformHandleui64vARB},
{"glIsTextureHandleResidentARB", (void *)glwrap_glIsTextureHandleResidentARB},
{"glIsImageHandleResidentARB", (void *)glwrap_glIsImageHandleResidentARB},
{"glVertexAttribL1ui64ARB", (void *)glwrap_glVertexAttribL1ui64ARB},
{"glVertexAttribL1ui64vARB", (void *)glwrap_glVertexAttribL1ui64vARB},
{"glGetVertexAttribLui64vARB", (void *)glwrap_glGetVertexAttribLui64vARB},
{"glCreateSyncFromCLeventARB", (void *)glwrap_glCreateSyncFromCLeventARB},
{"glClampColorARB", (void *)glwrap_glClampColorARB},
{"glDispatchComputeGroupSizeARB", (void *)glwrap_glDispatchComputeGroupSizeARB},
{"glDebugMessageControlARB", (void *)glwrap_glDebugMessageControlARB},
{"glDebugMessageInsertARB", (void *)glwrap_glDebugMessageInsertARB},
{"glDebugMessageCallbackARB", (void *)glwrap_glDebugMessageCallbackARB},
{"glGetDebugMessageLogARB", (void *)glwrap_glGetDebugMessageLogARB},
{"glDrawBuffersARB", (void *)glwrap_glDrawBuffersARB},
{"glBlendEquationiARB", (void *)glwrap_glBlendEquationiARB},
{"glBlendEquationSeparateiARB", (void *)glwrap_glBlendEquationSeparateiARB},
{"glBlendFunciARB", (void *)glwrap_glBlendFunciARB},
{"glBlendFuncSeparateiARB", (void *)glwrap_glBlendFuncSeparateiARB},
{"glDrawArraysInstancedARB", (void *)glwrap_glDrawArraysInstancedARB},
{"glDrawElementsInstancedARB", (void *)glwrap_glDrawElementsInstancedARB},
{"glProgramStringARB", (void *)glwrap_glProgramStringARB},
{"glBindProgramARB", (void *)glwrap_glBindProgramARB},
{"glDeleteProgramsARB", (void *)glwrap_glDeleteProgramsARB},
{"glGenProgramsARB", (void *)glwrap_glGenProgramsARB},
{"glProgramEnvParameter4dARB", (void *)glwrap_glProgramEnvParameter4dARB},
{"glProgramEnvParameter4dvARB", (void *)glwrap_glProgramEnvParameter4dvARB},
{"glProgramEnvParameter4fARB", (void *)glwrap_glProgramEnvParameter4fARB},
{"glProgramEnvParameter4fvARB", (void *)glwrap_glProgramEnvParameter4fvARB},
{"glProgramLocalParameter4dARB", (void *)glwrap_glProgramLocalParameter4dARB},
{"glProgramLocalParameter4dvARB", (void *)glwrap_glProgramLocalParameter4dvARB},
{"glProgramLocalParameter4fARB", (void *)glwrap_glProgramLocalParameter4fARB},
{"glProgramLocalParameter4fvARB", (void *)glwrap_glProgramLocalParameter4fvARB},
{"glGetProgramEnvParameterdvARB", (void *)glwrap_glGetProgramEnvParameterdvARB},
{"glGetProgramEnvParameterfvARB", (void *)glwrap_glGetProgramEnvParameterfvARB},
{"glGetProgramLocalParameterdvARB", (void *)glwrap_glGetProgramLocalParameterdvARB},
{"glGetProgramLocalParameterfvARB", (void *)glwrap_glGetProgramLocalParameterfvARB},
{"glGetProgramivARB", (void *)glwrap_glGetProgramivARB},
{"glGetProgramStringARB", (void *)glwrap_glGetProgramStringARB},
{"glIsProgramARB", (void *)glwrap_glIsProgramARB},
{"glProgramParameteriARB", (void *)glwrap_glProgramParameteriARB},
{"glFramebufferTextureARB", (void *)glwrap_glFramebufferTextureARB},
{"glFramebufferTextureLayerARB", (void *)glwrap_glFramebufferTextureLayerARB},
{"glFramebufferTextureFaceARB", (void *)glwrap_glFramebufferTextureFaceARB},
{"glSpecializeShaderARB", (void *)glwrap_glSpecializeShaderARB},
{"glUniform1i64ARB", (void *)glwrap_glUniform1i64ARB},
{"glUniform2i64ARB", (void *)glwrap_glUniform2i64ARB},
{"glUniform3i64ARB", (void *)glwrap_glUniform3i64ARB},
{"glUniform4i64ARB", (void *)glwrap_glUniform4i64ARB},
{"glUniform1i64vARB", (void *)glwrap_glUniform1i64vARB},
{"glUniform2i64vARB", (void *)glwrap_glUniform2i64vARB},
{"glUniform3i64vARB", (void *)glwrap_glUniform3i64vARB},
{"glUniform4i64vARB", (void *)glwrap_glUniform4i64vARB},
{"glUniform1ui64ARB", (void *)glwrap_glUniform1ui64ARB},
{"glUniform2ui64ARB", (void *)glwrap_glUniform2ui64ARB},
{"glUniform3ui64ARB", (void *)glwrap_glUniform3ui64ARB},
{"glUniform4ui64ARB", (void *)glwrap_glUniform4ui64ARB},
{"glUniform1ui64vARB", (void *)glwrap_glUniform1ui64vARB},
{"glUniform2ui64vARB", (void *)glwrap_glUniform2ui64vARB},
{"glUniform3ui64vARB", (void *)glwrap_glUniform3ui64vARB},
{"glUniform4ui64vARB", (void *)glwrap_glUniform4ui64vARB},
{"glGetUniformi64vARB", (void *)glwrap_glGetUniformi64vARB},
{"glGetUniformui64vARB", (void *)glwrap_glGetUniformui64vARB},
{"glGetnUniformi64vARB", (void *)glwrap_glGetnUniformi64vARB},
{"glGetnUniformui64vARB", (void *)glwrap_glGetnUniformui64vARB},
{"glProgramUniform1i64ARB", (void *)glwrap_glProgramUniform1i64ARB},
{"glProgramUniform2i64ARB", (void *)glwrap_glProgramUniform2i64ARB},
{"glProgramUniform3i64ARB", (void *)glwrap_glProgramUniform3i64ARB},
{"glProgramUniform4i64ARB", (void *)glwrap_glProgramUniform4i64ARB},
{"glProgramUniform1i64vARB", (void *)glwrap_glProgramUniform1i64vARB},
{"glProgramUniform2i64vARB", (void *)glwrap_glProgramUniform2i64vARB},
{"glProgramUniform3i64vARB", (void *)glwrap_glProgramUniform3i64vARB},
{"glProgramUniform4i64vARB", (void *)glwrap_glProgramUniform4i64vARB},
{"glProgramUniform1ui64ARB", (void *)glwrap_glProgramUniform1ui64ARB},
{"glProgramUniform2ui64ARB", (void *)glwrap_glProgramUniform2ui64ARB},
{"glProgramUniform3ui64ARB", (void *)glwrap_glProgramUniform3ui64ARB},
{"glProgramUniform4ui64ARB", (void *)glwrap_glProgramUniform4ui64ARB},
{"glProgramUniform1ui64vARB", (void *)glwrap_glProgramUniform1ui64vARB},
{"glProgramUniform2ui64vARB", (void *)glwrap_glProgramUniform2ui64vARB},
{"glProgramUniform3ui64vARB", (void *)glwrap_glProgramUniform3ui64vARB},
{"glProgramUniform4ui64vARB", (void *)glwrap_glProgramUniform4ui64vARB},
{"glColorTable", (void *)glwrap_glColorTable},
{"glColorTableParameterfv", (void *)glwrap_glColorTableParameterfv},
{"glColorTableParameteriv", (void *)glwrap_glColorTableParameteriv},
{"glCopyColorTable", (void *)glwrap_glCopyColorTable},
{"glGetColorTable", (void *)glwrap_glGetColorTable},
{"glGetColorTableParameterfv", (void *)glwrap_glGetColorTableParameterfv},
{"glGetColorTableParameteriv", (void *)glwrap_glGetColorTableParameteriv},
{"glColorSubTable", (void *)glwrap_glColorSubTable},
{"glCopyColorSubTable", (void *)glwrap_glCopyColorSubTable},
{"glConvolutionFilter1D", (void *)glwrap_glConvolutionFilter1D},
{"glConvolutionFilter2D", (void *)glwrap_glConvolutionFilter2D},
{"glConvolutionParameterf", (void *)glwrap_glConvolutionParameterf},
{"glConvolutionParameterfv", (void *)glwrap_glConvolutionParameterfv},
{"glConvolutionParameteri", (void *)glwrap_glConvolutionParameteri},
{"glConvolutionParameteriv", (void *)glwrap_glConvolutionParameteriv},
{"glCopyConvolutionFilter1D", (void *)glwrap_glCopyConvolutionFilter1D},
{"glCopyConvolutionFilter2D", (void *)glwrap_glCopyConvolutionFilter2D},
{"glGetConvolutionFilter", (void *)glwrap_glGetConvolutionFilter},
{"glGetConvolutionParameterfv", (void *)glwrap_glGetConvolutionParameterfv},
{"glGetConvolutionParameteriv", (void *)glwrap_glGetConvolutionParameteriv},
{"glGetSeparableFilter", (void *)glwrap_glGetSeparableFilter},
{"glSeparableFilter2D", (void *)glwrap_glSeparableFilter2D},
{"glGetHistogram", (void *)glwrap_glGetHistogram},
{"glGetHistogramParameterfv", (void *)glwrap_glGetHistogramParameterfv},
{"glGetHistogramParameteriv", (void *)glwrap_glGetHistogramParameteriv},
{"glGetMinmax", (void *)glwrap_glGetMinmax},
{"glGetMinmaxParameterfv", (void *)glwrap_glGetMinmaxParameterfv},
{"glGetMinmaxParameteriv", (void *)glwrap_glGetMinmaxParameteriv},
{"glHistogram", (void *)glwrap_glHistogram},
{"glMinmax", (void *)glwrap_glMinmax},
{"glResetHistogram", (void *)glwrap_glResetHistogram},
{"glResetMinmax", (void *)glwrap_glResetMinmax},
{"glMultiDrawArraysIndirectCountARB", (void *)glwrap_glMultiDrawArraysIndirectCountARB},
{"glMultiDrawElementsIndirectCountARB", (void *)glwrap_glMultiDrawElementsIndirectCountARB},
{"glVertexAttribDivisorARB", (void *)glwrap_glVertexAttribDivisorARB},
{"glCurrentPaletteMatrixARB", (void *)glwrap_glCurrentPaletteMatrixARB},
{"glMatrixIndexubvARB", (void *)glwrap_glMatrixIndexubvARB},
{"glMatrixIndexusvARB", (void *)glwrap_glMatrixIndexusvARB},
{"glMatrixIndexuivARB", (void *)glwrap_glMatrixIndexuivARB},
{"glMatrixIndexPointerARB", (void *)glwrap_glMatrixIndexPointerARB},
{"glSampleCoverageARB", (void *)glwrap_glSampleCoverageARB},
{"glActiveTextureARB", (void *)glwrap_glActiveTextureARB},
{"glClientActiveTextureARB", (void *)glwrap_glClientActiveTextureARB},
{"glMultiTexCoord1dARB", (void *)glwrap_glMultiTexCoord1dARB},
{"glMultiTexCoord1dvARB", (void *)glwrap_glMultiTexCoord1dvARB},
{"glMultiTexCoord1fARB", (void *)glwrap_glMultiTexCoord1fARB},
{"glMultiTexCoord1fvARB", (void *)glwrap_glMultiTexCoord1fvARB},
{"glMultiTexCoord1iARB", (void *)glwrap_glMultiTexCoord1iARB},
{"glMultiTexCoord1ivARB", (void *)glwrap_glMultiTexCoord1ivARB},
{"glMultiTexCoord1sARB", (void *)glwrap_glMultiTexCoord1sARB},
{"glMultiTexCoord1svARB", (void *)glwrap_glMultiTexCoord1svARB},
{"glMultiTexCoord2dARB", (void *)glwrap_glMultiTexCoord2dARB},
{"glMultiTexCoord2dvARB", (void *)glwrap_glMultiTexCoord2dvARB},
{"glMultiTexCoord2fARB", (void *)glwrap_glMultiTexCoord2fARB},
{"glMultiTexCoord2fvARB", (void *)glwrap_glMultiTexCoord2fvARB},
{"glMultiTexCoord2iARB", (void *)glwrap_glMultiTexCoord2iARB},
{"glMultiTexCoord2ivARB", (void *)glwrap_glMultiTexCoord2ivARB},
{"glMultiTexCoord2sARB", (void *)glwrap_glMultiTexCoord2sARB},
{"glMultiTexCoord2svARB", (void *)glwrap_glMultiTexCoord2svARB},
{"glMultiTexCoord3dARB", (void *)glwrap_glMultiTexCoord3dARB},
{"glMultiTexCoord3dvARB", (void *)glwrap_glMultiTexCoord3dvARB},
{"glMultiTexCoord3fARB", (void *)glwrap_glMultiTexCoord3fARB},
{"glMultiTexCoord3fvARB", (void *)glwrap_glMultiTexCoord3fvARB},
{"glMultiTexCoord3iARB", (void *)glwrap_glMultiTexCoord3iARB},
{"glMultiTexCoord3ivARB", (void *)glwrap_glMultiTexCoord3ivARB},
{"glMultiTexCoord3sARB", (void *)glwrap_glMultiTexCoord3sARB},
{"glMultiTexCoord3svARB", (void *)glwrap_glMultiTexCoord3svARB},
{"glMultiTexCoord4dARB", (void *)glwrap_glMultiTexCoord4dARB},
{"glMultiTexCoord4dvARB", (void *)glwrap_glMultiTexCoord4dvARB},
{"glMultiTexCoord4fARB", (void *)glwrap_glMultiTexCoord4fARB},
{"glMultiTexCoord4fvARB", (void *)glwrap_glMultiTexCoord4fvARB},
{"glMultiTexCoord4iARB", (void *)glwrap_glMultiTexCoord4iARB},
{"glMultiTexCoord4ivARB", (void *)glwrap_glMultiTexCoord4ivARB},
{"glMultiTexCoord4sARB", (void *)glwrap_glMultiTexCoord4sARB},
{"glMultiTexCoord4svARB", (void *)glwrap_glMultiTexCoord4svARB},
{"glGenQueriesARB", (void *)glwrap_glGenQueriesARB},
{"glDeleteQueriesARB", (void *)glwrap_glDeleteQueriesARB},
{"glIsQueryARB", (void *)glwrap_glIsQueryARB},
{"glBeginQueryARB", (void *)glwrap_glBeginQueryARB},
{"glEndQueryARB", (void *)glwrap_glEndQueryARB},
{"glGetQueryivARB", (void *)glwrap_glGetQueryivARB},
{"glGetQueryObjectivARB", (void *)glwrap_glGetQueryObjectivARB},
{"glGetQueryObjectuivARB", (void *)glwrap_glGetQueryObjectuivARB},
{"glMaxShaderCompilerThreadsARB", (void *)glwrap_glMaxShaderCompilerThreadsARB},
{"glPointParameterfARB", (void *)glwrap_glPointParameterfARB},
{"glPointParameterfvARB", (void *)glwrap_glPointParameterfvARB},
{"glGetGraphicsResetStatusARB", (void *)glwrap_glGetGraphicsResetStatusARB},
{"glGetnTexImageARB", (void *)glwrap_glGetnTexImageARB},
{"glReadnPixelsARB", (void *)glwrap_glReadnPixelsARB},
{"glGetnCompressedTexImageARB", (void *)glwrap_glGetnCompressedTexImageARB},
{"glGetnUniformfvARB", (void *)glwrap_glGetnUniformfvARB},
{"glGetnUniformivARB", (void *)glwrap_glGetnUniformivARB},
{"glGetnUniformuivARB", (void *)glwrap_glGetnUniformuivARB},
{"glGetnUniformdvARB", (void *)glwrap_glGetnUniformdvARB},
{"glGetnMapdvARB", (void *)glwrap_glGetnMapdvARB},
{"glGetnMapfvARB", (void *)glwrap_glGetnMapfvARB},
{"glGetnMapivARB", (void *)glwrap_glGetnMapivARB},
{"glGetnPixelMapfvARB", (void *)glwrap_glGetnPixelMapfvARB},
{"glGetnPixelMapuivARB", (void *)glwrap_glGetnPixelMapuivARB},
{"glGetnPixelMapusvARB", (void *)glwrap_glGetnPixelMapusvARB},
{"glGetnPolygonStippleARB", (void *)glwrap_glGetnPolygonStippleARB},
{"glGetnColorTableARB", (void *)glwrap_glGetnColorTableARB},
{"glGetnConvolutionFilterARB", (void *)glwrap_glGetnConvolutionFilterARB},
{"glGetnSeparableFilterARB", (void *)glwrap_glGetnSeparableFilterARB},
{"glGetnHistogramARB", (void *)glwrap_glGetnHistogramARB},
{"glGetnMinmaxARB", (void *)glwrap_glGetnMinmaxARB},
{"glFramebufferSampleLocationsfvARB", (void *)glwrap_glFramebufferSampleLocationsfvARB},
{"glNamedFramebufferSampleLocationsfvARB", (void *)glwrap_glNamedFramebufferSampleLocationsfvARB},
{"glEvaluateDepthValuesARB", (void *)glwrap_glEvaluateDepthValuesARB},
{"glMinSampleShadingARB", (void *)glwrap_glMinSampleShadingARB},
{"glDeleteObjectARB", (void *)glwrap_glDeleteObjectARB},
{"glGetHandleARB", (void *)glwrap_glGetHandleARB},
{"glDetachObjectARB", (void *)glwrap_glDetachObjectARB},
{"glCreateShaderObjectARB", (void *)glwrap_glCreateShaderObjectARB},
{"glShaderSourceARB", (void *)glwrap_glShaderSourceARB},
{"glCompileShaderARB", (void *)glwrap_glCompileShaderARB},
{"glCreateProgramObjectARB", (void *)glwrap_glCreateProgramObjectARB},
{"glAttachObjectARB", (void *)glwrap_glAttachObjectARB},
{"glLinkProgramARB", (void *)glwrap_glLinkProgramARB},
{"glUseProgramObjectARB", (void *)glwrap_glUseProgramObjectARB},
{"glValidateProgramARB", (void *)glwrap_glValidateProgramARB},
{"glUniform1fARB", (void *)glwrap_glUniform1fARB},
{"glUniform2fARB", (void *)glwrap_glUniform2fARB},
{"glUniform3fARB", (void *)glwrap_glUniform3fARB},
{"glUniform4fARB", (void *)glwrap_glUniform4fARB},
{"glUniform1iARB", (void *)glwrap_glUniform1iARB},
{"glUniform2iARB", (void *)glwrap_glUniform2iARB},
{"glUniform3iARB", (void *)glwrap_glUniform3iARB},
{"glUniform4iARB", (void *)glwrap_glUniform4iARB},
{"glUniform1fvARB", (void *)glwrap_glUniform1fvARB},
{"glUniform2fvARB", (void *)glwrap_glUniform2fvARB},
{"glUniform3fvARB", (void *)glwrap_glUniform3fvARB},
{"glUniform4fvARB", (void *)glwrap_glUniform4fvARB},
{"glUniform1ivARB", (void *)glwrap_glUniform1ivARB},
{"glUniform2ivARB", (void *)glwrap_glUniform2ivARB},
{"glUniform3ivARB", (void *)glwrap_glUniform3ivARB},
{"glUniform4ivARB", (void *)glwrap_glUniform4ivARB},
{"glUniformMatrix2fvARB", (void *)glwrap_glUniformMatrix2fvARB},
{"glUniformMatrix3fvARB", (void *)glwrap_glUniformMatrix3fvARB},
{"glUniformMatrix4fvARB", (void *)glwrap_glUniformMatrix4fvARB},
{"glGetObjectParameterfvARB", (void *)glwrap_glGetObjectParameterfvARB},
{"glGetObjectParameterivARB", (void *)glwrap_glGetObjectParameterivARB},
{"glGetInfoLogARB", (void *)glwrap_glGetInfoLogARB},
{"glGetAttachedObjectsARB", (void *)glwrap_glGetAttachedObjectsARB},
{"glGetUniformLocationARB", (void *)glwrap_glGetUniformLocationARB},
{"glGetActiveUniformARB", (void *)glwrap_glGetActiveUniformARB},
{"glGetUniformfvARB", (void *)glwrap_glGetUniformfvARB},
{"glGetUniformivARB", (void *)glwrap_glGetUniformivARB},
{"glGetShaderSourceARB", (void *)glwrap_glGetShaderSourceARB},
{"glNamedStringARB", (void *)glwrap_glNamedStringARB},
{"glDeleteNamedStringARB", (void *)glwrap_glDeleteNamedStringARB},
{"glCompileShaderIncludeARB", (void *)glwrap_glCompileShaderIncludeARB},
{"glIsNamedStringARB", (void *)glwrap_glIsNamedStringARB},
{"glGetNamedStringARB", (void *)glwrap_glGetNamedStringARB},
{"glGetNamedStringivARB", (void *)glwrap_glGetNamedStringivARB},
{"glBufferPageCommitmentARB", (void *)glwrap_glBufferPageCommitmentARB},
{"glNamedBufferPageCommitmentEXT", (void *)glwrap_glNamedBufferPageCommitmentEXT},
{"glNamedBufferPageCommitmentARB", (void *)glwrap_glNamedBufferPageCommitmentARB},
{"glTexPageCommitmentARB", (void *)glwrap_glTexPageCommitmentARB},
{"glTexBufferARB", (void *)glwrap_glTexBufferARB},
{"glCompressedTexImage3DARB", (void *)glwrap_glCompressedTexImage3DARB},
{"glCompressedTexImage2DARB", (void *)glwrap_glCompressedTexImage2DARB},
{"glCompressedTexImage1DARB", (void *)glwrap_glCompressedTexImage1DARB},
{"glCompressedTexSubImage3DARB", (void *)glwrap_glCompressedTexSubImage3DARB},
{"glCompressedTexSubImage2DARB", (void *)glwrap_glCompressedTexSubImage2DARB},
{"glCompressedTexSubImage1DARB", (void *)glwrap_glCompressedTexSubImage1DARB},
{"glGetCompressedTexImageARB", (void *)glwrap_glGetCompressedTexImageARB},
{"glLoadTransposeMatrixfARB", (void *)glwrap_glLoadTransposeMatrixfARB},
{"glLoadTransposeMatrixdARB", (void *)glwrap_glLoadTransposeMatrixdARB},
{"glMultTransposeMatrixfARB", (void *)glwrap_glMultTransposeMatrixfARB},
{"glMultTransposeMatrixdARB", (void *)glwrap_glMultTransposeMatrixdARB},
{"glWeightbvARB", (void *)glwrap_glWeightbvARB},
{"glWeightsvARB", (void *)glwrap_glWeightsvARB},
{"glWeightivARB", (void *)glwrap_glWeightivARB},
{"glWeightfvARB", (void *)glwrap_glWeightfvARB},
{"glWeightdvARB", (void *)glwrap_glWeightdvARB},
{"glWeightubvARB", (void *)glwrap_glWeightubvARB},
{"glWeightusvARB", (void *)glwrap_glWeightusvARB},
{"glWeightuivARB", (void *)glwrap_glWeightuivARB},
{"glWeightPointerARB", (void *)glwrap_glWeightPointerARB},
{"glVertexBlendARB", (void *)glwrap_glVertexBlendARB},
{"glBindBufferARB", (void *)glwrap_glBindBufferARB},
{"glDeleteBuffersARB", (void *)glwrap_glDeleteBuffersARB},
{"glGenBuffersARB", (void *)glwrap_glGenBuffersARB},
{"glIsBufferARB", (void *)glwrap_glIsBufferARB},
{"glBufferDataARB", (void *)glwrap_glBufferDataARB},
{"glBufferSubDataARB", (void *)glwrap_glBufferSubDataARB},
{"glGetBufferSubDataARB", (void *)glwrap_glGetBufferSubDataARB},
{"glMapBufferARB", (void *)glwrap_glMapBufferARB},
{"glUnmapBufferARB", (void *)glwrap_glUnmapBufferARB},
{"glGetBufferParameterivARB", (void *)glwrap_glGetBufferParameterivARB},
{"glGetBufferPointervARB", (void *)glwrap_glGetBufferPointervARB},
{"glVertexAttrib1dARB", (void *)glwrap_glVertexAttrib1dARB},
{"glVertexAttrib1dvARB", (void *)glwrap_glVertexAttrib1dvARB},
{"glVertexAttrib1fARB", (void *)glwrap_glVertexAttrib1fARB},
{"glVertexAttrib1fvARB", (void *)glwrap_glVertexAttrib1fvARB},
{"glVertexAttrib1sARB", (void *)glwrap_glVertexAttrib1sARB},
{"glVertexAttrib1svARB", (void *)glwrap_glVertexAttrib1svARB},
{"glVertexAttrib2dARB", (void *)glwrap_glVertexAttrib2dARB},
{"glVertexAttrib2dvARB", (void *)glwrap_glVertexAttrib2dvARB},
{"glVertexAttrib2fARB", (void *)glwrap_glVertexAttrib2fARB},
{"glVertexAttrib2fvARB", (void *)glwrap_glVertexAttrib2fvARB},
{"glVertexAttrib2sARB", (void *)glwrap_glVertexAttrib2sARB},
{"glVertexAttrib2svARB", (void *)glwrap_glVertexAttrib2svARB},
{"glVertexAttrib3dARB", (void *)glwrap_glVertexAttrib3dARB},
{"glVertexAttrib3dvARB", (void *)glwrap_glVertexAttrib3dvARB},
{"glVertexAttrib3fARB", (void *)glwrap_glVertexAttrib3fARB},
{"glVertexAttrib3fvARB", (void *)glwrap_glVertexAttrib3fvARB},
{"glVertexAttrib3sARB", (void *)glwrap_glVertexAttrib3sARB},
{"glVertexAttrib3svARB", (void *)glwrap_glVertexAttrib3svARB},
{"glVertexAttrib4NbvARB", (void *)glwrap_glVertexAttrib4NbvARB},
{"glVertexAttrib4NivARB", (void *)glwrap_glVertexAttrib4NivARB},
{"glVertexAttrib4NsvARB", (void *)glwrap_glVertexAttrib4NsvARB},
{"glVertexAttrib4NubARB", (void *)glwrap_glVertexAttrib4NubARB},
{"glVertexAttrib4NubvARB", (void *)glwrap_glVertexAttrib4NubvARB},
{"glVertexAttrib4NuivARB", (void *)glwrap_glVertexAttrib4NuivARB},
{"glVertexAttrib4NusvARB", (void *)glwrap_glVertexAttrib4NusvARB},
{"glVertexAttrib4bvARB", (void *)glwrap_glVertexAttrib4bvARB},
{"glVertexAttrib4dARB", (void *)glwrap_glVertexAttrib4dARB},
{"glVertexAttrib4dvARB", (void *)glwrap_glVertexAttrib4dvARB},
{"glVertexAttrib4fARB", (void *)glwrap_glVertexAttrib4fARB},
{"glVertexAttrib4fvARB", (void *)glwrap_glVertexAttrib4fvARB},
{"glVertexAttrib4ivARB", (void *)glwrap_glVertexAttrib4ivARB},
{"glVertexAttrib4sARB", (void *)glwrap_glVertexAttrib4sARB},
{"glVertexAttrib4svARB", (void *)glwrap_glVertexAttrib4svARB},
{"glVertexAttrib4ubvARB", (void *)glwrap_glVertexAttrib4ubvARB},
{"glVertexAttrib4uivARB", (void *)glwrap_glVertexAttrib4uivARB},
{"glVertexAttrib4usvARB", (void *)glwrap_glVertexAttrib4usvARB},
{"glVertexAttribPointerARB", (void *)glwrap_glVertexAttribPointerARB},
{"glEnableVertexAttribArrayARB", (void *)glwrap_glEnableVertexAttribArrayARB},
{"glDisableVertexAttribArrayARB", (void *)glwrap_glDisableVertexAttribArrayARB},
{"glGetVertexAttribdvARB", (void *)glwrap_glGetVertexAttribdvARB},
{"glGetVertexAttribfvARB", (void *)glwrap_glGetVertexAttribfvARB},
{"glGetVertexAttribivARB", (void *)glwrap_glGetVertexAttribivARB},
{"glGetVertexAttribPointervARB", (void *)glwrap_glGetVertexAttribPointervARB},
{"glBindAttribLocationARB", (void *)glwrap_glBindAttribLocationARB},
{"glGetActiveAttribARB", (void *)glwrap_glGetActiveAttribARB},
{"glGetAttribLocationARB", (void *)glwrap_glGetAttribLocationARB},
{"glWindowPos2dARB", (void *)glwrap_glWindowPos2dARB},
{"glWindowPos2dvARB", (void *)glwrap_glWindowPos2dvARB},
{"glWindowPos2fARB", (void *)glwrap_glWindowPos2fARB},
{"glWindowPos2fvARB", (void *)glwrap_glWindowPos2fvARB},
{"glWindowPos2iARB", (void *)glwrap_glWindowPos2iARB},
{"glWindowPos2ivARB", (void *)glwrap_glWindowPos2ivARB},
{"glWindowPos2sARB", (void *)glwrap_glWindowPos2sARB},
{"glWindowPos2svARB", (void *)glwrap_glWindowPos2svARB},
{"glWindowPos3dARB", (void *)glwrap_glWindowPos3dARB},
{"glWindowPos3dvARB", (void *)glwrap_glWindowPos3dvARB},
{"glWindowPos3fARB", (void *)glwrap_glWindowPos3fARB},
{"glWindowPos3fvARB", (void *)glwrap_glWindowPos3fvARB},
{"glWindowPos3iARB", (void *)glwrap_glWindowPos3iARB},
{"glWindowPos3ivARB", (void *)glwrap_glWindowPos3ivARB},
{"glWindowPos3sARB", (void *)glwrap_glWindowPos3sARB},
{"glWindowPos3svARB", (void *)glwrap_glWindowPos3svARB},
{"glBlendBarrierKHR", (void *)glwrap_glBlendBarrierKHR},
{"glMaxShaderCompilerThreadsKHR", (void *)glwrap_glMaxShaderCompilerThreadsKHR},
{"glMultiTexCoord1bOES", (void *)glwrap_glMultiTexCoord1bOES},
{"glMultiTexCoord1bvOES", (void *)glwrap_glMultiTexCoord1bvOES},
{"glMultiTexCoord2bOES", (void *)glwrap_glMultiTexCoord2bOES},
{"glMultiTexCoord2bvOES", (void *)glwrap_glMultiTexCoord2bvOES},
{"glMultiTexCoord3bOES", (void *)glwrap_glMultiTexCoord3bOES},
{"glMultiTexCoord3bvOES", (void *)glwrap_glMultiTexCoord3bvOES},
{"glMultiTexCoord4bOES", (void *)glwrap_glMultiTexCoord4bOES},
{"glMultiTexCoord4bvOES", (void *)glwrap_glMultiTexCoord4bvOES},
{"glTexCoord1bOES", (void *)glwrap_glTexCoord1bOES},
{"glTexCoord1bvOES", (void *)glwrap_glTexCoord1bvOES},
{"glTexCoord2bOES", (void *)glwrap_glTexCoord2bOES},
{"glTexCoord2bvOES", (void *)glwrap_glTexCoord2bvOES},
{"glTexCoord3bOES", (void *)glwrap_glTexCoord3bOES},
{"glTexCoord3bvOES", (void *)glwrap_glTexCoord3bvOES},
{"glTexCoord4bOES", (void *)glwrap_glTexCoord4bOES},
{"glTexCoord4bvOES", (void *)glwrap_glTexCoord4bvOES},
{"glVertex2bOES", (void *)glwrap_glVertex2bOES},
{"glVertex2bvOES", (void *)glwrap_glVertex2bvOES},
{"glVertex3bOES", (void *)glwrap_glVertex3bOES},
{"glVertex3bvOES", (void *)glwrap_glVertex3bvOES},
{"glVertex4bOES", (void *)glwrap_glVertex4bOES},
{"glVertex4bvOES", (void *)glwrap_glVertex4bvOES},
{"glAlphaFuncxOES", (void *)glwrap_glAlphaFuncxOES},
{"glClearColorxOES", (void *)glwrap_glClearColorxOES},
{"glClearDepthxOES", (void *)glwrap_glClearDepthxOES},
{"glClipPlanexOES", (void *)glwrap_glClipPlanexOES},
{"glColor4xOES", (void *)glwrap_glColor4xOES},
{"glDepthRangexOES", (void *)glwrap_glDepthRangexOES},
{"glFogxOES", (void *)glwrap_glFogxOES},
{"glFogxvOES", (void *)glwrap_glFogxvOES},
{"glFrustumxOES", (void *)glwrap_glFrustumxOES},
{"glGetClipPlanexOES", (void *)glwrap_glGetClipPlanexOES},
{"glGetFixedvOES", (void *)glwrap_glGetFixedvOES},
{"glGetTexEnvxvOES", (void *)glwrap_glGetTexEnvxvOES},
{"glGetTexParameterxvOES", (void *)glwrap_glGetTexParameterxvOES},
{"glLightModelxOES", (void *)glwrap_glLightModelxOES},
{"glLightModelxvOES", (void *)glwrap_glLightModelxvOES},
{"glLightxOES", (void *)glwrap_glLightxOES},
{"glLightxvOES", (void *)glwrap_glLightxvOES},
{"glLineWidthxOES", (void *)glwrap_glLineWidthxOES},
{"glLoadMatrixxOES", (void *)glwrap_glLoadMatrixxOES},
{"glMaterialxOES", (void *)glwrap_glMaterialxOES},
{"glMaterialxvOES", (void *)glwrap_glMaterialxvOES},
{"glMultMatrixxOES", (void *)glwrap_glMultMatrixxOES},
{"glMultiTexCoord4xOES", (void *)glwrap_glMultiTexCoord4xOES},
{"glNormal3xOES", (void *)glwrap_glNormal3xOES},
{"glOrthoxOES", (void *)glwrap_glOrthoxOES},
{"glPointParameterxvOES", (void *)glwrap_glPointParameterxvOES},
{"glPointSizexOES", (void *)glwrap_glPointSizexOES},
{"glPolygonOffsetxOES", (void *)glwrap_glPolygonOffsetxOES},
{"glRotatexOES", (void *)glwrap_glRotatexOES},
{"glScalexOES", (void *)glwrap_glScalexOES},
{"glTexEnvxOES", (void *)glwrap_glTexEnvxOES},
{"glTexEnvxvOES", (void *)glwrap_glTexEnvxvOES},
{"glTexParameterxOES", (void *)glwrap_glTexParameterxOES},
{"glTexParameterxvOES", (void *)glwrap_glTexParameterxvOES},
{"glTranslatexOES", (void *)glwrap_glTranslatexOES},
{"glAccumxOES", (void *)glwrap_glAccumxOES},
{"glBitmapxOES", (void *)glwrap_glBitmapxOES},
{"glBlendColorxOES", (void *)glwrap_glBlendColorxOES},
{"glClearAccumxOES", (void *)glwrap_glClearAccumxOES},
{"glColor3xOES", (void *)glwrap_glColor3xOES},
{"glColor3xvOES", (void *)glwrap_glColor3xvOES},
{"glColor4xvOES", (void *)glwrap_glColor4xvOES},
{"glConvolutionParameterxOES", (void *)glwrap_glConvolutionParameterxOES},
{"glConvolutionParameterxvOES", (void *)glwrap_glConvolutionParameterxvOES},
{"glEvalCoord1xOES", (void *)glwrap_glEvalCoord1xOES},
{"glEvalCoord1xvOES", (void *)glwrap_glEvalCoord1xvOES},
{"glEvalCoord2xOES", (void *)glwrap_glEvalCoord2xOES},
{"glEvalCoord2xvOES", (void *)glwrap_glEvalCoord2xvOES},
{"glFeedbackBufferxOES", (void *)glwrap_glFeedbackBufferxOES},
{"glGetConvolutionParameterxvOES", (void *)glwrap_glGetConvolutionParameterxvOES},
{"glGetHistogramParameterxvOES", (void *)glwrap_glGetHistogramParameterxvOES},
{"glGetLightxOES", (void *)glwrap_glGetLightxOES},
{"glGetMapxvOES", (void *)glwrap_glGetMapxvOES},
{"glGetMaterialxOES", (void *)glwrap_glGetMaterialxOES},
{"glGetPixelMapxv", (void *)glwrap_glGetPixelMapxv},
{"glGetTexGenxvOES", (void *)glwrap_glGetTexGenxvOES},
{"glGetTexLevelParameterxvOES", (void *)glwrap_glGetTexLevelParameterxvOES},
{"glIndexxOES", (void *)glwrap_glIndexxOES},
{"glIndexxvOES", (void *)glwrap_glIndexxvOES},
{"glLoadTransposeMatrixxOES", (void *)glwrap_glLoadTransposeMatrixxOES},
{"glMap1xOES", (void *)glwrap_glMap1xOES},
{"glMap2xOES", (void *)glwrap_glMap2xOES},
{"glMapGrid1xOES", (void *)glwrap_glMapGrid1xOES},
{"glMapGrid2xOES", (void *)glwrap_glMapGrid2xOES},
{"glMultTransposeMatrixxOES", (void *)glwrap_glMultTransposeMatrixxOES},
{"glMultiTexCoord1xOES", (void *)glwrap_glMultiTexCoord1xOES},
{"glMultiTexCoord1xvOES", (void *)glwrap_glMultiTexCoord1xvOES},
{"glMultiTexCoord2xOES", (void *)glwrap_glMultiTexCoord2xOES},
{"glMultiTexCoord2xvOES", (void *)glwrap_glMultiTexCoord2xvOES},
{"glMultiTexCoord3xOES", (void *)glwrap_glMultiTexCoord3xOES},
{"glMultiTexCoord3xvOES", (void *)glwrap_glMultiTexCoord3xvOES},
{"glMultiTexCoord4xvOES", (void *)glwrap_glMultiTexCoord4xvOES},
{"glNormal3xvOES", (void *)glwrap_glNormal3xvOES},
{"glPassThroughxOES", (void *)glwrap_glPassThroughxOES},
{"glPixelMapx", (void *)glwrap_glPixelMapx},
{"glPixelStorex", (void *)glwrap_glPixelStorex},
{"glPixelTransferxOES", (void *)glwrap_glPixelTransferxOES},
{"glPixelZoomxOES", (void *)glwrap_glPixelZoomxOES},
{"glPrioritizeTexturesxOES", (void *)glwrap_glPrioritizeTexturesxOES},
{"glRasterPos2xOES", (void *)glwrap_glRasterPos2xOES},
{"glRasterPos2xvOES", (void *)glwrap_glRasterPos2xvOES},
{"glRasterPos3xOES", (void *)glwrap_glRasterPos3xOES},
{"glRasterPos3xvOES", (void *)glwrap_glRasterPos3xvOES},
{"glRasterPos4xOES", (void *)glwrap_glRasterPos4xOES},
{"glRasterPos4xvOES", (void *)glwrap_glRasterPos4xvOES},
{"glRectxOES", (void *)glwrap_glRectxOES},
{"glRectxvOES", (void *)glwrap_glRectxvOES},
{"glTexCoord1xOES", (void *)glwrap_glTexCoord1xOES},
{"glTexCoord1xvOES", (void *)glwrap_glTexCoord1xvOES},
{"glTexCoord2xOES", (void *)glwrap_glTexCoord2xOES},
{"glTexCoord2xvOES", (void *)glwrap_glTexCoord2xvOES},
{"glTexCoord3xOES", (void *)glwrap_glTexCoord3xOES},
{"glTexCoord3xvOES", (void *)glwrap_glTexCoord3xvOES},
{"glTexCoord4xOES", (void *)glwrap_glTexCoord4xOES},
{"glTexCoord4xvOES", (void *)glwrap_glTexCoord4xvOES},
{"glTexGenxOES", (void *)glwrap_glTexGenxOES},
{"glTexGenxvOES", (void *)glwrap_glTexGenxvOES},
{"glVertex2xOES", (void *)glwrap_glVertex2xOES},
{"glVertex2xvOES", (void *)glwrap_glVertex2xvOES},
{"glVertex3xOES", (void *)glwrap_glVertex3xOES},
{"glVertex3xvOES", (void *)glwrap_glVertex3xvOES},
{"glVertex4xOES", (void *)glwrap_glVertex4xOES},
{"glVertex4xvOES", (void *)glwrap_glVertex4xvOES},
{"glQueryMatrixxOES", (void *)glwrap_glQueryMatrixxOES},
{"glClearDepthfOES", (void *)glwrap_glClearDepthfOES},
{"glClipPlanefOES", (void *)glwrap_glClipPlanefOES},
{"glDepthRangefOES", (void *)glwrap_glDepthRangefOES},
{"glFrustumfOES", (void *)glwrap_glFrustumfOES},
{"glGetClipPlanefOES", (void *)glwrap_glGetClipPlanefOES},
{"glOrthofOES", (void *)glwrap_glOrthofOES},
{"glTbufferMask3DFX", (void *)glwrap_glTbufferMask3DFX},
{"glDebugMessageEnableAMD", (void *)glwrap_glDebugMessageEnableAMD},
{"glDebugMessageInsertAMD", (void *)glwrap_glDebugMessageInsertAMD},
{"glDebugMessageCallbackAMD", (void *)glwrap_glDebugMessageCallbackAMD},
{"glGetDebugMessageLogAMD", (void *)glwrap_glGetDebugMessageLogAMD},
{"glBlendFuncIndexedAMD", (void *)glwrap_glBlendFuncIndexedAMD},
{"glBlendFuncSeparateIndexedAMD", (void *)glwrap_glBlendFuncSeparateIndexedAMD},
{"glBlendEquationIndexedAMD", (void *)glwrap_glBlendEquationIndexedAMD},
{"glBlendEquationSeparateIndexedAMD", (void *)glwrap_glBlendEquationSeparateIndexedAMD},
{"glRenderbufferStorageMultisampleAdvancedAMD", (void *)glwrap_glRenderbufferStorageMultisampleAdvancedAMD},
{"glNamedRenderbufferStorageMultisampleAdvancedAMD", (void *)glwrap_glNamedRenderbufferStorageMultisampleAdvancedAMD},
{"glFramebufferSamplePositionsfvAMD", (void *)glwrap_glFramebufferSamplePositionsfvAMD},
{"glNamedFramebufferSamplePositionsfvAMD", (void *)glwrap_glNamedFramebufferSamplePositionsfvAMD},
{"glGetFramebufferParameterfvAMD", (void *)glwrap_glGetFramebufferParameterfvAMD},
{"glGetNamedFramebufferParameterfvAMD", (void *)glwrap_glGetNamedFramebufferParameterfvAMD},
{"glUniform1i64NV", (void *)glwrap_glUniform1i64NV},
{"glUniform2i64NV", (void *)glwrap_glUniform2i64NV},
{"glUniform3i64NV", (void *)glwrap_glUniform3i64NV},
{"glUniform4i64NV", (void *)glwrap_glUniform4i64NV},
{"glUniform1i64vNV", (void *)glwrap_glUniform1i64vNV},
{"glUniform2i64vNV", (void *)glwrap_glUniform2i64vNV},
{"glUniform3i64vNV", (void *)glwrap_glUniform3i64vNV},
{"glUniform4i64vNV", (void *)glwrap_glUniform4i64vNV},
{"glUniform1ui64NV", (void *)glwrap_glUniform1ui64NV},
{"glUniform2ui64NV", (void *)glwrap_glUniform2ui64NV},
{"glUniform3ui64NV", (void *)glwrap_glUniform3ui64NV},
{"glUniform4ui64NV", (void *)glwrap_glUniform4ui64NV},
{"glUniform1ui64vNV", (void *)glwrap_glUniform1ui64vNV},
{"glUniform2ui64vNV", (void *)glwrap_glUniform2ui64vNV},
{"glUniform3ui64vNV", (void *)glwrap_glUniform3ui64vNV},
{"glUniform4ui64vNV", (void *)glwrap_glUniform4ui64vNV},
{"glGetUniformi64vNV", (void *)glwrap_glGetUniformi64vNV},
{"glGetUniformui64vNV", (void *)glwrap_glGetUniformui64vNV},
{"glProgramUniform1i64NV", (void *)glwrap_glProgramUniform1i64NV},
{"glProgramUniform2i64NV", (void *)glwrap_glProgramUniform2i64NV},
{"glProgramUniform3i64NV", (void *)glwrap_glProgramUniform3i64NV},
{"glProgramUniform4i64NV", (void *)glwrap_glProgramUniform4i64NV},
{"glProgramUniform1i64vNV", (void *)glwrap_glProgramUniform1i64vNV},
{"glProgramUniform2i64vNV", (void *)glwrap_glProgramUniform2i64vNV},
{"glProgramUniform3i64vNV", (void *)glwrap_glProgramUniform3i64vNV},
{"glProgramUniform4i64vNV", (void *)glwrap_glProgramUniform4i64vNV},
{"glProgramUniform1ui64NV", (void *)glwrap_glProgramUniform1ui64NV},
{"glProgramUniform2ui64NV", (void *)glwrap_glProgramUniform2ui64NV},
{"glProgramUniform3ui64NV", (void *)glwrap_glProgramUniform3ui64NV},
{"glProgramUniform4ui64NV", (void *)glwrap_glProgramUniform4ui64NV},
{"glProgramUniform1ui64vNV", (void *)glwrap_glProgramUniform1ui64vNV},
{"glProgramUniform2ui64vNV", (void *)glwrap_glProgramUniform2ui64vNV},
{"glProgramUniform3ui64vNV", (void *)glwrap_glProgramUniform3ui64vNV},
{"glProgramUniform4ui64vNV", (void *)glwrap_glProgramUniform4ui64vNV},
{"glVertexAttribParameteriAMD", (void *)glwrap_glVertexAttribParameteriAMD},
{"glMultiDrawArraysIndirectAMD", (void *)glwrap_glMultiDrawArraysIndirectAMD},
{"glMultiDrawElementsIndirectAMD", (void *)glwrap_glMultiDrawElementsIndirectAMD},
{"glGenNamesAMD", (void *)glwrap_glGenNamesAMD},
{"glDeleteNamesAMD", (void *)glwrap_glDeleteNamesAMD},
{"glIsNameAMD", (void *)glwrap_glIsNameAMD},
{"glQueryObjectParameteruiAMD", (void *)glwrap_glQueryObjectParameteruiAMD},
{"glGetPerfMonitorGroupsAMD", (void *)glwrap_glGetPerfMonitorGroupsAMD},
{"glGetPerfMonitorCountersAMD", (void *)glwrap_glGetPerfMonitorCountersAMD},
{"glGetPerfMonitorGroupStringAMD", (void *)glwrap_glGetPerfMonitorGroupStringAMD},
{"glGetPerfMonitorCounterStringAMD", (void *)glwrap_glGetPerfMonitorCounterStringAMD},
{"glGetPerfMonitorCounterInfoAMD", (void *)glwrap_glGetPerfMonitorCounterInfoAMD},
{"glGenPerfMonitorsAMD", (void *)glwrap_glGenPerfMonitorsAMD},
{"glDeletePerfMonitorsAMD", (void *)glwrap_glDeletePerfMonitorsAMD},
{"glSelectPerfMonitorCountersAMD", (void *)glwrap_glSelectPerfMonitorCountersAMD},
{"glBeginPerfMonitorAMD", (void *)glwrap_glBeginPerfMonitorAMD},
{"glEndPerfMonitorAMD", (void *)glwrap_glEndPerfMonitorAMD},
{"glGetPerfMonitorCounterDataAMD", (void *)glwrap_glGetPerfMonitorCounterDataAMD},
{"glSetMultisamplefvAMD", (void *)glwrap_glSetMultisamplefvAMD},
{"glTexStorageSparseAMD", (void *)glwrap_glTexStorageSparseAMD},
{"glTextureStorageSparseAMD", (void *)glwrap_glTextureStorageSparseAMD},
{"glStencilOpValueAMD", (void *)glwrap_glStencilOpValueAMD},
{"glTessellationFactorAMD", (void *)glwrap_glTessellationFactorAMD},
{"glTessellationModeAMD", (void *)glwrap_glTessellationModeAMD},
{"glElementPointerAPPLE", (void *)glwrap_glElementPointerAPPLE},
{"glDrawElementArrayAPPLE", (void *)glwrap_glDrawElementArrayAPPLE},
{"glDrawRangeElementArrayAPPLE", (void *)glwrap_glDrawRangeElementArrayAPPLE},
{"glMultiDrawElementArrayAPPLE", (void *)glwrap_glMultiDrawElementArrayAPPLE},
{"glMultiDrawRangeElementArrayAPPLE", (void *)glwrap_glMultiDrawRangeElementArrayAPPLE},
{"glGenFencesAPPLE", (void *)glwrap_glGenFencesAPPLE},
{"glDeleteFencesAPPLE", (void *)glwrap_glDeleteFencesAPPLE},
{"glSetFenceAPPLE", (void *)glwrap_glSetFenceAPPLE},
{"glIsFenceAPPLE", (void *)glwrap_glIsFenceAPPLE},
{"glTestFenceAPPLE", (void *)glwrap_glTestFenceAPPLE},
{"glFinishFenceAPPLE", (void *)glwrap_glFinishFenceAPPLE},
{"glTestObjectAPPLE", (void *)glwrap_glTestObjectAPPLE},
{"glFinishObjectAPPLE", (void *)glwrap_glFinishObjectAPPLE},
{"glBufferParameteriAPPLE", (void *)glwrap_glBufferParameteriAPPLE},
{"glFlushMappedBufferRangeAPPLE", (void *)glwrap_glFlushMappedBufferRangeAPPLE},
{"glObjectPurgeableAPPLE", (void *)glwrap_glObjectPurgeableAPPLE},
{"glObjectUnpurgeableAPPLE", (void *)glwrap_glObjectUnpurgeableAPPLE},
{"glGetObjectParameterivAPPLE", (void *)glwrap_glGetObjectParameterivAPPLE},
{"glTextureRangeAPPLE", (void *)glwrap_glTextureRangeAPPLE},
{"glGetTexParameterPointervAPPLE", (void *)glwrap_glGetTexParameterPointervAPPLE},
{"glBindVertexArrayAPPLE", (void *)glwrap_glBindVertexArrayAPPLE},
{"glDeleteVertexArraysAPPLE", (void *)glwrap_glDeleteVertexArraysAPPLE},
{"glGenVertexArraysAPPLE", (void *)glwrap_glGenVertexArraysAPPLE},
{"glIsVertexArrayAPPLE", (void *)glwrap_glIsVertexArrayAPPLE},
{"glVertexArrayRangeAPPLE", (void *)glwrap_glVertexArrayRangeAPPLE},
{"glFlushVertexArrayRangeAPPLE", (void *)glwrap_glFlushVertexArrayRangeAPPLE},
{"glVertexArrayParameteriAPPLE", (void *)glwrap_glVertexArrayParameteriAPPLE},
{"glEnableVertexAttribAPPLE", (void *)glwrap_glEnableVertexAttribAPPLE},
{"glDisableVertexAttribAPPLE", (void *)glwrap_glDisableVertexAttribAPPLE},
{"glIsVertexAttribEnabledAPPLE", (void *)glwrap_glIsVertexAttribEnabledAPPLE},
{"glMapVertexAttrib1dAPPLE", (void *)glwrap_glMapVertexAttrib1dAPPLE},
{"glMapVertexAttrib1fAPPLE", (void *)glwrap_glMapVertexAttrib1fAPPLE},
{"glMapVertexAttrib2dAPPLE", (void *)glwrap_glMapVertexAttrib2dAPPLE},
{"glMapVertexAttrib2fAPPLE", (void *)glwrap_glMapVertexAttrib2fAPPLE},
{"glDrawBuffersATI", (void *)glwrap_glDrawBuffersATI},
{"glElementPointerATI", (void *)glwrap_glElementPointerATI},
{"glDrawElementArrayATI", (void *)glwrap_glDrawElementArrayATI},
{"glDrawRangeElementArrayATI", (void *)glwrap_glDrawRangeElementArrayATI},
{"glTexBumpParameterivATI", (void *)glwrap_glTexBumpParameterivATI},
{"glTexBumpParameterfvATI", (void *)glwrap_glTexBumpParameterfvATI},
{"glGetTexBumpParameterivATI", (void *)glwrap_glGetTexBumpParameterivATI},
{"glGetTexBumpParameterfvATI", (void *)glwrap_glGetTexBumpParameterfvATI},
{"glGenFragmentShadersATI", (void *)glwrap_glGenFragmentShadersATI},
{"glBindFragmentShaderATI", (void *)glwrap_glBindFragmentShaderATI},
{"glDeleteFragmentShaderATI", (void *)glwrap_glDeleteFragmentShaderATI},
{"glBeginFragmentShaderATI", (void *)glwrap_glBeginFragmentShaderATI},
{"glEndFragmentShaderATI", (void *)glwrap_glEndFragmentShaderATI},
{"glPassTexCoordATI", (void *)glwrap_glPassTexCoordATI},
{"glSampleMapATI", (void *)glwrap_glSampleMapATI},
{"glColorFragmentOp1ATI", (void *)glwrap_glColorFragmentOp1ATI},
{"glColorFragmentOp2ATI", (void *)glwrap_glColorFragmentOp2ATI},
{"glColorFragmentOp3ATI", (void *)glwrap_glColorFragmentOp3ATI},
{"glAlphaFragmentOp1ATI", (void *)glwrap_glAlphaFragmentOp1ATI},
{"glAlphaFragmentOp2ATI", (void *)glwrap_glAlphaFragmentOp2ATI},
{"glAlphaFragmentOp3ATI", (void *)glwrap_glAlphaFragmentOp3ATI},
{"glSetFragmentShaderConstantATI", (void *)glwrap_glSetFragmentShaderConstantATI},
{"glMapObjectBufferATI", (void *)glwrap_glMapObjectBufferATI},
{"glUnmapObjectBufferATI", (void *)glwrap_glUnmapObjectBufferATI},
{"glPNTrianglesiATI", (void *)glwrap_glPNTrianglesiATI},
{"glPNTrianglesfATI", (void *)glwrap_glPNTrianglesfATI},
{"glStencilOpSeparateATI", (void *)glwrap_glStencilOpSeparateATI},
{"glStencilFuncSeparateATI", (void *)glwrap_glStencilFuncSeparateATI},
{"glNewObjectBufferATI", (void *)glwrap_glNewObjectBufferATI},
{"glIsObjectBufferATI", (void *)glwrap_glIsObjectBufferATI},
{"glUpdateObjectBufferATI", (void *)glwrap_glUpdateObjectBufferATI},
{"glGetObjectBufferfvATI", (void *)glwrap_glGetObjectBufferfvATI},
{"glGetObjectBufferivATI", (void *)glwrap_glGetObjectBufferivATI},
{"glFreeObjectBufferATI", (void *)glwrap_glFreeObjectBufferATI},
{"glArrayObjectATI", (void *)glwrap_glArrayObjectATI},
{"glGetArrayObjectfvATI", (void *)glwrap_glGetArrayObjectfvATI},
{"glGetArrayObjectivATI", (void *)glwrap_glGetArrayObjectivATI},
{"glVariantArrayObjectATI", (void *)glwrap_glVariantArrayObjectATI},
{"glGetVariantArrayObjectfvATI", (void *)glwrap_glGetVariantArrayObjectfvATI},
{"glGetVariantArrayObjectivATI", (void *)glwrap_glGetVariantArrayObjectivATI},
{"glVertexAttribArrayObjectATI", (void *)glwrap_glVertexAttribArrayObjectATI},
{"glGetVertexAttribArrayObjectfvATI", (void *)glwrap_glGetVertexAttribArrayObjectfvATI},
{"glGetVertexAttribArrayObjectivATI", (void *)glwrap_glGetVertexAttribArrayObjectivATI},
{"glVertexStream1sATI", (void *)glwrap_glVertexStream1sATI},
{"glVertexStream1svATI", (void *)glwrap_glVertexStream1svATI},
{"glVertexStream1iATI", (void *)glwrap_glVertexStream1iATI},
{"glVertexStream1ivATI", (void *)glwrap_glVertexStream1ivATI},
{"glVertexStream1fATI", (void *)glwrap_glVertexStream1fATI},
{"glVertexStream1fvATI", (void *)glwrap_glVertexStream1fvATI},
{"glVertexStream1dATI", (void *)glwrap_glVertexStream1dATI},
{"glVertexStream1dvATI", (void *)glwrap_glVertexStream1dvATI},
{"glVertexStream2sATI", (void *)glwrap_glVertexStream2sATI},
{"glVertexStream2svATI", (void *)glwrap_glVertexStream2svATI},
{"glVertexStream2iATI", (void *)glwrap_glVertexStream2iATI},
{"glVertexStream2ivATI", (void *)glwrap_glVertexStream2ivATI},
{"glVertexStream2fATI", (void *)glwrap_glVertexStream2fATI},
{"glVertexStream2fvATI", (void *)glwrap_glVertexStream2fvATI},
{"glVertexStream2dATI", (void *)glwrap_glVertexStream2dATI},
{"glVertexStream2dvATI", (void *)glwrap_glVertexStream2dvATI},
{"glVertexStream3sATI", (void *)glwrap_glVertexStream3sATI},
{"glVertexStream3svATI", (void *)glwrap_glVertexStream3svATI},
{"glVertexStream3iATI", (void *)glwrap_glVertexStream3iATI},
{"glVertexStream3ivATI", (void *)glwrap_glVertexStream3ivATI},
{"glVertexStream3fATI", (void *)glwrap_glVertexStream3fATI},
{"glVertexStream3fvATI", (void *)glwrap_glVertexStream3fvATI},
{"glVertexStream3dATI", (void *)glwrap_glVertexStream3dATI},
{"glVertexStream3dvATI", (void *)glwrap_glVertexStream3dvATI},
{"glVertexStream4sATI", (void *)glwrap_glVertexStream4sATI},
{"glVertexStream4svATI", (void *)glwrap_glVertexStream4svATI},
{"glVertexStream4iATI", (void *)glwrap_glVertexStream4iATI},
{"glVertexStream4ivATI", (void *)glwrap_glVertexStream4ivATI},
{"glVertexStream4fATI", (void *)glwrap_glVertexStream4fATI},
{"glVertexStream4fvATI", (void *)glwrap_glVertexStream4fvATI},
{"glVertexStream4dATI", (void *)glwrap_glVertexStream4dATI},
{"glVertexStream4dvATI", (void *)glwrap_glVertexStream4dvATI},
{"glNormalStream3bATI", (void *)glwrap_glNormalStream3bATI},
{"glNormalStream3bvATI", (void *)glwrap_glNormalStream3bvATI},
{"glNormalStream3sATI", (void *)glwrap_glNormalStream3sATI},
{"glNormalStream3svATI", (void *)glwrap_glNormalStream3svATI},
{"glNormalStream3iATI", (void *)glwrap_glNormalStream3iATI},
{"glNormalStream3ivATI", (void *)glwrap_glNormalStream3ivATI},
{"glNormalStream3fATI", (void *)glwrap_glNormalStream3fATI},
{"glNormalStream3fvATI", (void *)glwrap_glNormalStream3fvATI},
{"glNormalStream3dATI", (void *)glwrap_glNormalStream3dATI},
{"glNormalStream3dvATI", (void *)glwrap_glNormalStream3dvATI},
{"glClientActiveVertexStreamATI", (void *)glwrap_glClientActiveVertexStreamATI},
{"glVertexBlendEnviATI", (void *)glwrap_glVertexBlendEnviATI},
{"glVertexBlendEnvfATI", (void *)glwrap_glVertexBlendEnvfATI},
{"glEGLImageTargetTexStorageEXT", (void *)glwrap_glEGLImageTargetTexStorageEXT},
{"glEGLImageTargetTextureStorageEXT", (void *)glwrap_glEGLImageTargetTextureStorageEXT},
{"glUniformBufferEXT", (void *)glwrap_glUniformBufferEXT},
{"glGetUniformBufferSizeEXT", (void *)glwrap_glGetUniformBufferSizeEXT},
{"glGetUniformOffsetEXT", (void *)glwrap_glGetUniformOffsetEXT},
{"glBlendColorEXT", (void *)glwrap_glBlendColorEXT},
{"glBlendEquationSeparateEXT", (void *)glwrap_glBlendEquationSeparateEXT},
{"glBlendFuncSeparateEXT", (void *)glwrap_glBlendFuncSeparateEXT},
{"glBlendEquationEXT", (void *)glwrap_glBlendEquationEXT},
{"glColorSubTableEXT", (void *)glwrap_glColorSubTableEXT},
{"glCopyColorSubTableEXT", (void *)glwrap_glCopyColorSubTableEXT},
{"glLockArraysEXT", (void *)glwrap_glLockArraysEXT},
{"glUnlockArraysEXT", (void *)glwrap_glUnlockArraysEXT},
{"glConvolutionFilter1DEXT", (void *)glwrap_glConvolutionFilter1DEXT},
{"glConvolutionFilter2DEXT", (void *)glwrap_glConvolutionFilter2DEXT},
{"glConvolutionParameterfEXT", (void *)glwrap_glConvolutionParameterfEXT},
{"glConvolutionParameterfvEXT", (void *)glwrap_glConvolutionParameterfvEXT},
{"glConvolutionParameteriEXT", (void *)glwrap_glConvolutionParameteriEXT},
{"glConvolutionParameterivEXT", (void *)glwrap_glConvolutionParameterivEXT},
{"glCopyConvolutionFilter1DEXT", (void *)glwrap_glCopyConvolutionFilter1DEXT},
{"glCopyConvolutionFilter2DEXT", (void *)glwrap_glCopyConvolutionFilter2DEXT},
{"glGetConvolutionFilterEXT", (void *)glwrap_glGetConvolutionFilterEXT},
{"glGetConvolutionParameterfvEXT", (void *)glwrap_glGetConvolutionParameterfvEXT},
{"glGetConvolutionParameterivEXT", (void *)glwrap_glGetConvolutionParameterivEXT},
{"glGetSeparableFilterEXT", (void *)glwrap_glGetSeparableFilterEXT},
{"glSeparableFilter2DEXT", (void *)glwrap_glSeparableFilter2DEXT},
{"glTangent3bEXT", (void *)glwrap_glTangent3bEXT},
{"glTangent3bvEXT", (void *)glwrap_glTangent3bvEXT},
{"glTangent3dEXT", (void *)glwrap_glTangent3dEXT},
{"glTangent3dvEXT", (void *)glwrap_glTangent3dvEXT},
{"glTangent3fEXT", (void *)glwrap_glTangent3fEXT},
{"glTangent3fvEXT", (void *)glwrap_glTangent3fvEXT},
{"glTangent3iEXT", (void *)glwrap_glTangent3iEXT},
{"glTangent3ivEXT", (void *)glwrap_glTangent3ivEXT},
{"glTangent3sEXT", (void *)glwrap_glTangent3sEXT},
{"glTangent3svEXT", (void *)glwrap_glTangent3svEXT},
{"glBinormal3bEXT", (void *)glwrap_glBinormal3bEXT},
{"glBinormal3bvEXT", (void *)glwrap_glBinormal3bvEXT},
{"glBinormal3dEXT", (void *)glwrap_glBinormal3dEXT},
{"glBinormal3dvEXT", (void *)glwrap_glBinormal3dvEXT},
{"glBinormal3fEXT", (void *)glwrap_glBinormal3fEXT},
{"glBinormal3fvEXT", (void *)glwrap_glBinormal3fvEXT},
{"glBinormal3iEXT", (void *)glwrap_glBinormal3iEXT},
{"glBinormal3ivEXT", (void *)glwrap_glBinormal3ivEXT},
{"glBinormal3sEXT", (void *)glwrap_glBinormal3sEXT},
{"glBinormal3svEXT", (void *)glwrap_glBinormal3svEXT},
{"glTangentPointerEXT", (void *)glwrap_glTangentPointerEXT},
{"glBinormalPointerEXT", (void *)glwrap_glBinormalPointerEXT},
{"glCopyTexImage1DEXT", (void *)glwrap_glCopyTexImage1DEXT},
{"glCopyTexImage2DEXT", (void *)glwrap_glCopyTexImage2DEXT},
{"glCopyTexSubImage1DEXT", (void *)glwrap_glCopyTexSubImage1DEXT},
{"glCopyTexSubImage2DEXT", (void *)glwrap_glCopyTexSubImage2DEXT},
{"glCopyTexSubImage3DEXT", (void *)glwrap_glCopyTexSubImage3DEXT},
{"glCullParameterdvEXT", (void *)glwrap_glCullParameterdvEXT},
{"glCullParameterfvEXT", (void *)glwrap_glCullParameterfvEXT},
{"glLabelObjectEXT", (void *)glwrap_glLabelObjectEXT},
{"glGetObjectLabelEXT", (void *)glwrap_glGetObjectLabelEXT},
{"glInsertEventMarkerEXT", (void *)glwrap_glInsertEventMarkerEXT},
{"glPushGroupMarkerEXT", (void *)glwrap_glPushGroupMarkerEXT},
{"glPopGroupMarkerEXT", (void *)glwrap_glPopGroupMarkerEXT},
{"glDepthBoundsEXT", (void *)glwrap_glDepthBoundsEXT},
{"glMatrixLoadfEXT", (void *)glwrap_glMatrixLoadfEXT},
{"glMatrixLoaddEXT", (void *)glwrap_glMatrixLoaddEXT},
{"glMatrixMultfEXT", (void *)glwrap_glMatrixMultfEXT},
{"glMatrixMultdEXT", (void *)glwrap_glMatrixMultdEXT},
{"glMatrixLoadIdentityEXT", (void *)glwrap_glMatrixLoadIdentityEXT},
{"glMatrixRotatefEXT", (void *)glwrap_glMatrixRotatefEXT},
{"glMatrixRotatedEXT", (void *)glwrap_glMatrixRotatedEXT},
{"glMatrixScalefEXT", (void *)glwrap_glMatrixScalefEXT},
{"glMatrixScaledEXT", (void *)glwrap_glMatrixScaledEXT},
{"glMatrixTranslatefEXT", (void *)glwrap_glMatrixTranslatefEXT},
{"glMatrixTranslatedEXT", (void *)glwrap_glMatrixTranslatedEXT},
{"glMatrixFrustumEXT", (void *)glwrap_glMatrixFrustumEXT},
{"glMatrixOrthoEXT", (void *)glwrap_glMatrixOrthoEXT},
{"glMatrixPopEXT", (void *)glwrap_glMatrixPopEXT},
{"glMatrixPushEXT", (void *)glwrap_glMatrixPushEXT},
{"glClientAttribDefaultEXT", (void *)glwrap_glClientAttribDefaultEXT},
{"glPushClientAttribDefaultEXT", (void *)glwrap_glPushClientAttribDefaultEXT},
{"glTextureParameterfEXT", (void *)glwrap_glTextureParameterfEXT},
{"glTextureParameterfvEXT", (void *)glwrap_glTextureParameterfvEXT},
{"glTextureParameteriEXT", (void *)glwrap_glTextureParameteriEXT},
{"glTextureParameterivEXT", (void *)glwrap_glTextureParameterivEXT},
{"glTextureImage1DEXT", (void *)glwrap_glTextureImage1DEXT},
{"glTextureImage2DEXT", (void *)glwrap_glTextureImage2DEXT},
{"glTextureSubImage1DEXT", (void *)glwrap_glTextureSubImage1DEXT},
{"glTextureSubImage2DEXT", (void *)glwrap_glTextureSubImage2DEXT},
{"glCopyTextureImage1DEXT", (void *)glwrap_glCopyTextureImage1DEXT},
{"glCopyTextureImage2DEXT", (void *)glwrap_glCopyTextureImage2DEXT},
{"glCopyTextureSubImage1DEXT", (void *)glwrap_glCopyTextureSubImage1DEXT},
{"glCopyTextureSubImage2DEXT", (void *)glwrap_glCopyTextureSubImage2DEXT},
{"glGetTextureImageEXT", (void *)glwrap_glGetTextureImageEXT},
{"glGetTextureParameterfvEXT", (void *)glwrap_glGetTextureParameterfvEXT},
{"glGetTextureParameterivEXT", (void *)glwrap_glGetTextureParameterivEXT},
{"glGetTextureLevelParameterfvEXT", (void *)glwrap_glGetTextureLevelParameterfvEXT},
{"glGetTextureLevelParameterivEXT", (void *)glwrap_glGetTextureLevelParameterivEXT},
{"glTextureImage3DEXT", (void *)glwrap_glTextureImage3DEXT},
{"glTextureSubImage3DEXT", (void *)glwrap_glTextureSubImage3DEXT},
{"glCopyTextureSubImage3DEXT", (void *)glwrap_glCopyTextureSubImage3DEXT},
{"glBindMultiTextureEXT", (void *)glwrap_glBindMultiTextureEXT},
{"glMultiTexCoordPointerEXT", (void *)glwrap_glMultiTexCoordPointerEXT},
{"glMultiTexEnvfEXT", (void *)glwrap_glMultiTexEnvfEXT},
{"glMultiTexEnvfvEXT", (void *)glwrap_glMultiTexEnvfvEXT},
{"glMultiTexEnviEXT", (void *)glwrap_glMultiTexEnviEXT},
{"glMultiTexEnvivEXT", (void *)glwrap_glMultiTexEnvivEXT},
{"glMultiTexGendEXT", (void *)glwrap_glMultiTexGendEXT},
{"glMultiTexGendvEXT", (void *)glwrap_glMultiTexGendvEXT},
{"glMultiTexGenfEXT", (void *)glwrap_glMultiTexGenfEXT},
{"glMultiTexGenfvEXT", (void *)glwrap_glMultiTexGenfvEXT},
{"glMultiTexGeniEXT", (void *)glwrap_glMultiTexGeniEXT},
{"glMultiTexGenivEXT", (void *)glwrap_glMultiTexGenivEXT},
{"glGetMultiTexEnvfvEXT", (void *)glwrap_glGetMultiTexEnvfvEXT},
{"glGetMultiTexEnvivEXT", (void *)glwrap_glGetMultiTexEnvivEXT},
{"glGetMultiTexGendvEXT", (void *)glwrap_glGetMultiTexGendvEXT},
{"glGetMultiTexGenfvEXT", (void *)glwrap_glGetMultiTexGenfvEXT},
{"glGetMultiTexGenivEXT", (void *)glwrap_glGetMultiTexGenivEXT},
{"glMultiTexParameteriEXT", (void *)glwrap_glMultiTexParameteriEXT},
{"glMultiTexParameterivEXT", (void *)glwrap_glMultiTexParameterivEXT},
{"glMultiTexParameterfEXT", (void *)glwrap_glMultiTexParameterfEXT},
{"glMultiTexParameterfvEXT", (void *)glwrap_glMultiTexParameterfvEXT},
{"glMultiTexImage1DEXT", (void *)glwrap_glMultiTexImage1DEXT},
{"glMultiTexImage2DEXT", (void *)glwrap_glMultiTexImage2DEXT},
{"glMultiTexSubImage1DEXT", (void *)glwrap_glMultiTexSubImage1DEXT},
{"glMultiTexSubImage2DEXT", (void *)glwrap_glMultiTexSubImage2DEXT},
{"glCopyMultiTexImage1DEXT", (void *)glwrap_glCopyMultiTexImage1DEXT},
{"glCopyMultiTexImage2DEXT", (void *)glwrap_glCopyMultiTexImage2DEXT},
{"glCopyMultiTexSubImage1DEXT", (void *)glwrap_glCopyMultiTexSubImage1DEXT},
{"glCopyMultiTexSubImage2DEXT", (void *)glwrap_glCopyMultiTexSubImage2DEXT},
{"glGetMultiTexImageEXT", (void *)glwrap_glGetMultiTexImageEXT},
{"glGetMultiTexParameterfvEXT", (void *)glwrap_glGetMultiTexParameterfvEXT},
{"glGetMultiTexParameterivEXT", (void *)glwrap_glGetMultiTexParameterivEXT},
{"glGetMultiTexLevelParameterfvEXT", (void *)glwrap_glGetMultiTexLevelParameterfvEXT},
{"glGetMultiTexLevelParameterivEXT", (void *)glwrap_glGetMultiTexLevelParameterivEXT},
{"glMultiTexImage3DEXT", (void *)glwrap_glMultiTexImage3DEXT},
{"glMultiTexSubImage3DEXT", (void *)glwrap_glMultiTexSubImage3DEXT},
{"glCopyMultiTexSubImage3DEXT", (void *)glwrap_glCopyMultiTexSubImage3DEXT},
{"glEnableClientStateIndexedEXT", (void *)glwrap_glEnableClientStateIndexedEXT},
{"glDisableClientStateIndexedEXT", (void *)glwrap_glDisableClientStateIndexedEXT},
{"glGetFloatIndexedvEXT", (void *)glwrap_glGetFloatIndexedvEXT},
{"glGetDoubleIndexedvEXT", (void *)glwrap_glGetDoubleIndexedvEXT},
{"glGetPointerIndexedvEXT", (void *)glwrap_glGetPointerIndexedvEXT},
{"glEnableIndexedEXT", (void *)glwrap_glEnableIndexedEXT},
{"glDisableIndexedEXT", (void *)glwrap_glDisableIndexedEXT},
{"glIsEnabledIndexedEXT", (void *)glwrap_glIsEnabledIndexedEXT},
{"glGetIntegerIndexedvEXT", (void *)glwrap_glGetIntegerIndexedvEXT},
{"glGetBooleanIndexedvEXT", (void *)glwrap_glGetBooleanIndexedvEXT},
{"glCompressedTextureImage3DEXT", (void *)glwrap_glCompressedTextureImage3DEXT},
{"glCompressedTextureImage2DEXT", (void *)glwrap_glCompressedTextureImage2DEXT},
{"glCompressedTextureImage1DEXT", (void *)glwrap_glCompressedTextureImage1DEXT},
{"glCompressedTextureSubImage3DEXT", (void *)glwrap_glCompressedTextureSubImage3DEXT},
{"glCompressedTextureSubImage2DEXT", (void *)glwrap_glCompressedTextureSubImage2DEXT},
{"glCompressedTextureSubImage1DEXT", (void *)glwrap_glCompressedTextureSubImage1DEXT},
{"glGetCompressedTextureImageEXT", (void *)glwrap_glGetCompressedTextureImageEXT},
{"glCompressedMultiTexImage3DEXT", (void *)glwrap_glCompressedMultiTexImage3DEXT},
{"glCompressedMultiTexImage2DEXT", (void *)glwrap_glCompressedMultiTexImage2DEXT},
{"glCompressedMultiTexImage1DEXT", (void *)glwrap_glCompressedMultiTexImage1DEXT},
{"glCompressedMultiTexSubImage3DEXT", (void *)glwrap_glCompressedMultiTexSubImage3DEXT},
{"glCompressedMultiTexSubImage2DEXT", (void *)glwrap_glCompressedMultiTexSubImage2DEXT},
{"glCompressedMultiTexSubImage1DEXT", (void *)glwrap_glCompressedMultiTexSubImage1DEXT},
{"glGetCompressedMultiTexImageEXT", (void *)glwrap_glGetCompressedMultiTexImageEXT},
{"glMatrixLoadTransposefEXT", (void *)glwrap_glMatrixLoadTransposefEXT},
{"glMatrixLoadTransposedEXT", (void *)glwrap_glMatrixLoadTransposedEXT},
{"glMatrixMultTransposefEXT", (void *)glwrap_glMatrixMultTransposefEXT},
{"glMatrixMultTransposedEXT", (void *)glwrap_glMatrixMultTransposedEXT},
{"glNamedBufferDataEXT", (void *)glwrap_glNamedBufferDataEXT},
{"glNamedBufferSubDataEXT", (void *)glwrap_glNamedBufferSubDataEXT},
{"glMapNamedBufferEXT", (void *)glwrap_glMapNamedBufferEXT},
{"glUnmapNamedBufferEXT", (void *)glwrap_glUnmapNamedBufferEXT},
{"glGetNamedBufferParameterivEXT", (void *)glwrap_glGetNamedBufferParameterivEXT},
{"glGetNamedBufferPointervEXT", (void *)glwrap_glGetNamedBufferPointervEXT},
{"glGetNamedBufferSubDataEXT", (void *)glwrap_glGetNamedBufferSubDataEXT},
{"glProgramUniform1fEXT", (void *)glwrap_glProgramUniform1fEXT},
{"glProgramUniform2fEXT", (void *)glwrap_glProgramUniform2fEXT},
{"glProgramUniform3fEXT", (void *)glwrap_glProgramUniform3fEXT},
{"glProgramUniform4fEXT", (void *)glwrap_glProgramUniform4fEXT},
{"glProgramUniform1iEXT", (void *)glwrap_glProgramUniform1iEXT},
{"glProgramUniform2iEXT", (void *)glwrap_glProgramUniform2iEXT},
{"glProgramUniform3iEXT", (void *)glwrap_glProgramUniform3iEXT},
{"glProgramUniform4iEXT", (void *)glwrap_glProgramUniform4iEXT},
{"glProgramUniform1fvEXT", (void *)glwrap_glProgramUniform1fvEXT},
{"glProgramUniform2fvEXT", (void *)glwrap_glProgramUniform2fvEXT},
{"glProgramUniform3fvEXT", (void *)glwrap_glProgramUniform3fvEXT},
{"glProgramUniform4fvEXT", (void *)glwrap_glProgramUniform4fvEXT},
{"glProgramUniform1ivEXT", (void *)glwrap_glProgramUniform1ivEXT},
{"glProgramUniform2ivEXT", (void *)glwrap_glProgramUniform2ivEXT},
{"glProgramUniform3ivEXT", (void *)glwrap_glProgramUniform3ivEXT},
{"glProgramUniform4ivEXT", (void *)glwrap_glProgramUniform4ivEXT},
{"glProgramUniformMatrix2fvEXT", (void *)glwrap_glProgramUniformMatrix2fvEXT},
{"glProgramUniformMatrix3fvEXT", (void *)glwrap_glProgramUniformMatrix3fvEXT},
{"glProgramUniformMatrix4fvEXT", (void *)glwrap_glProgramUniformMatrix4fvEXT},
{"glProgramUniformMatrix2x3fvEXT", (void *)glwrap_glProgramUniformMatrix2x3fvEXT},
{"glProgramUniformMatrix3x2fvEXT", (void *)glwrap_glProgramUniformMatrix3x2fvEXT},
{"glProgramUniformMatrix2x4fvEXT", (void *)glwrap_glProgramUniformMatrix2x4fvEXT},
{"glProgramUniformMatrix4x2fvEXT", (void *)glwrap_glProgramUniformMatrix4x2fvEXT},
{"glProgramUniformMatrix3x4fvEXT", (void *)glwrap_glProgramUniformMatrix3x4fvEXT},
{"glProgramUniformMatrix4x3fvEXT", (void *)glwrap_glProgramUniformMatrix4x3fvEXT},
{"glTextureBufferEXT", (void *)glwrap_glTextureBufferEXT},
{"glMultiTexBufferEXT", (void *)glwrap_glMultiTexBufferEXT},
{"glTextureParameterIivEXT", (void *)glwrap_glTextureParameterIivEXT},
{"glTextureParameterIuivEXT", (void *)glwrap_glTextureParameterIuivEXT},
{"glGetTextureParameterIivEXT", (void *)glwrap_glGetTextureParameterIivEXT},
{"glGetTextureParameterIuivEXT", (void *)glwrap_glGetTextureParameterIuivEXT},
{"glMultiTexParameterIivEXT", (void *)glwrap_glMultiTexParameterIivEXT},
{"glMultiTexParameterIuivEXT", (void *)glwrap_glMultiTexParameterIuivEXT},
{"glGetMultiTexParameterIivEXT", (void *)glwrap_glGetMultiTexParameterIivEXT},
{"glGetMultiTexParameterIuivEXT", (void *)glwrap_glGetMultiTexParameterIuivEXT},
{"glProgramUniform1uiEXT", (void *)glwrap_glProgramUniform1uiEXT},
{"glProgramUniform2uiEXT", (void *)glwrap_glProgramUniform2uiEXT},
{"glProgramUniform3uiEXT", (void *)glwrap_glProgramUniform3uiEXT},
{"glProgramUniform4uiEXT", (void *)glwrap_glProgramUniform4uiEXT},
{"glProgramUniform1uivEXT", (void *)glwrap_glProgramUniform1uivEXT},
{"glProgramUniform2uivEXT", (void *)glwrap_glProgramUniform2uivEXT},
{"glProgramUniform3uivEXT", (void *)glwrap_glProgramUniform3uivEXT},
{"glProgramUniform4uivEXT", (void *)glwrap_glProgramUniform4uivEXT},
{"glNamedProgramLocalParameters4fvEXT", (void *)glwrap_glNamedProgramLocalParameters4fvEXT},
{"glNamedProgramLocalParameterI4iEXT", (void *)glwrap_glNamedProgramLocalParameterI4iEXT},
{"glNamedProgramLocalParameterI4ivEXT", (void *)glwrap_glNamedProgramLocalParameterI4ivEXT},
{"glNamedProgramLocalParametersI4ivEXT", (void *)glwrap_glNamedProgramLocalParametersI4ivEXT},
{"glNamedProgramLocalParameterI4uiEXT", (void *)glwrap_glNamedProgramLocalParameterI4uiEXT},
{"glNamedProgramLocalParameterI4uivEXT", (void *)glwrap_glNamedProgramLocalParameterI4uivEXT},
{"glNamedProgramLocalParametersI4uivEXT", (void *)glwrap_glNamedProgramLocalParametersI4uivEXT},
{"glGetNamedProgramLocalParameterIivEXT", (void *)glwrap_glGetNamedProgramLocalParameterIivEXT},
{"glGetNamedProgramLocalParameterIuivEXT", (void *)glwrap_glGetNamedProgramLocalParameterIuivEXT},
{"glEnableClientStateiEXT", (void *)glwrap_glEnableClientStateiEXT},
{"glDisableClientStateiEXT", (void *)glwrap_glDisableClientStateiEXT},
{"glGetFloati_vEXT", (void *)glwrap_glGetFloati_vEXT},
{"glGetDoublei_vEXT", (void *)glwrap_glGetDoublei_vEXT},
{"glGetPointeri_vEXT", (void *)glwrap_glGetPointeri_vEXT},
{"glNamedProgramStringEXT", (void *)glwrap_glNamedProgramStringEXT},
{"glNamedProgramLocalParameter4dEXT", (void *)glwrap_glNamedProgramLocalParameter4dEXT},
{"glNamedProgramLocalParameter4dvEXT", (void *)glwrap_glNamedProgramLocalParameter4dvEXT},
{"glNamedProgramLocalParameter4fEXT", (void *)glwrap_glNamedProgramLocalParameter4fEXT},
{"glNamedProgramLocalParameter4fvEXT", (void *)glwrap_glNamedProgramLocalParameter4fvEXT},
{"glGetNamedProgramLocalParameterdvEXT", (void *)glwrap_glGetNamedProgramLocalParameterdvEXT},
{"glGetNamedProgramLocalParameterfvEXT", (void *)glwrap_glGetNamedProgramLocalParameterfvEXT},
{"glGetNamedProgramivEXT", (void *)glwrap_glGetNamedProgramivEXT},
{"glGetNamedProgramStringEXT", (void *)glwrap_glGetNamedProgramStringEXT},
{"glNamedRenderbufferStorageEXT", (void *)glwrap_glNamedRenderbufferStorageEXT},
{"glGetNamedRenderbufferParameterivEXT", (void *)glwrap_glGetNamedRenderbufferParameterivEXT},
{"glNamedRenderbufferStorageMultisampleEXT", (void *)glwrap_glNamedRenderbufferStorageMultisampleEXT},
{"glNamedRenderbufferStorageMultisampleCoverageEXT", (void *)glwrap_glNamedRenderbufferStorageMultisampleCoverageEXT},
{"glCheckNamedFramebufferStatusEXT", (void *)glwrap_glCheckNamedFramebufferStatusEXT},
{"glNamedFramebufferTexture1DEXT", (void *)glwrap_glNamedFramebufferTexture1DEXT},
{"glNamedFramebufferTexture2DEXT", (void *)glwrap_glNamedFramebufferTexture2DEXT},
{"glNamedFramebufferTexture3DEXT", (void *)glwrap_glNamedFramebufferTexture3DEXT},
{"glNamedFramebufferRenderbufferEXT", (void *)glwrap_glNamedFramebufferRenderbufferEXT},
{"glGetNamedFramebufferAttachmentParameterivEXT", (void *)glwrap_glGetNamedFramebufferAttachmentParameterivEXT},
{"glGenerateTextureMipmapEXT", (void *)glwrap_glGenerateTextureMipmapEXT},
{"glGenerateMultiTexMipmapEXT", (void *)glwrap_glGenerateMultiTexMipmapEXT},
{"glFramebufferDrawBufferEXT", (void *)glwrap_glFramebufferDrawBufferEXT},
{"glFramebufferDrawBuffersEXT", (void *)glwrap_glFramebufferDrawBuffersEXT},
{"glFramebufferReadBufferEXT", (void *)glwrap_glFramebufferReadBufferEXT},
{"glGetFramebufferParameterivEXT", (void *)glwrap_glGetFramebufferParameterivEXT},
{"glNamedCopyBufferSubDataEXT", (void *)glwrap_glNamedCopyBufferSubDataEXT},
{"glNamedFramebufferTextureEXT", (void *)glwrap_glNamedFramebufferTextureEXT},
{"glNamedFramebufferTextureLayerEXT", (void *)glwrap_glNamedFramebufferTextureLayerEXT},
{"glNamedFramebufferTextureFaceEXT", (void *)glwrap_glNamedFramebufferTextureFaceEXT},
{"glTextureRenderbufferEXT", (void *)glwrap_glTextureRenderbufferEXT},
{"glMultiTexRenderbufferEXT", (void *)glwrap_glMultiTexRenderbufferEXT},
{"glVertexArrayVertexOffsetEXT", (void *)glwrap_glVertexArrayVertexOffsetEXT},
{"glVertexArrayColorOffsetEXT", (void *)glwrap_glVertexArrayColorOffsetEXT},
{"glVertexArrayEdgeFlagOffsetEXT", (void *)glwrap_glVertexArrayEdgeFlagOffsetEXT},
{"glVertexArrayIndexOffsetEXT", (void *)glwrap_glVertexArrayIndexOffsetEXT},
{"glVertexArrayNormalOffsetEXT", (void *)glwrap_glVertexArrayNormalOffsetEXT},
{"glVertexArrayTexCoordOffsetEXT", (void *)glwrap_glVertexArrayTexCoordOffsetEXT},
{"glVertexArrayMultiTexCoordOffsetEXT", (void *)glwrap_glVertexArrayMultiTexCoordOffsetEXT},
{"glVertexArrayFogCoordOffsetEXT", (void *)glwrap_glVertexArrayFogCoordOffsetEXT},
{"glVertexArraySecondaryColorOffsetEXT", (void *)glwrap_glVertexArraySecondaryColorOffsetEXT},
{"glVertexArrayVertexAttribOffsetEXT", (void *)glwrap_glVertexArrayVertexAttribOffsetEXT},
{"glVertexArrayVertexAttribIOffsetEXT", (void *)glwrap_glVertexArrayVertexAttribIOffsetEXT},
{"glEnableVertexArrayEXT", (void *)glwrap_glEnableVertexArrayEXT},
{"glDisableVertexArrayEXT", (void *)glwrap_glDisableVertexArrayEXT},
{"glEnableVertexArrayAttribEXT", (void *)glwrap_glEnableVertexArrayAttribEXT},
{"glDisableVertexArrayAttribEXT", (void *)glwrap_glDisableVertexArrayAttribEXT},
{"glGetVertexArrayIntegervEXT", (void *)glwrap_glGetVertexArrayIntegervEXT},
{"glGetVertexArrayPointervEXT", (void *)glwrap_glGetVertexArrayPointervEXT},
{"glGetVertexArrayIntegeri_vEXT", (void *)glwrap_glGetVertexArrayIntegeri_vEXT},
{"glGetVertexArrayPointeri_vEXT", (void *)glwrap_glGetVertexArrayPointeri_vEXT},
{"glMapNamedBufferRangeEXT", (void *)glwrap_glMapNamedBufferRangeEXT},
{"glFlushMappedNamedBufferRangeEXT", (void *)glwrap_glFlushMappedNamedBufferRangeEXT},
{"glNamedBufferStorageEXT", (void *)glwrap_glNamedBufferStorageEXT},
{"glClearNamedBufferDataEXT", (void *)glwrap_glClearNamedBufferDataEXT},
{"glClearNamedBufferSubDataEXT", (void *)glwrap_glClearNamedBufferSubDataEXT},
{"glNamedFramebufferParameteriEXT", (void *)glwrap_glNamedFramebufferParameteriEXT},
{"glGetNamedFramebufferParameterivEXT", (void *)glwrap_glGetNamedFramebufferParameterivEXT},
{"glProgramUniform1dEXT", (void *)glwrap_glProgramUniform1dEXT},
{"glProgramUniform2dEXT", (void *)glwrap_glProgramUniform2dEXT},
{"glProgramUniform3dEXT", (void *)glwrap_glProgramUniform3dEXT},
{"glProgramUniform4dEXT", (void *)glwrap_glProgramUniform4dEXT},
{"glProgramUniform1dvEXT", (void *)glwrap_glProgramUniform1dvEXT},
{"glProgramUniform2dvEXT", (void *)glwrap_glProgramUniform2dvEXT},
{"glProgramUniform3dvEXT", (void *)glwrap_glProgramUniform3dvEXT},
{"glProgramUniform4dvEXT", (void *)glwrap_glProgramUniform4dvEXT},
{"glProgramUniformMatrix2dvEXT", (void *)glwrap_glProgramUniformMatrix2dvEXT},
{"glProgramUniformMatrix3dvEXT", (void *)glwrap_glProgramUniformMatrix3dvEXT},
{"glProgramUniformMatrix4dvEXT", (void *)glwrap_glProgramUniformMatrix4dvEXT},
{"glProgramUniformMatrix2x3dvEXT", (void *)glwrap_glProgramUniformMatrix2x3dvEXT},
{"glProgramUniformMatrix2x4dvEXT", (void *)glwrap_glProgramUniformMatrix2x4dvEXT},
{"glProgramUniformMatrix3x2dvEXT", (void *)glwrap_glProgramUniformMatrix3x2dvEXT},
{"glProgramUniformMatrix3x4dvEXT", (void *)glwrap_glProgramUniformMatrix3x4dvEXT},
{"glProgramUniformMatrix4x2dvEXT", (void *)glwrap_glProgramUniformMatrix4x2dvEXT},
{"glProgramUniformMatrix4x3dvEXT", (void *)glwrap_glProgramUniformMatrix4x3dvEXT},
{"glTextureBufferRangeEXT", (void *)glwrap_glTextureBufferRangeEXT},
{"glTextureStorage1DEXT", (void *)glwrap_glTextureStorage1DEXT},
{"glTextureStorage2DEXT", (void *)glwrap_glTextureStorage2DEXT},
{"glTextureStorage3DEXT", (void *)glwrap_glTextureStorage3DEXT},
{"glTextureStorage2DMultisampleEXT", (void *)glwrap_glTextureStorage2DMultisampleEXT},
{"glTextureStorage3DMultisampleEXT", (void *)glwrap_glTextureStorage3DMultisampleEXT},
{"glVertexArrayBindVertexBufferEXT", (void *)glwrap_glVertexArrayBindVertexBufferEXT},
{"glVertexArrayVertexAttribFormatEXT", (void *)glwrap_glVertexArrayVertexAttribFormatEXT},
{"glVertexArrayVertexAttribIFormatEXT", (void *)glwrap_glVertexArrayVertexAttribIFormatEXT},
{"glVertexArrayVertexAttribLFormatEXT", (void *)glwrap_glVertexArrayVertexAttribLFormatEXT},
{"glVertexArrayVertexAttribBindingEXT", (void *)glwrap_glVertexArrayVertexAttribBindingEXT},
{"glVertexArrayVertexBindingDivisorEXT", (void *)glwrap_glVertexArrayVertexBindingDivisorEXT},
{"glVertexArrayVertexAttribLOffsetEXT", (void *)glwrap_glVertexArrayVertexAttribLOffsetEXT},
{"glTexturePageCommitmentEXT", (void *)glwrap_glTexturePageCommitmentEXT},
{"glVertexArrayVertexAttribDivisorEXT", (void *)glwrap_glVertexArrayVertexAttribDivisorEXT},
{"glColorMaskIndexedEXT", (void *)glwrap_glColorMaskIndexedEXT},
{"glDrawArraysInstancedEXT", (void *)glwrap_glDrawArraysInstancedEXT},
{"glDrawElementsInstancedEXT", (void *)glwrap_glDrawElementsInstancedEXT},
{"glDrawRangeElementsEXT", (void *)glwrap_glDrawRangeElementsEXT},
{"glBufferStorageExternalEXT", (void *)glwrap_glBufferStorageExternalEXT},
{"glNamedBufferStorageExternalEXT", (void *)glwrap_glNamedBufferStorageExternalEXT},
{"glFogCoordfEXT", (void *)glwrap_glFogCoordfEXT},
{"glFogCoordfvEXT", (void *)glwrap_glFogCoordfvEXT},
{"glFogCoorddEXT", (void *)glwrap_glFogCoorddEXT},
{"glFogCoorddvEXT", (void *)glwrap_glFogCoorddvEXT},
{"glFogCoordPointerEXT", (void *)glwrap_glFogCoordPointerEXT},
{"glBlitFramebufferEXT", (void *)glwrap_glBlitFramebufferEXT},
{"glRenderbufferStorageMultisampleEXT", (void *)glwrap_glRenderbufferStorageMultisampleEXT},
{"glIsRenderbufferEXT", (void *)glwrap_glIsRenderbufferEXT},
{"glBindRenderbufferEXT", (void *)glwrap_glBindRenderbufferEXT},
{"glDeleteRenderbuffersEXT", (void *)glwrap_glDeleteRenderbuffersEXT},
{"glGenRenderbuffersEXT", (void *)glwrap_glGenRenderbuffersEXT},
{"glRenderbufferStorageEXT", (void *)glwrap_glRenderbufferStorageEXT},
{"glGetRenderbufferParameterivEXT", (void *)glwrap_glGetRenderbufferParameterivEXT},
{"glIsFramebufferEXT", (void *)glwrap_glIsFramebufferEXT},
{"glBindFramebufferEXT", (void *)glwrap_glBindFramebufferEXT},
{"glDeleteFramebuffersEXT", (void *)glwrap_glDeleteFramebuffersEXT},
{"glGenFramebuffersEXT", (void *)glwrap_glGenFramebuffersEXT},
{"glCheckFramebufferStatusEXT", (void *)glwrap_glCheckFramebufferStatusEXT},
{"glFramebufferTexture1DEXT", (void *)glwrap_glFramebufferTexture1DEXT},
{"glFramebufferTexture2DEXT", (void *)glwrap_glFramebufferTexture2DEXT},
{"glFramebufferTexture3DEXT", (void *)glwrap_glFramebufferTexture3DEXT},
{"glFramebufferRenderbufferEXT", (void *)glwrap_glFramebufferRenderbufferEXT},
{"glGetFramebufferAttachmentParameterivEXT", (void *)glwrap_glGetFramebufferAttachmentParameterivEXT},
{"glGenerateMipmapEXT", (void *)glwrap_glGenerateMipmapEXT},
{"glProgramParameteriEXT", (void *)glwrap_glProgramParameteriEXT},
{"glProgramEnvParameters4fvEXT", (void *)glwrap_glProgramEnvParameters4fvEXT},
{"glProgramLocalParameters4fvEXT", (void *)glwrap_glProgramLocalParameters4fvEXT},
{"glGetUniformuivEXT", (void *)glwrap_glGetUniformuivEXT},
{"glBindFragDataLocationEXT", (void *)glwrap_glBindFragDataLocationEXT},
{"glGetFragDataLocationEXT", (void *)glwrap_glGetFragDataLocationEXT},
{"glUniform1uiEXT", (void *)glwrap_glUniform1uiEXT},
{"glUniform2uiEXT", (void *)glwrap_glUniform2uiEXT},
{"glUniform3uiEXT", (void *)glwrap_glUniform3uiEXT},
{"glUniform4uiEXT", (void *)glwrap_glUniform4uiEXT},
{"glUniform1uivEXT", (void *)glwrap_glUniform1uivEXT},
{"glUniform2uivEXT", (void *)glwrap_glUniform2uivEXT},
{"glUniform3uivEXT", (void *)glwrap_glUniform3uivEXT},
{"glUniform4uivEXT", (void *)glwrap_glUniform4uivEXT},
{"glGetHistogramEXT", (void *)glwrap_glGetHistogramEXT},
{"glGetHistogramParameterfvEXT", (void *)glwrap_glGetHistogramParameterfvEXT},
{"glGetHistogramParameterivEXT", (void *)glwrap_glGetHistogramParameterivEXT},
{"glGetMinmaxEXT", (void *)glwrap_glGetMinmaxEXT},
{"glGetMinmaxParameterfvEXT", (void *)glwrap_glGetMinmaxParameterfvEXT},
{"glGetMinmaxParameterivEXT", (void *)glwrap_glGetMinmaxParameterivEXT},
{"glHistogramEXT", (void *)glwrap_glHistogramEXT},
{"glMinmaxEXT", (void *)glwrap_glMinmaxEXT},
{"glResetHistogramEXT", (void *)glwrap_glResetHistogramEXT},
{"glResetMinmaxEXT", (void *)glwrap_glResetMinmaxEXT},
{"glIndexFuncEXT", (void *)glwrap_glIndexFuncEXT},
{"glIndexMaterialEXT", (void *)glwrap_glIndexMaterialEXT},
{"glApplyTextureEXT", (void *)glwrap_glApplyTextureEXT},
{"glTextureLightEXT", (void *)glwrap_glTextureLightEXT},
{"glTextureMaterialEXT", (void *)glwrap_glTextureMaterialEXT},
{"glGetUnsignedBytevEXT", (void *)glwrap_glGetUnsignedBytevEXT},
{"glGetUnsignedBytei_vEXT", (void *)glwrap_glGetUnsignedBytei_vEXT},
{"glDeleteMemoryObjectsEXT", (void *)glwrap_glDeleteMemoryObjectsEXT},
{"glIsMemoryObjectEXT", (void *)glwrap_glIsMemoryObjectEXT},
{"glCreateMemoryObjectsEXT", (void *)glwrap_glCreateMemoryObjectsEXT},
{"glMemoryObjectParameterivEXT", (void *)glwrap_glMemoryObjectParameterivEXT},
{"glGetMemoryObjectParameterivEXT", (void *)glwrap_glGetMemoryObjectParameterivEXT},
{"glTexStorageMem2DEXT", (void *)glwrap_glTexStorageMem2DEXT},
{"glTexStorageMem2DMultisampleEXT", (void *)glwrap_glTexStorageMem2DMultisampleEXT},
{"glTexStorageMem3DEXT", (void *)glwrap_glTexStorageMem3DEXT},
{"glTexStorageMem3DMultisampleEXT", (void *)glwrap_glTexStorageMem3DMultisampleEXT},
{"glBufferStorageMemEXT", (void *)glwrap_glBufferStorageMemEXT},
{"glTextureStorageMem2DEXT", (void *)glwrap_glTextureStorageMem2DEXT},
{"glTextureStorageMem2DMultisampleEXT", (void *)glwrap_glTextureStorageMem2DMultisampleEXT},
{"glTextureStorageMem3DEXT", (void *)glwrap_glTextureStorageMem3DEXT},
{"glTextureStorageMem3DMultisampleEXT", (void *)glwrap_glTextureStorageMem3DMultisampleEXT},
{"glNamedBufferStorageMemEXT", (void *)glwrap_glNamedBufferStorageMemEXT},
{"glTexStorageMem1DEXT", (void *)glwrap_glTexStorageMem1DEXT},
{"glTextureStorageMem1DEXT", (void *)glwrap_glTextureStorageMem1DEXT},
{"glImportMemoryFdEXT", (void *)glwrap_glImportMemoryFdEXT},
{"glImportMemoryWin32HandleEXT", (void *)glwrap_glImportMemoryWin32HandleEXT},
{"glImportMemoryWin32NameEXT", (void *)glwrap_glImportMemoryWin32NameEXT},
{"glMultiDrawArraysEXT", (void *)glwrap_glMultiDrawArraysEXT},
{"glMultiDrawElementsEXT", (void *)glwrap_glMultiDrawElementsEXT},
{"glSampleMaskEXT", (void *)glwrap_glSampleMaskEXT},
{"glSamplePatternEXT", (void *)glwrap_glSamplePatternEXT},
{"glColorTableEXT", (void *)glwrap_glColorTableEXT},
{"glGetColorTableEXT", (void *)glwrap_glGetColorTableEXT},
{"glGetColorTableParameterivEXT", (void *)glwrap_glGetColorTableParameterivEXT},
{"glGetColorTableParameterfvEXT", (void *)glwrap_glGetColorTableParameterfvEXT},
{"glPixelTransformParameteriEXT", (void *)glwrap_glPixelTransformParameteriEXT},
{"glPixelTransformParameterfEXT", (void *)glwrap_glPixelTransformParameterfEXT},
{"glPixelTransformParameterivEXT", (void *)glwrap_glPixelTransformParameterivEXT},
{"glPixelTransformParameterfvEXT", (void *)glwrap_glPixelTransformParameterfvEXT},
{"glGetPixelTransformParameterivEXT", (void *)glwrap_glGetPixelTransformParameterivEXT},
{"glGetPixelTransformParameterfvEXT", (void *)glwrap_glGetPixelTransformParameterfvEXT},
{"glPointParameterfEXT", (void *)glwrap_glPointParameterfEXT},
{"glPointParameterfvEXT", (void *)glwrap_glPointParameterfvEXT},
{"glPolygonOffsetEXT", (void *)glwrap_glPolygonOffsetEXT},
{"glPolygonOffsetClampEXT", (void *)glwrap_glPolygonOffsetClampEXT},
{"glProvokingVertexEXT", (void *)glwrap_glProvokingVertexEXT},
{"glRasterSamplesEXT", (void *)glwrap_glRasterSamplesEXT},
{"glSecondaryColor3bEXT", (void *)glwrap_glSecondaryColor3bEXT},
{"glSecondaryColor3bvEXT", (void *)glwrap_glSecondaryColor3bvEXT},
{"glSecondaryColor3dEXT", (void *)glwrap_glSecondaryColor3dEXT},
{"glSecondaryColor3dvEXT", (void *)glwrap_glSecondaryColor3dvEXT},
{"glSecondaryColor3fEXT", (void *)glwrap_glSecondaryColor3fEXT},
{"glSecondaryColor3fvEXT", (void *)glwrap_glSecondaryColor3fvEXT},
{"glSecondaryColor3iEXT", (void *)glwrap_glSecondaryColor3iEXT},
{"glSecondaryColor3ivEXT", (void *)glwrap_glSecondaryColor3ivEXT},
{"glSecondaryColor3sEXT", (void *)glwrap_glSecondaryColor3sEXT},
{"glSecondaryColor3svEXT", (void *)glwrap_glSecondaryColor3svEXT},
{"glSecondaryColor3ubEXT", (void *)glwrap_glSecondaryColor3ubEXT},
{"glSecondaryColor3ubvEXT", (void *)glwrap_glSecondaryColor3ubvEXT},
{"glSecondaryColor3uiEXT", (void *)glwrap_glSecondaryColor3uiEXT},
{"glSecondaryColor3uivEXT", (void *)glwrap_glSecondaryColor3uivEXT},
{"glSecondaryColor3usEXT", (void *)glwrap_glSecondaryColor3usEXT},
{"glSecondaryColor3usvEXT", (void *)glwrap_glSecondaryColor3usvEXT},
{"glSecondaryColorPointerEXT", (void *)glwrap_glSecondaryColorPointerEXT},
{"glGenSemaphoresEXT", (void *)glwrap_glGenSemaphoresEXT},
{"glDeleteSemaphoresEXT", (void *)glwrap_glDeleteSemaphoresEXT},
{"glIsSemaphoreEXT", (void *)glwrap_glIsSemaphoreEXT},
{"glSemaphoreParameterui64vEXT", (void *)glwrap_glSemaphoreParameterui64vEXT},
{"glGetSemaphoreParameterui64vEXT", (void *)glwrap_glGetSemaphoreParameterui64vEXT},
{"glWaitSemaphoreEXT", (void *)glwrap_glWaitSemaphoreEXT},
{"glSignalSemaphoreEXT", (void *)glwrap_glSignalSemaphoreEXT},
{"glImportSemaphoreFdEXT", (void *)glwrap_glImportSemaphoreFdEXT},
{"glImportSemaphoreWin32HandleEXT", (void *)glwrap_glImportSemaphoreWin32HandleEXT},
{"glImportSemaphoreWin32NameEXT", (void *)glwrap_glImportSemaphoreWin32NameEXT},
{"glUseShaderProgramEXT", (void *)glwrap_glUseShaderProgramEXT},
{"glActiveProgramEXT", (void *)glwrap_glActiveProgramEXT},
{"glCreateShaderProgramEXT", (void *)glwrap_glCreateShaderProgramEXT},
{"glFramebufferFetchBarrierEXT", (void *)glwrap_glFramebufferFetchBarrierEXT},
{"glBindImageTextureEXT", (void *)glwrap_glBindImageTextureEXT},
{"glMemoryBarrierEXT", (void *)glwrap_glMemoryBarrierEXT},
{"glStencilClearTagEXT", (void *)glwrap_glStencilClearTagEXT},
{"glActiveStencilFaceEXT", (void *)glwrap_glActiveStencilFaceEXT},
{"glTexSubImage1DEXT", (void *)glwrap_glTexSubImage1DEXT},
{"glTexSubImage2DEXT", (void *)glwrap_glTexSubImage2DEXT},
{"glTexImage3DEXT", (void *)glwrap_glTexImage3DEXT},
{"glTexSubImage3DEXT", (void *)glwrap_glTexSubImage3DEXT},
{"glFramebufferTextureLayerEXT", (void *)glwrap_glFramebufferTextureLayerEXT},
{"glTexBufferEXT", (void *)glwrap_glTexBufferEXT},
{"glTexParameterIivEXT", (void *)glwrap_glTexParameterIivEXT},
{"glTexParameterIuivEXT", (void *)glwrap_glTexParameterIuivEXT},
{"glGetTexParameterIivEXT", (void *)glwrap_glGetTexParameterIivEXT},
{"glGetTexParameterIuivEXT", (void *)glwrap_glGetTexParameterIuivEXT},
{"glClearColorIiEXT", (void *)glwrap_glClearColorIiEXT},
{"glClearColorIuiEXT", (void *)glwrap_glClearColorIuiEXT},
{"glAreTexturesResidentEXT", (void *)glwrap_glAreTexturesResidentEXT},
{"glBindTextureEXT", (void *)glwrap_glBindTextureEXT},
{"glDeleteTexturesEXT", (void *)glwrap_glDeleteTexturesEXT},
{"glGenTexturesEXT", (void *)glwrap_glGenTexturesEXT},
{"glIsTextureEXT", (void *)glwrap_glIsTextureEXT},
{"glPrioritizeTexturesEXT", (void *)glwrap_glPrioritizeTexturesEXT},
{"glTextureNormalEXT", (void *)glwrap_glTextureNormalEXT},
{"glGetQueryObjecti64vEXT", (void *)glwrap_glGetQueryObjecti64vEXT},
{"glGetQueryObjectui64vEXT", (void *)glwrap_glGetQueryObjectui64vEXT},
{"glBeginTransformFeedbackEXT", (void *)glwrap_glBeginTransformFeedbackEXT},
{"glEndTransformFeedbackEXT", (void *)glwrap_glEndTransformFeedbackEXT},
{"glBindBufferRangeEXT", (void *)glwrap_glBindBufferRangeEXT},
{"glBindBufferOffsetEXT", (void *)glwrap_glBindBufferOffsetEXT},
{"glBindBufferBaseEXT", (void *)glwrap_glBindBufferBaseEXT},
{"glTransformFeedbackVaryingsEXT", (void *)glwrap_glTransformFeedbackVaryingsEXT},
{"glGetTransformFeedbackVaryingEXT", (void *)glwrap_glGetTransformFeedbackVaryingEXT},
{"glArrayElementEXT", (void *)glwrap_glArrayElementEXT},
{"glColorPointerEXT", (void *)glwrap_glColorPointerEXT},
{"glDrawArraysEXT", (void *)glwrap_glDrawArraysEXT},
{"glEdgeFlagPointerEXT", (void *)glwrap_glEdgeFlagPointerEXT},
{"glGetPointervEXT", (void *)glwrap_glGetPointervEXT},
{"glIndexPointerEXT", (void *)glwrap_glIndexPointerEXT},
{"glNormalPointerEXT", (void *)glwrap_glNormalPointerEXT},
{"glTexCoordPointerEXT", (void *)glwrap_glTexCoordPointerEXT},
{"glVertexPointerEXT", (void *)glwrap_glVertexPointerEXT},
{"glVertexAttribL1dEXT", (void *)glwrap_glVertexAttribL1dEXT},
{"glVertexAttribL2dEXT", (void *)glwrap_glVertexAttribL2dEXT},
{"glVertexAttribL3dEXT", (void *)glwrap_glVertexAttribL3dEXT},
{"glVertexAttribL4dEXT", (void *)glwrap_glVertexAttribL4dEXT},
{"glVertexAttribL1dvEXT", (void *)glwrap_glVertexAttribL1dvEXT},
{"glVertexAttribL2dvEXT", (void *)glwrap_glVertexAttribL2dvEXT},
{"glVertexAttribL3dvEXT", (void *)glwrap_glVertexAttribL3dvEXT},
{"glVertexAttribL4dvEXT", (void *)glwrap_glVertexAttribL4dvEXT},
{"glVertexAttribLPointerEXT", (void *)glwrap_glVertexAttribLPointerEXT},
{"glGetVertexAttribLdvEXT", (void *)glwrap_glGetVertexAttribLdvEXT},
{"glBeginVertexShaderEXT", (void *)glwrap_glBeginVertexShaderEXT},
{"glEndVertexShaderEXT", (void *)glwrap_glEndVertexShaderEXT},
{"glBindVertexShaderEXT", (void *)glwrap_glBindVertexShaderEXT},
{"glGenVertexShadersEXT", (void *)glwrap_glGenVertexShadersEXT},
{"glDeleteVertexShaderEXT", (void *)glwrap_glDeleteVertexShaderEXT},
{"glShaderOp1EXT", (void *)glwrap_glShaderOp1EXT},
{"glShaderOp2EXT", (void *)glwrap_glShaderOp2EXT},
{"glShaderOp3EXT", (void *)glwrap_glShaderOp3EXT},
{"glSwizzleEXT", (void *)glwrap_glSwizzleEXT},
{"glWriteMaskEXT", (void *)glwrap_glWriteMaskEXT},
{"glInsertComponentEXT", (void *)glwrap_glInsertComponentEXT},
{"glExtractComponentEXT", (void *)glwrap_glExtractComponentEXT},
{"glGenSymbolsEXT", (void *)glwrap_glGenSymbolsEXT},
{"glSetInvariantEXT", (void *)glwrap_glSetInvariantEXT},
{"glSetLocalConstantEXT", (void *)glwrap_glSetLocalConstantEXT},
{"glVariantbvEXT", (void *)glwrap_glVariantbvEXT},
{"glVariantsvEXT", (void *)glwrap_glVariantsvEXT},
{"glVariantivEXT", (void *)glwrap_glVariantivEXT},
{"glVariantfvEXT", (void *)glwrap_glVariantfvEXT},
{"glVariantdvEXT", (void *)glwrap_glVariantdvEXT},
{"glVariantubvEXT", (void *)glwrap_glVariantubvEXT},
{"glVariantusvEXT", (void *)glwrap_glVariantusvEXT},
{"glVariantuivEXT", (void *)glwrap_glVariantuivEXT},
{"glVariantPointerEXT", (void *)glwrap_glVariantPointerEXT},
{"glEnableVariantClientStateEXT", (void *)glwrap_glEnableVariantClientStateEXT},
{"glDisableVariantClientStateEXT", (void *)glwrap_glDisableVariantClientStateEXT},
{"glBindLightParameterEXT", (void *)glwrap_glBindLightParameterEXT},
{"glBindMaterialParameterEXT", (void *)glwrap_glBindMaterialParameterEXT},
{"glBindTexGenParameterEXT", (void *)glwrap_glBindTexGenParameterEXT},
{"glBindTextureUnitParameterEXT", (void *)glwrap_glBindTextureUnitParameterEXT},
{"glBindParameterEXT", (void *)glwrap_glBindParameterEXT},
{"glIsVariantEnabledEXT", (void *)glwrap_glIsVariantEnabledEXT},
{"glGetVariantBooleanvEXT", (void *)glwrap_glGetVariantBooleanvEXT},
{"glGetVariantIntegervEXT", (void *)glwrap_glGetVariantIntegervEXT},
{"glGetVariantFloatvEXT", (void *)glwrap_glGetVariantFloatvEXT},
{"glGetVariantPointervEXT", (void *)glwrap_glGetVariantPointervEXT},
{"glGetInvariantBooleanvEXT", (void *)glwrap_glGetInvariantBooleanvEXT},
{"glGetInvariantIntegervEXT", (void *)glwrap_glGetInvariantIntegervEXT},
{"glGetInvariantFloatvEXT", (void *)glwrap_glGetInvariantFloatvEXT},
{"glGetLocalConstantBooleanvEXT", (void *)glwrap_glGetLocalConstantBooleanvEXT},
{"glGetLocalConstantIntegervEXT", (void *)glwrap_glGetLocalConstantIntegervEXT},
{"glGetLocalConstantFloatvEXT", (void *)glwrap_glGetLocalConstantFloatvEXT},
{"glVertexWeightfEXT", (void *)glwrap_glVertexWeightfEXT},
{"glVertexWeightfvEXT", (void *)glwrap_glVertexWeightfvEXT},
{"glVertexWeightPointerEXT", (void *)glwrap_glVertexWeightPointerEXT},
{"glAcquireKeyedMutexWin32EXT", (void *)glwrap_glAcquireKeyedMutexWin32EXT},
{"glReleaseKeyedMutexWin32EXT", (void *)glwrap_glReleaseKeyedMutexWin32EXT},
{"glWindowRectanglesEXT", (void *)glwrap_glWindowRectanglesEXT},
{"glImportSyncEXT", (void *)glwrap_glImportSyncEXT},
{"glFrameTerminatorGREMEDY", (void *)glwrap_glFrameTerminatorGREMEDY},
{"glStringMarkerGREMEDY", (void *)glwrap_glStringMarkerGREMEDY},
{"glImageTransformParameteriHP", (void *)glwrap_glImageTransformParameteriHP},
{"glImageTransformParameterfHP", (void *)glwrap_glImageTransformParameterfHP},
{"glImageTransformParameterivHP", (void *)glwrap_glImageTransformParameterivHP},
{"glImageTransformParameterfvHP", (void *)glwrap_glImageTransformParameterfvHP},
{"glGetImageTransformParameterivHP", (void *)glwrap_glGetImageTransformParameterivHP},
{"glGetImageTransformParameterfvHP", (void *)glwrap_glGetImageTransformParameterfvHP},
{"glMultiModeDrawArraysIBM", (void *)glwrap_glMultiModeDrawArraysIBM},
{"glMultiModeDrawElementsIBM", (void *)glwrap_glMultiModeDrawElementsIBM},
{"glFlushStaticDataIBM", (void *)glwrap_glFlushStaticDataIBM},
{"glColorPointerListIBM", (void *)glwrap_glColorPointerListIBM},
{"glSecondaryColorPointerListIBM", (void *)glwrap_glSecondaryColorPointerListIBM},
{"glEdgeFlagPointerListIBM", (void *)glwrap_glEdgeFlagPointerListIBM},
{"glFogCoordPointerListIBM", (void *)glwrap_glFogCoordPointerListIBM},
{"glIndexPointerListIBM", (void *)glwrap_glIndexPointerListIBM},
{"glNormalPointerListIBM", (void *)glwrap_glNormalPointerListIBM},
{"glTexCoordPointerListIBM", (void *)glwrap_glTexCoordPointerListIBM},
{"glVertexPointerListIBM", (void *)glwrap_glVertexPointerListIBM},
{"glBlendFuncSeparateINGR", (void *)glwrap_glBlendFuncSeparateINGR},
{"glApplyFramebufferAttachmentCMAAINTEL", (void *)glwrap_glApplyFramebufferAttachmentCMAAINTEL},
{"glSyncTextureINTEL", (void *)glwrap_glSyncTextureINTEL},
{"glUnmapTexture2DINTEL", (void *)glwrap_glUnmapTexture2DINTEL},
{"glMapTexture2DINTEL", (void *)glwrap_glMapTexture2DINTEL},
{"glVertexPointervINTEL", (void *)glwrap_glVertexPointervINTEL},
{"glNormalPointervINTEL", (void *)glwrap_glNormalPointervINTEL},
{"glColorPointervINTEL", (void *)glwrap_glColorPointervINTEL},
{"glTexCoordPointervINTEL", (void *)glwrap_glTexCoordPointervINTEL},
{"glBeginPerfQueryINTEL", (void *)glwrap_glBeginPerfQueryINTEL},
{"glCreatePerfQueryINTEL", (void *)glwrap_glCreatePerfQueryINTEL},
{"glDeletePerfQueryINTEL", (void *)glwrap_glDeletePerfQueryINTEL},
{"glEndPerfQueryINTEL", (void *)glwrap_glEndPerfQueryINTEL},
{"glGetFirstPerfQueryIdINTEL", (void *)glwrap_glGetFirstPerfQueryIdINTEL},
{"glGetNextPerfQueryIdINTEL", (void *)glwrap_glGetNextPerfQueryIdINTEL},
{"glGetPerfCounterInfoINTEL", (void *)glwrap_glGetPerfCounterInfoINTEL},
{"glGetPerfQueryDataINTEL", (void *)glwrap_glGetPerfQueryDataINTEL},
{"glGetPerfQueryIdByNameINTEL", (void *)glwrap_glGetPerfQueryIdByNameINTEL},
{"glGetPerfQueryInfoINTEL", (void *)glwrap_glGetPerfQueryInfoINTEL},
{"glResizeBuffersMESA", (void *)glwrap_glResizeBuffersMESA},
{"glWindowPos2dMESA", (void *)glwrap_glWindowPos2dMESA},
{"glWindowPos2dvMESA", (void *)glwrap_glWindowPos2dvMESA},
{"glWindowPos2fMESA", (void *)glwrap_glWindowPos2fMESA},
{"glWindowPos2fvMESA", (void *)glwrap_glWindowPos2fvMESA},
{"glWindowPos2iMESA", (void *)glwrap_glWindowPos2iMESA},
{"glWindowPos2ivMESA", (void *)glwrap_glWindowPos2ivMESA},
{"glWindowPos2sMESA", (void *)glwrap_glWindowPos2sMESA},
{"glWindowPos2svMESA", (void *)glwrap_glWindowPos2svMESA},
{"glWindowPos3dMESA", (void *)glwrap_glWindowPos3dMESA},
{"glWindowPos3dvMESA", (void *)glwrap_glWindowPos3dvMESA},
{"glWindowPos3fMESA", (void *)glwrap_glWindowPos3fMESA},
{"glWindowPos3fvMESA", (void *)glwrap_glWindowPos3fvMESA},
{"glWindowPos3iMESA", (void *)glwrap_glWindowPos3iMESA},
{"glWindowPos3ivMESA", (void *)glwrap_glWindowPos3ivMESA},
{"glWindowPos3sMESA", (void *)glwrap_glWindowPos3sMESA},
{"glWindowPos3svMESA", (void *)glwrap_glWindowPos3svMESA},
{"glWindowPos4dMESA", (void *)glwrap_glWindowPos4dMESA},
{"glWindowPos4dvMESA", (void *)glwrap_glWindowPos4dvMESA},
{"glWindowPos4fMESA", (void *)glwrap_glWindowPos4fMESA},
{"glWindowPos4fvMESA", (void *)glwrap_glWindowPos4fvMESA},
{"glWindowPos4iMESA", (void *)glwrap_glWindowPos4iMESA},
{"glWindowPos4ivMESA", (void *)glwrap_glWindowPos4ivMESA},
{"glWindowPos4sMESA", (void *)glwrap_glWindowPos4sMESA},
{"glWindowPos4svMESA", (void *)glwrap_glWindowPos4svMESA},
{"glBeginConditionalRenderNVX", (void *)glwrap_glBeginConditionalRenderNVX},
{"glEndConditionalRenderNVX", (void *)glwrap_glEndConditionalRenderNVX},
{"glLGPUNamedBufferSubDataNVX", (void *)glwrap_glLGPUNamedBufferSubDataNVX},
{"glLGPUCopyImageSubDataNVX", (void *)glwrap_glLGPUCopyImageSubDataNVX},
{"glLGPUInterlockNVX", (void *)glwrap_glLGPUInterlockNVX},
{"glAlphaToCoverageDitherControlNV", (void *)glwrap_glAlphaToCoverageDitherControlNV},
{"glMultiDrawArraysIndirectBindlessNV", (void *)glwrap_glMultiDrawArraysIndirectBindlessNV},
{"glMultiDrawElementsIndirectBindlessNV", (void *)glwrap_glMultiDrawElementsIndirectBindlessNV},
{"glMultiDrawArraysIndirectBindlessCountNV", (void *)glwrap_glMultiDrawArraysIndirectBindlessCountNV},
{"glMultiDrawElementsIndirectBindlessCountNV", (void *)glwrap_glMultiDrawElementsIndirectBindlessCountNV},
{"glGetTextureHandleNV", (void *)glwrap_glGetTextureHandleNV},
{"glGetTextureSamplerHandleNV", (void *)glwrap_glGetTextureSamplerHandleNV},
{"glMakeTextureHandleResidentNV", (void *)glwrap_glMakeTextureHandleResidentNV},
{"glMakeTextureHandleNonResidentNV", (void *)glwrap_glMakeTextureHandleNonResidentNV},
{"glGetImageHandleNV", (void *)glwrap_glGetImageHandleNV},
{"glMakeImageHandleResidentNV", (void *)glwrap_glMakeImageHandleResidentNV},
{"glMakeImageHandleNonResidentNV", (void *)glwrap_glMakeImageHandleNonResidentNV},
{"glUniformHandleui64NV", (void *)glwrap_glUniformHandleui64NV},
{"glUniformHandleui64vNV", (void *)glwrap_glUniformHandleui64vNV},
{"glProgramUniformHandleui64NV", (void *)glwrap_glProgramUniformHandleui64NV},
{"glProgramUniformHandleui64vNV", (void *)glwrap_glProgramUniformHandleui64vNV},
{"glIsTextureHandleResidentNV", (void *)glwrap_glIsTextureHandleResidentNV},
{"glIsImageHandleResidentNV", (void *)glwrap_glIsImageHandleResidentNV},
{"glBlendParameteriNV", (void *)glwrap_glBlendParameteriNV},
{"glBlendBarrierNV", (void *)glwrap_glBlendBarrierNV},
{"glViewportPositionWScaleNV", (void *)glwrap_glViewportPositionWScaleNV},
{"glCreateStatesNV", (void *)glwrap_glCreateStatesNV},
{"glDeleteStatesNV", (void *)glwrap_glDeleteStatesNV},
{"glIsStateNV", (void *)glwrap_glIsStateNV},
{"glStateCaptureNV", (void *)glwrap_glStateCaptureNV},
{"glGetCommandHeaderNV", (void *)glwrap_glGetCommandHeaderNV},
{"glGetStageIndexNV", (void *)glwrap_glGetStageIndexNV},
{"glDrawCommandsNV", (void *)glwrap_glDrawCommandsNV},
{"glDrawCommandsAddressNV", (void *)glwrap_glDrawCommandsAddressNV},
{"glDrawCommandsStatesNV", (void *)glwrap_glDrawCommandsStatesNV},
{"glDrawCommandsStatesAddressNV", (void *)glwrap_glDrawCommandsStatesAddressNV},
{"glCreateCommandListsNV", (void *)glwrap_glCreateCommandListsNV},
{"glDeleteCommandListsNV", (void *)glwrap_glDeleteCommandListsNV},
{"glIsCommandListNV", (void *)glwrap_glIsCommandListNV},
{"glListDrawCommandsStatesClientNV", (void *)glwrap_glListDrawCommandsStatesClientNV},
{"glCommandListSegmentsNV", (void *)glwrap_glCommandListSegmentsNV},
{"glCompileCommandListNV", (void *)glwrap_glCompileCommandListNV},
{"glCallCommandListNV", (void *)glwrap_glCallCommandListNV},
{"glBeginConditionalRenderNV", (void *)glwrap_glBeginConditionalRenderNV},
{"glEndConditionalRenderNV", (void *)glwrap_glEndConditionalRenderNV},
{"glSubpixelPrecisionBiasNV", (void *)glwrap_glSubpixelPrecisionBiasNV},
{"glConservativeRasterParameterfNV", (void *)glwrap_glConservativeRasterParameterfNV},
{"glConservativeRasterParameteriNV", (void *)glwrap_glConservativeRasterParameteriNV},
{"glCopyImageSubDataNV", (void *)glwrap_glCopyImageSubDataNV},
{"glDepthRangedNV", (void *)glwrap_glDepthRangedNV},
{"glClearDepthdNV", (void *)glwrap_glClearDepthdNV},
{"glDepthBoundsdNV", (void *)glwrap_glDepthBoundsdNV},
{"glDrawTextureNV", (void *)glwrap_glDrawTextureNV},
{"glDrawVkImageNV", (void *)glwrap_glDrawVkImageNV},
{"glGetVkProcAddrNV", (void *)glwrap_glGetVkProcAddrNV},
{"glWaitVkSemaphoreNV", (void *)glwrap_glWaitVkSemaphoreNV},
{"glSignalVkSemaphoreNV", (void *)glwrap_glSignalVkSemaphoreNV},
{"glSignalVkFenceNV", (void *)glwrap_glSignalVkFenceNV},
{"glMapControlPointsNV", (void *)glwrap_glMapControlPointsNV},
{"glMapParameterivNV", (void *)glwrap_glMapParameterivNV},
{"glMapParameterfvNV", (void *)glwrap_glMapParameterfvNV},
{"glGetMapControlPointsNV", (void *)glwrap_glGetMapControlPointsNV},
{"glGetMapParameterivNV", (void *)glwrap_glGetMapParameterivNV},
{"glGetMapParameterfvNV", (void *)glwrap_glGetMapParameterfvNV},
{"glGetMapAttribParameterivNV", (void *)glwrap_glGetMapAttribParameterivNV},
{"glGetMapAttribParameterfvNV", (void *)glwrap_glGetMapAttribParameterfvNV},
{"glEvalMapsNV", (void *)glwrap_glEvalMapsNV},
{"glGetMultisamplefvNV", (void *)glwrap_glGetMultisamplefvNV},
{"glSampleMaskIndexedNV", (void *)glwrap_glSampleMaskIndexedNV},
{"glTexRenderbufferNV", (void *)glwrap_glTexRenderbufferNV},
{"glDeleteFencesNV", (void *)glwrap_glDeleteFencesNV},
{"glGenFencesNV", (void *)glwrap_glGenFencesNV},
{"glIsFenceNV", (void *)glwrap_glIsFenceNV},
{"glTestFenceNV", (void *)glwrap_glTestFenceNV},
{"glGetFenceivNV", (void *)glwrap_glGetFenceivNV},
{"glFinishFenceNV", (void *)glwrap_glFinishFenceNV},
{"glSetFenceNV", (void *)glwrap_glSetFenceNV},
{"glFragmentCoverageColorNV", (void *)glwrap_glFragmentCoverageColorNV},
{"glProgramNamedParameter4fNV", (void *)glwrap_glProgramNamedParameter4fNV},
{"glProgramNamedParameter4fvNV", (void *)glwrap_glProgramNamedParameter4fvNV},
{"glProgramNamedParameter4dNV", (void *)glwrap_glProgramNamedParameter4dNV},
{"glProgramNamedParameter4dvNV", (void *)glwrap_glProgramNamedParameter4dvNV},
{"glGetProgramNamedParameterfvNV", (void *)glwrap_glGetProgramNamedParameterfvNV},
{"glGetProgramNamedParameterdvNV", (void *)glwrap_glGetProgramNamedParameterdvNV},
{"glCoverageModulationTableNV", (void *)glwrap_glCoverageModulationTableNV},
{"glGetCoverageModulationTableNV", (void *)glwrap_glGetCoverageModulationTableNV},
{"glCoverageModulationNV", (void *)glwrap_glCoverageModulationNV},
{"glRenderbufferStorageMultisampleCoverageNV", (void *)glwrap_glRenderbufferStorageMultisampleCoverageNV},
{"glProgramVertexLimitNV", (void *)glwrap_glProgramVertexLimitNV},
{"glFramebufferTextureEXT", (void *)glwrap_glFramebufferTextureEXT},
{"glFramebufferTextureFaceEXT", (void *)glwrap_glFramebufferTextureFaceEXT},
{"glRenderGpuMaskNV", (void *)glwrap_glRenderGpuMaskNV},
{"glMulticastBufferSubDataNV", (void *)glwrap_glMulticastBufferSubDataNV},
{"glMulticastCopyBufferSubDataNV", (void *)glwrap_glMulticastCopyBufferSubDataNV},
{"glMulticastCopyImageSubDataNV", (void *)glwrap_glMulticastCopyImageSubDataNV},
{"glMulticastBlitFramebufferNV", (void *)glwrap_glMulticastBlitFramebufferNV},
{"glMulticastFramebufferSampleLocationsfvNV", (void *)glwrap_glMulticastFramebufferSampleLocationsfvNV},
{"glMulticastBarrierNV", (void *)glwrap_glMulticastBarrierNV},
{"glMulticastWaitSyncNV", (void *)glwrap_glMulticastWaitSyncNV},
{"glMulticastGetQueryObjectivNV", (void *)glwrap_glMulticastGetQueryObjectivNV},
{"glMulticastGetQueryObjectuivNV", (void *)glwrap_glMulticastGetQueryObjectuivNV},
{"glMulticastGetQueryObjecti64vNV", (void *)glwrap_glMulticastGetQueryObjecti64vNV},
{"glMulticastGetQueryObjectui64vNV", (void *)glwrap_glMulticastGetQueryObjectui64vNV},
{"glProgramLocalParameterI4iNV", (void *)glwrap_glProgramLocalParameterI4iNV},
{"glProgramLocalParameterI4ivNV", (void *)glwrap_glProgramLocalParameterI4ivNV},
{"glProgramLocalParametersI4ivNV", (void *)glwrap_glProgramLocalParametersI4ivNV},
{"glProgramLocalParameterI4uiNV", (void *)glwrap_glProgramLocalParameterI4uiNV},
{"glProgramLocalParameterI4uivNV", (void *)glwrap_glProgramLocalParameterI4uivNV},
{"glProgramLocalParametersI4uivNV", (void *)glwrap_glProgramLocalParametersI4uivNV},
{"glProgramEnvParameterI4iNV", (void *)glwrap_glProgramEnvParameterI4iNV},
{"glProgramEnvParameterI4ivNV", (void *)glwrap_glProgramEnvParameterI4ivNV},
{"glProgramEnvParametersI4ivNV", (void *)glwrap_glProgramEnvParametersI4ivNV},
{"glProgramEnvParameterI4uiNV", (void *)glwrap_glProgramEnvParameterI4uiNV},
{"glProgramEnvParameterI4uivNV", (void *)glwrap_glProgramEnvParameterI4uivNV},
{"glProgramEnvParametersI4uivNV", (void *)glwrap_glProgramEnvParametersI4uivNV},
{"glGetProgramLocalParameterIivNV", (void *)glwrap_glGetProgramLocalParameterIivNV},
{"glGetProgramLocalParameterIuivNV", (void *)glwrap_glGetProgramLocalParameterIuivNV},
{"glGetProgramEnvParameterIivNV", (void *)glwrap_glGetProgramEnvParameterIivNV},
{"glGetProgramEnvParameterIuivNV", (void *)glwrap_glGetProgramEnvParameterIuivNV},
{"glProgramSubroutineParametersuivNV", (void *)glwrap_glProgramSubroutineParametersuivNV},
{"glGetProgramSubroutineParameteruivNV", (void *)glwrap_glGetProgramSubroutineParameteruivNV},
{"glVertex2hNV", (void *)glwrap_glVertex2hNV},
{"glVertex2hvNV", (void *)glwrap_glVertex2hvNV},
{"glVertex3hNV", (void *)glwrap_glVertex3hNV},
{"glVertex3hvNV", (void *)glwrap_glVertex3hvNV},
{"glVertex4hNV", (void *)glwrap_glVertex4hNV},
{"glVertex4hvNV", (void *)glwrap_glVertex4hvNV},
{"glNormal3hNV", (void *)glwrap_glNormal3hNV},
{"glNormal3hvNV", (void *)glwrap_glNormal3hvNV},
{"glColor3hNV", (void *)glwrap_glColor3hNV},
{"glColor3hvNV", (void *)glwrap_glColor3hvNV},
{"glColor4hNV", (void *)glwrap_glColor4hNV},
{"glColor4hvNV", (void *)glwrap_glColor4hvNV},
{"glTexCoord1hNV", (void *)glwrap_glTexCoord1hNV},
{"glTexCoord1hvNV", (void *)glwrap_glTexCoord1hvNV},
{"glTexCoord2hNV", (void *)glwrap_glTexCoord2hNV},
{"glTexCoord2hvNV", (void *)glwrap_glTexCoord2hvNV},
{"glTexCoord3hNV", (void *)glwrap_glTexCoord3hNV},
{"glTexCoord3hvNV", (void *)glwrap_glTexCoord3hvNV},
{"glTexCoord4hNV", (void *)glwrap_glTexCoord4hNV},
{"glTexCoord4hvNV", (void *)glwrap_glTexCoord4hvNV},
{"glMultiTexCoord1hNV", (void *)glwrap_glMultiTexCoord1hNV},
{"glMultiTexCoord1hvNV", (void *)glwrap_glMultiTexCoord1hvNV},
{"glMultiTexCoord2hNV", (void *)glwrap_glMultiTexCoord2hNV},
{"glMultiTexCoord2hvNV", (void *)glwrap_glMultiTexCoord2hvNV},
{"glMultiTexCoord3hNV", (void *)glwrap_glMultiTexCoord3hNV},
{"glMultiTexCoord3hvNV", (void *)glwrap_glMultiTexCoord3hvNV},
{"glMultiTexCoord4hNV", (void *)glwrap_glMultiTexCoord4hNV},
{"glMultiTexCoord4hvNV", (void *)glwrap_glMultiTexCoord4hvNV},
{"glFogCoordhNV", (void *)glwrap_glFogCoordhNV},
{"glFogCoordhvNV", (void *)glwrap_glFogCoordhvNV},
{"glSecondaryColor3hNV", (void *)glwrap_glSecondaryColor3hNV},
{"glSecondaryColor3hvNV", (void *)glwrap_glSecondaryColor3hvNV},
{"glVertexWeighthNV", (void *)glwrap_glVertexWeighthNV},
{"glVertexWeighthvNV", (void *)glwrap_glVertexWeighthvNV},
{"glVertexAttrib1hNV", (void *)glwrap_glVertexAttrib1hNV},
{"glVertexAttrib1hvNV", (void *)glwrap_glVertexAttrib1hvNV},
{"glVertexAttrib2hNV", (void *)glwrap_glVertexAttrib2hNV},
{"glVertexAttrib2hvNV", (void *)glwrap_glVertexAttrib2hvNV},
{"glVertexAttrib3hNV", (void *)glwrap_glVertexAttrib3hNV},
{"glVertexAttrib3hvNV", (void *)glwrap_glVertexAttrib3hvNV},
{"glVertexAttrib4hNV", (void *)glwrap_glVertexAttrib4hNV},
{"glVertexAttrib4hvNV", (void *)glwrap_glVertexAttrib4hvNV},
{"glVertexAttribs1hvNV", (void *)glwrap_glVertexAttribs1hvNV},
{"glVertexAttribs2hvNV", (void *)glwrap_glVertexAttribs2hvNV},
{"glVertexAttribs3hvNV", (void *)glwrap_glVertexAttribs3hvNV},
{"glVertexAttribs4hvNV", (void *)glwrap_glVertexAttribs4hvNV},
{"glGetInternalformatSampleivNV", (void *)glwrap_glGetInternalformatSampleivNV},
{"glGetMemoryObjectDetachedResourcesuivNV", (void *)glwrap_glGetMemoryObjectDetachedResourcesuivNV},
{"glResetMemoryObjectParameterNV", (void *)glwrap_glResetMemoryObjectParameterNV},
{"glTexAttachMemoryNV", (void *)glwrap_glTexAttachMemoryNV},
{"glBufferAttachMemoryNV", (void *)glwrap_glBufferAttachMemoryNV},
{"glTextureAttachMemoryNV", (void *)glwrap_glTextureAttachMemoryNV},
{"glNamedBufferAttachMemoryNV", (void *)glwrap_glNamedBufferAttachMemoryNV},
{"glDrawMeshTasksNV", (void *)glwrap_glDrawMeshTasksNV},
{"glDrawMeshTasksIndirectNV", (void *)glwrap_glDrawMeshTasksIndirectNV},
{"glMultiDrawMeshTasksIndirectNV", (void *)glwrap_glMultiDrawMeshTasksIndirectNV},
{"glMultiDrawMeshTasksIndirectCountNV", (void *)glwrap_glMultiDrawMeshTasksIndirectCountNV},
{"glGenOcclusionQueriesNV", (void *)glwrap_glGenOcclusionQueriesNV},
{"glDeleteOcclusionQueriesNV", (void *)glwrap_glDeleteOcclusionQueriesNV},
{"glIsOcclusionQueryNV", (void *)glwrap_glIsOcclusionQueryNV},
{"glBeginOcclusionQueryNV", (void *)glwrap_glBeginOcclusionQueryNV},
{"glEndOcclusionQueryNV", (void *)glwrap_glEndOcclusionQueryNV},
{"glGetOcclusionQueryivNV", (void *)glwrap_glGetOcclusionQueryivNV},
{"glGetOcclusionQueryuivNV", (void *)glwrap_glGetOcclusionQueryuivNV},
{"glProgramBufferParametersfvNV", (void *)glwrap_glProgramBufferParametersfvNV},
{"glProgramBufferParametersIivNV", (void *)glwrap_glProgramBufferParametersIivNV},
{"glProgramBufferParametersIuivNV", (void *)glwrap_glProgramBufferParametersIuivNV},
{"glGenPathsNV", (void *)glwrap_glGenPathsNV},
{"glDeletePathsNV", (void *)glwrap_glDeletePathsNV},
{"glIsPathNV", (void *)glwrap_glIsPathNV},
{"glPathCommandsNV", (void *)glwrap_glPathCommandsNV},
{"glPathCoordsNV", (void *)glwrap_glPathCoordsNV},
{"glPathSubCommandsNV", (void *)glwrap_glPathSubCommandsNV},
{"glPathSubCoordsNV", (void *)glwrap_glPathSubCoordsNV},
{"glPathStringNV", (void *)glwrap_glPathStringNV},
{"glPathGlyphsNV", (void *)glwrap_glPathGlyphsNV},
{"glPathGlyphRangeNV", (void *)glwrap_glPathGlyphRangeNV},
{"glWeightPathsNV", (void *)glwrap_glWeightPathsNV},
{"glCopyPathNV", (void *)glwrap_glCopyPathNV},
{"glInterpolatePathsNV", (void *)glwrap_glInterpolatePathsNV},
{"glTransformPathNV", (void *)glwrap_glTransformPathNV},
{"glPathParameterivNV", (void *)glwrap_glPathParameterivNV},
{"glPathParameteriNV", (void *)glwrap_glPathParameteriNV},
{"glPathParameterfvNV", (void *)glwrap_glPathParameterfvNV},
{"glPathParameterfNV", (void *)glwrap_glPathParameterfNV},
{"glPathDashArrayNV", (void *)glwrap_glPathDashArrayNV},
{"glPathStencilFuncNV", (void *)glwrap_glPathStencilFuncNV},
{"glPathStencilDepthOffsetNV", (void *)glwrap_glPathStencilDepthOffsetNV},
{"glStencilFillPathNV", (void *)glwrap_glStencilFillPathNV},
{"glStencilStrokePathNV", (void *)glwrap_glStencilStrokePathNV},
{"glStencilFillPathInstancedNV", (void *)glwrap_glStencilFillPathInstancedNV},
{"glStencilStrokePathInstancedNV", (void *)glwrap_glStencilStrokePathInstancedNV},
{"glPathCoverDepthFuncNV", (void *)glwrap_glPathCoverDepthFuncNV},
{"glCoverFillPathNV", (void *)glwrap_glCoverFillPathNV},
{"glCoverStrokePathNV", (void *)glwrap_glCoverStrokePathNV},
{"glCoverFillPathInstancedNV", (void *)glwrap_glCoverFillPathInstancedNV},
{"glCoverStrokePathInstancedNV", (void *)glwrap_glCoverStrokePathInstancedNV},
{"glGetPathParameterivNV", (void *)glwrap_glGetPathParameterivNV},
{"glGetPathParameterfvNV", (void *)glwrap_glGetPathParameterfvNV},
{"glGetPathCommandsNV", (void *)glwrap_glGetPathCommandsNV},
{"glGetPathCoordsNV", (void *)glwrap_glGetPathCoordsNV},
{"glGetPathDashArrayNV", (void *)glwrap_glGetPathDashArrayNV},
{"glGetPathMetricsNV", (void *)glwrap_glGetPathMetricsNV},
{"glGetPathMetricRangeNV", (void *)glwrap_glGetPathMetricRangeNV},
{"glGetPathSpacingNV", (void *)glwrap_glGetPathSpacingNV},
{"glIsPointInFillPathNV", (void *)glwrap_glIsPointInFillPathNV},
{"glIsPointInStrokePathNV", (void *)glwrap_glIsPointInStrokePathNV},
{"glGetPathLengthNV", (void *)glwrap_glGetPathLengthNV},
{"glPointAlongPathNV", (void *)glwrap_glPointAlongPathNV},
{"glMatrixLoad3x2fNV", (void *)glwrap_glMatrixLoad3x2fNV},
{"glMatrixLoad3x3fNV", (void *)glwrap_glMatrixLoad3x3fNV},
{"glMatrixLoadTranspose3x3fNV", (void *)glwrap_glMatrixLoadTranspose3x3fNV},
{"glMatrixMult3x2fNV", (void *)glwrap_glMatrixMult3x2fNV},
{"glMatrixMult3x3fNV", (void *)glwrap_glMatrixMult3x3fNV},
{"glMatrixMultTranspose3x3fNV", (void *)glwrap_glMatrixMultTranspose3x3fNV},
{"glStencilThenCoverFillPathNV", (void *)glwrap_glStencilThenCoverFillPathNV},
{"glStencilThenCoverStrokePathNV", (void *)glwrap_glStencilThenCoverStrokePathNV},
{"glStencilThenCoverFillPathInstancedNV", (void *)glwrap_glStencilThenCoverFillPathInstancedNV},
{"glStencilThenCoverStrokePathInstancedNV", (void *)glwrap_glStencilThenCoverStrokePathInstancedNV},
{"glPathGlyphIndexRangeNV", (void *)glwrap_glPathGlyphIndexRangeNV},
{"glPathGlyphIndexArrayNV", (void *)glwrap_glPathGlyphIndexArrayNV},
{"glPathMemoryGlyphIndexArrayNV", (void *)glwrap_glPathMemoryGlyphIndexArrayNV},
{"glProgramPathFragmentInputGenNV", (void *)glwrap_glProgramPathFragmentInputGenNV},
{"glGetProgramResourcefvNV", (void *)glwrap_glGetProgramResourcefvNV},
{"glPathColorGenNV", (void *)glwrap_glPathColorGenNV},
{"glPathTexGenNV", (void *)glwrap_glPathTexGenNV},
{"glPathFogGenNV", (void *)glwrap_glPathFogGenNV},
{"glGetPathColorGenivNV", (void *)glwrap_glGetPathColorGenivNV},
{"glGetPathColorGenfvNV", (void *)glwrap_glGetPathColorGenfvNV},
{"glGetPathTexGenivNV", (void *)glwrap_glGetPathTexGenivNV},
{"glGetPathTexGenfvNV", (void *)glwrap_glGetPathTexGenfvNV},
{"glPixelDataRangeNV", (void *)glwrap_glPixelDataRangeNV},
{"glFlushPixelDataRangeNV", (void *)glwrap_glFlushPixelDataRangeNV},
{"glPointParameteriNV", (void *)glwrap_glPointParameteriNV},
{"glPointParameterivNV", (void *)glwrap_glPointParameterivNV},
{"glPresentFrameKeyedNV", (void *)glwrap_glPresentFrameKeyedNV},
{"glPresentFrameDualFillNV", (void *)glwrap_glPresentFrameDualFillNV},
{"glGetVideoivNV", (void *)glwrap_glGetVideoivNV},
{"glGetVideouivNV", (void *)glwrap_glGetVideouivNV},
{"glGetVideoi64vNV", (void *)glwrap_glGetVideoi64vNV},
{"glGetVideoui64vNV", (void *)glwrap_glGetVideoui64vNV},
{"glPrimitiveRestartNV", (void *)glwrap_glPrimitiveRestartNV},
{"glPrimitiveRestartIndexNV", (void *)glwrap_glPrimitiveRestartIndexNV},
{"glQueryResourceNV", (void *)glwrap_glQueryResourceNV},
{"glGenQueryResourceTagNV", (void *)glwrap_glGenQueryResourceTagNV},
{"glDeleteQueryResourceTagNV", (void *)glwrap_glDeleteQueryResourceTagNV},
{"glQueryResourceTagNV", (void *)glwrap_glQueryResourceTagNV},
{"glCombinerParameterfvNV", (void *)glwrap_glCombinerParameterfvNV},
{"glCombinerParameterfNV", (void *)glwrap_glCombinerParameterfNV},
{"glCombinerParameterivNV", (void *)glwrap_glCombinerParameterivNV},
{"glCombinerParameteriNV", (void *)glwrap_glCombinerParameteriNV},
{"glCombinerInputNV", (void *)glwrap_glCombinerInputNV},
{"glCombinerOutputNV", (void *)glwrap_glCombinerOutputNV},
{"glFinalCombinerInputNV", (void *)glwrap_glFinalCombinerInputNV},
{"glGetCombinerInputParameterfvNV", (void *)glwrap_glGetCombinerInputParameterfvNV},
{"glGetCombinerInputParameterivNV", (void *)glwrap_glGetCombinerInputParameterivNV},
{"glGetCombinerOutputParameterfvNV", (void *)glwrap_glGetCombinerOutputParameterfvNV},
{"glGetCombinerOutputParameterivNV", (void *)glwrap_glGetCombinerOutputParameterivNV},
{"glGetFinalCombinerInputParameterfvNV", (void *)glwrap_glGetFinalCombinerInputParameterfvNV},
{"glGetFinalCombinerInputParameterivNV", (void *)glwrap_glGetFinalCombinerInputParameterivNV},
{"glCombinerStageParameterfvNV", (void *)glwrap_glCombinerStageParameterfvNV},
{"glGetCombinerStageParameterfvNV", (void *)glwrap_glGetCombinerStageParameterfvNV},
{"glFramebufferSampleLocationsfvNV", (void *)glwrap_glFramebufferSampleLocationsfvNV},
{"glNamedFramebufferSampleLocationsfvNV", (void *)glwrap_glNamedFramebufferSampleLocationsfvNV},
{"glResolveDepthValuesNV", (void *)glwrap_glResolveDepthValuesNV},
{"glScissorExclusiveNV", (void *)glwrap_glScissorExclusiveNV},
{"glScissorExclusiveArrayvNV", (void *)glwrap_glScissorExclusiveArrayvNV},
{"glMakeBufferResidentNV", (void *)glwrap_glMakeBufferResidentNV},
{"glMakeBufferNonResidentNV", (void *)glwrap_glMakeBufferNonResidentNV},
{"glIsBufferResidentNV", (void *)glwrap_glIsBufferResidentNV},
{"glMakeNamedBufferResidentNV", (void *)glwrap_glMakeNamedBufferResidentNV},
{"glMakeNamedBufferNonResidentNV", (void *)glwrap_glMakeNamedBufferNonResidentNV},
{"glIsNamedBufferResidentNV", (void *)glwrap_glIsNamedBufferResidentNV},
{"glGetBufferParameterui64vNV", (void *)glwrap_glGetBufferParameterui64vNV},
{"glGetNamedBufferParameterui64vNV", (void *)glwrap_glGetNamedBufferParameterui64vNV},
{"glGetIntegerui64vNV", (void *)glwrap_glGetIntegerui64vNV},
{"glUniformui64NV", (void *)glwrap_glUniformui64NV},
{"glUniformui64vNV", (void *)glwrap_glUniformui64vNV},
{"glProgramUniformui64NV", (void *)glwrap_glProgramUniformui64NV},
{"glProgramUniformui64vNV", (void *)glwrap_glProgramUniformui64vNV},
{"glBindShadingRateImageNV", (void *)glwrap_glBindShadingRateImageNV},
{"glGetShadingRateImagePaletteNV", (void *)glwrap_glGetShadingRateImagePaletteNV},
{"glGetShadingRateSampleLocationivNV", (void *)glwrap_glGetShadingRateSampleLocationivNV},
{"glShadingRateImageBarrierNV", (void *)glwrap_glShadingRateImageBarrierNV},
{"glShadingRateImagePaletteNV", (void *)glwrap_glShadingRateImagePaletteNV},
{"glShadingRateSampleOrderNV", (void *)glwrap_glShadingRateSampleOrderNV},
{"glShadingRateSampleOrderCustomNV", (void *)glwrap_glShadingRateSampleOrderCustomNV},
{"glTextureBarrierNV", (void *)glwrap_glTextureBarrierNV},
{"glTexImage2DMultisampleCoverageNV", (void *)glwrap_glTexImage2DMultisampleCoverageNV},
{"glTexImage3DMultisampleCoverageNV", (void *)glwrap_glTexImage3DMultisampleCoverageNV},
{"glTextureImage2DMultisampleNV", (void *)glwrap_glTextureImage2DMultisampleNV},
{"glTextureImage3DMultisampleNV", (void *)glwrap_glTextureImage3DMultisampleNV},
{"glTextureImage2DMultisampleCoverageNV", (void *)glwrap_glTextureImage2DMultisampleCoverageNV},
{"glTextureImage3DMultisampleCoverageNV", (void *)glwrap_glTextureImage3DMultisampleCoverageNV},
{"glBeginTransformFeedbackNV", (void *)glwrap_glBeginTransformFeedbackNV},
{"glEndTransformFeedbackNV", (void *)glwrap_glEndTransformFeedbackNV},
{"glTransformFeedbackAttribsNV", (void *)glwrap_glTransformFeedbackAttribsNV},
{"glBindBufferRangeNV", (void *)glwrap_glBindBufferRangeNV},
{"glBindBufferOffsetNV", (void *)glwrap_glBindBufferOffsetNV},
{"glBindBufferBaseNV", (void *)glwrap_glBindBufferBaseNV},
{"glTransformFeedbackVaryingsNV", (void *)glwrap_glTransformFeedbackVaryingsNV},
{"glActiveVaryingNV", (void *)glwrap_glActiveVaryingNV},
{"glGetVaryingLocationNV", (void *)glwrap_glGetVaryingLocationNV},
{"glGetActiveVaryingNV", (void *)glwrap_glGetActiveVaryingNV},
{"glGetTransformFeedbackVaryingNV", (void *)glwrap_glGetTransformFeedbackVaryingNV},
{"glTransformFeedbackStreamAttribsNV", (void *)glwrap_glTransformFeedbackStreamAttribsNV},
{"glBindTransformFeedbackNV", (void *)glwrap_glBindTransformFeedbackNV},
{"glDeleteTransformFeedbacksNV", (void *)glwrap_glDeleteTransformFeedbacksNV},
{"glGenTransformFeedbacksNV", (void *)glwrap_glGenTransformFeedbacksNV},
{"glIsTransformFeedbackNV", (void *)glwrap_glIsTransformFeedbackNV},
{"glPauseTransformFeedbackNV", (void *)glwrap_glPauseTransformFeedbackNV},
{"glResumeTransformFeedbackNV", (void *)glwrap_glResumeTransformFeedbackNV},
{"glDrawTransformFeedbackNV", (void *)glwrap_glDrawTransformFeedbackNV},
{"glVDPAUInitNV", (void *)glwrap_glVDPAUInitNV},
{"glVDPAUFiniNV", (void *)glwrap_glVDPAUFiniNV},
{"glVDPAURegisterVideoSurfaceNV", (void *)glwrap_glVDPAURegisterVideoSurfaceNV},
{"glVDPAURegisterOutputSurfaceNV", (void *)glwrap_glVDPAURegisterOutputSurfaceNV},
{"glVDPAUIsSurfaceNV", (void *)glwrap_glVDPAUIsSurfaceNV},
{"glVDPAUUnregisterSurfaceNV", (void *)glwrap_glVDPAUUnregisterSurfaceNV},
{"glVDPAUGetSurfaceivNV", (void *)glwrap_glVDPAUGetSurfaceivNV},
{"glVDPAUSurfaceAccessNV", (void *)glwrap_glVDPAUSurfaceAccessNV},
{"glVDPAUMapSurfacesNV", (void *)glwrap_glVDPAUMapSurfacesNV},
{"glVDPAUUnmapSurfacesNV", (void *)glwrap_glVDPAUUnmapSurfacesNV},
{"glVDPAURegisterVideoSurfaceWithPictureStructureNV", (void *)glwrap_glVDPAURegisterVideoSurfaceWithPictureStructureNV},
{"glFlushVertexArrayRangeNV", (void *)glwrap_glFlushVertexArrayRangeNV},
{"glVertexArrayRangeNV", (void *)glwrap_glVertexArrayRangeNV},
{"glVertexAttribL1i64NV", (void *)glwrap_glVertexAttribL1i64NV},
{"glVertexAttribL2i64NV", (void *)glwrap_glVertexAttribL2i64NV},
{"glVertexAttribL3i64NV", (void *)glwrap_glVertexAttribL3i64NV},
{"glVertexAttribL4i64NV", (void *)glwrap_glVertexAttribL4i64NV},
{"glVertexAttribL1i64vNV", (void *)glwrap_glVertexAttribL1i64vNV},
{"glVertexAttribL2i64vNV", (void *)glwrap_glVertexAttribL2i64vNV},
{"glVertexAttribL3i64vNV", (void *)glwrap_glVertexAttribL3i64vNV},
{"glVertexAttribL4i64vNV", (void *)glwrap_glVertexAttribL4i64vNV},
{"glVertexAttribL1ui64NV", (void *)glwrap_glVertexAttribL1ui64NV},
{"glVertexAttribL2ui64NV", (void *)glwrap_glVertexAttribL2ui64NV},
{"glVertexAttribL3ui64NV", (void *)glwrap_glVertexAttribL3ui64NV},
{"glVertexAttribL4ui64NV", (void *)glwrap_glVertexAttribL4ui64NV},
{"glVertexAttribL1ui64vNV", (void *)glwrap_glVertexAttribL1ui64vNV},
{"glVertexAttribL2ui64vNV", (void *)glwrap_glVertexAttribL2ui64vNV},
{"glVertexAttribL3ui64vNV", (void *)glwrap_glVertexAttribL3ui64vNV},
{"glVertexAttribL4ui64vNV", (void *)glwrap_glVertexAttribL4ui64vNV},
{"glGetVertexAttribLi64vNV", (void *)glwrap_glGetVertexAttribLi64vNV},
{"glGetVertexAttribLui64vNV", (void *)glwrap_glGetVertexAttribLui64vNV},
{"glVertexAttribLFormatNV", (void *)glwrap_glVertexAttribLFormatNV},
{"glBufferAddressRangeNV", (void *)glwrap_glBufferAddressRangeNV},
{"glVertexFormatNV", (void *)glwrap_glVertexFormatNV},
{"glNormalFormatNV", (void *)glwrap_glNormalFormatNV},
{"glColorFormatNV", (void *)glwrap_glColorFormatNV},
{"glIndexFormatNV", (void *)glwrap_glIndexFormatNV},
{"glTexCoordFormatNV", (void *)glwrap_glTexCoordFormatNV},
{"glEdgeFlagFormatNV", (void *)glwrap_glEdgeFlagFormatNV},
{"glSecondaryColorFormatNV", (void *)glwrap_glSecondaryColorFormatNV},
{"glFogCoordFormatNV", (void *)glwrap_glFogCoordFormatNV},
{"glVertexAttribFormatNV", (void *)glwrap_glVertexAttribFormatNV},
{"glVertexAttribIFormatNV", (void *)glwrap_glVertexAttribIFormatNV},
{"glGetIntegerui64i_vNV", (void *)glwrap_glGetIntegerui64i_vNV},
{"glAreProgramsResidentNV", (void *)glwrap_glAreProgramsResidentNV},
{"glBindProgramNV", (void *)glwrap_glBindProgramNV},
{"glDeleteProgramsNV", (void *)glwrap_glDeleteProgramsNV},
{"glExecuteProgramNV", (void *)glwrap_glExecuteProgramNV},
{"glGenProgramsNV", (void *)glwrap_glGenProgramsNV},
{"glGetProgramParameterdvNV", (void *)glwrap_glGetProgramParameterdvNV},
{"glGetProgramParameterfvNV", (void *)glwrap_glGetProgramParameterfvNV},
{"glGetProgramivNV", (void *)glwrap_glGetProgramivNV},
{"glGetProgramStringNV", (void *)glwrap_glGetProgramStringNV},
{"glGetTrackMatrixivNV", (void *)glwrap_glGetTrackMatrixivNV},
{"glGetVertexAttribdvNV", (void *)glwrap_glGetVertexAttribdvNV},
{"glGetVertexAttribfvNV", (void *)glwrap_glGetVertexAttribfvNV},
{"glGetVertexAttribivNV", (void *)glwrap_glGetVertexAttribivNV},
{"glGetVertexAttribPointervNV", (void *)glwrap_glGetVertexAttribPointervNV},
{"glIsProgramNV", (void *)glwrap_glIsProgramNV},
{"glLoadProgramNV", (void *)glwrap_glLoadProgramNV},
{"glProgramParameter4dNV", (void *)glwrap_glProgramParameter4dNV},
{"glProgramParameter4dvNV", (void *)glwrap_glProgramParameter4dvNV},
{"glProgramParameter4fNV", (void *)glwrap_glProgramParameter4fNV},
{"glProgramParameter4fvNV", (void *)glwrap_glProgramParameter4fvNV},
{"glProgramParameters4dvNV", (void *)glwrap_glProgramParameters4dvNV},
{"glProgramParameters4fvNV", (void *)glwrap_glProgramParameters4fvNV},
{"glRequestResidentProgramsNV", (void *)glwrap_glRequestResidentProgramsNV},
{"glTrackMatrixNV", (void *)glwrap_glTrackMatrixNV},
{"glVertexAttribPointerNV", (void *)glwrap_glVertexAttribPointerNV},
{"glVertexAttrib1dNV", (void *)glwrap_glVertexAttrib1dNV},
{"glVertexAttrib1dvNV", (void *)glwrap_glVertexAttrib1dvNV},
{"glVertexAttrib1fNV", (void *)glwrap_glVertexAttrib1fNV},
{"glVertexAttrib1fvNV", (void *)glwrap_glVertexAttrib1fvNV},
{"glVertexAttrib1sNV", (void *)glwrap_glVertexAttrib1sNV},
{"glVertexAttrib1svNV", (void *)glwrap_glVertexAttrib1svNV},
{"glVertexAttrib2dNV", (void *)glwrap_glVertexAttrib2dNV},
{"glVertexAttrib2dvNV", (void *)glwrap_glVertexAttrib2dvNV},
{"glVertexAttrib2fNV", (void *)glwrap_glVertexAttrib2fNV},
{"glVertexAttrib2fvNV", (void *)glwrap_glVertexAttrib2fvNV},
{"glVertexAttrib2sNV", (void *)glwrap_glVertexAttrib2sNV},
{"glVertexAttrib2svNV", (void *)glwrap_glVertexAttrib2svNV},
{"glVertexAttrib3dNV", (void *)glwrap_glVertexAttrib3dNV},
{"glVertexAttrib3dvNV", (void *)glwrap_glVertexAttrib3dvNV},
{"glVertexAttrib3fNV", (void *)glwrap_glVertexAttrib3fNV},
{"glVertexAttrib3fvNV", (void *)glwrap_glVertexAttrib3fvNV},
{"glVertexAttrib3sNV", (void *)glwrap_glVertexAttrib3sNV},
{"glVertexAttrib3svNV", (void *)glwrap_glVertexAttrib3svNV},
{"glVertexAttrib4dNV", (void *)glwrap_glVertexAttrib4dNV},
{"glVertexAttrib4dvNV", (void *)glwrap_glVertexAttrib4dvNV},
{"glVertexAttrib4fNV", (void *)glwrap_glVertexAttrib4fNV},
{"glVertexAttrib4fvNV", (void *)glwrap_glVertexAttrib4fvNV},
{"glVertexAttrib4sNV", (void *)glwrap_glVertexAttrib4sNV},
{"glVertexAttrib4svNV", (void *)glwrap_glVertexAttrib4svNV},
{"glVertexAttrib4ubNV", (void *)glwrap_glVertexAttrib4ubNV},
{"glVertexAttrib4ubvNV", (void *)glwrap_glVertexAttrib4ubvNV},
{"glVertexAttribs1dvNV", (void *)glwrap_glVertexAttribs1dvNV},
{"glVertexAttribs1fvNV", (void *)glwrap_glVertexAttribs1fvNV},
{"glVertexAttribs1svNV", (void *)glwrap_glVertexAttribs1svNV},
{"glVertexAttribs2dvNV", (void *)glwrap_glVertexAttribs2dvNV},
{"glVertexAttribs2fvNV", (void *)glwrap_glVertexAttribs2fvNV},
{"glVertexAttribs2svNV", (void *)glwrap_glVertexAttribs2svNV},
{"glVertexAttribs3dvNV", (void *)glwrap_glVertexAttribs3dvNV},
{"glVertexAttribs3fvNV", (void *)glwrap_glVertexAttribs3fvNV},
{"glVertexAttribs3svNV", (void *)glwrap_glVertexAttribs3svNV},
{"glVertexAttribs4dvNV", (void *)glwrap_glVertexAttribs4dvNV},
{"glVertexAttribs4fvNV", (void *)glwrap_glVertexAttribs4fvNV},
{"glVertexAttribs4svNV", (void *)glwrap_glVertexAttribs4svNV},
{"glVertexAttribs4ubvNV", (void *)glwrap_glVertexAttribs4ubvNV},
{"glVertexAttribI1iEXT", (void *)glwrap_glVertexAttribI1iEXT},
{"glVertexAttribI2iEXT", (void *)glwrap_glVertexAttribI2iEXT},
{"glVertexAttribI3iEXT", (void *)glwrap_glVertexAttribI3iEXT},
{"glVertexAttribI4iEXT", (void *)glwrap_glVertexAttribI4iEXT},
{"glVertexAttribI1uiEXT", (void *)glwrap_glVertexAttribI1uiEXT},
{"glVertexAttribI2uiEXT", (void *)glwrap_glVertexAttribI2uiEXT},
{"glVertexAttribI3uiEXT", (void *)glwrap_glVertexAttribI3uiEXT},
{"glVertexAttribI4uiEXT", (void *)glwrap_glVertexAttribI4uiEXT},
{"glVertexAttribI1ivEXT", (void *)glwrap_glVertexAttribI1ivEXT},
{"glVertexAttribI2ivEXT", (void *)glwrap_glVertexAttribI2ivEXT},
{"glVertexAttribI3ivEXT", (void *)glwrap_glVertexAttribI3ivEXT},
{"glVertexAttribI4ivEXT", (void *)glwrap_glVertexAttribI4ivEXT},
{"glVertexAttribI1uivEXT", (void *)glwrap_glVertexAttribI1uivEXT},
{"glVertexAttribI2uivEXT", (void *)glwrap_glVertexAttribI2uivEXT},
{"glVertexAttribI3uivEXT", (void *)glwrap_glVertexAttribI3uivEXT},
{"glVertexAttribI4uivEXT", (void *)glwrap_glVertexAttribI4uivEXT},
{"glVertexAttribI4bvEXT", (void *)glwrap_glVertexAttribI4bvEXT},
{"glVertexAttribI4svEXT", (void *)glwrap_glVertexAttribI4svEXT},
{"glVertexAttribI4ubvEXT", (void *)glwrap_glVertexAttribI4ubvEXT},
{"glVertexAttribI4usvEXT", (void *)glwrap_glVertexAttribI4usvEXT},
{"glVertexAttribIPointerEXT", (void *)glwrap_glVertexAttribIPointerEXT},
{"glGetVertexAttribIivEXT", (void *)glwrap_glGetVertexAttribIivEXT},
{"glGetVertexAttribIuivEXT", (void *)glwrap_glGetVertexAttribIuivEXT},
{"glBeginVideoCaptureNV", (void *)glwrap_glBeginVideoCaptureNV},
{"glBindVideoCaptureStreamBufferNV", (void *)glwrap_glBindVideoCaptureStreamBufferNV},
{"glBindVideoCaptureStreamTextureNV", (void *)glwrap_glBindVideoCaptureStreamTextureNV},
{"glEndVideoCaptureNV", (void *)glwrap_glEndVideoCaptureNV},
{"glGetVideoCaptureivNV", (void *)glwrap_glGetVideoCaptureivNV},
{"glGetVideoCaptureStreamivNV", (void *)glwrap_glGetVideoCaptureStreamivNV},
{"glGetVideoCaptureStreamfvNV", (void *)glwrap_glGetVideoCaptureStreamfvNV},
{"glGetVideoCaptureStreamdvNV", (void *)glwrap_glGetVideoCaptureStreamdvNV},
{"glVideoCaptureNV", (void *)glwrap_glVideoCaptureNV},
{"glVideoCaptureStreamParameterivNV", (void *)glwrap_glVideoCaptureStreamParameterivNV},
{"glVideoCaptureStreamParameterfvNV", (void *)glwrap_glVideoCaptureStreamParameterfvNV},
{"glVideoCaptureStreamParameterdvNV", (void *)glwrap_glVideoCaptureStreamParameterdvNV},
{"glViewportSwizzleNV", (void *)glwrap_glViewportSwizzleNV},
{"glFramebufferTextureMultiviewOVR", (void *)glwrap_glFramebufferTextureMultiviewOVR},
{"glHintPGI", (void *)glwrap_glHintPGI},
{"glDetailTexFuncSGIS", (void *)glwrap_glDetailTexFuncSGIS},
{"glGetDetailTexFuncSGIS", (void *)glwrap_glGetDetailTexFuncSGIS},
{"glFogFuncSGIS", (void *)glwrap_glFogFuncSGIS},
{"glGetFogFuncSGIS", (void *)glwrap_glGetFogFuncSGIS},
{"glSampleMaskSGIS", (void *)glwrap_glSampleMaskSGIS},
{"glSamplePatternSGIS", (void *)glwrap_glSamplePatternSGIS},
{"glPixelTexGenParameteriSGIS", (void *)glwrap_glPixelTexGenParameteriSGIS},
{"glPixelTexGenParameterivSGIS", (void *)glwrap_glPixelTexGenParameterivSGIS},
{"glPixelTexGenParameterfSGIS", (void *)glwrap_glPixelTexGenParameterfSGIS},
{"glPixelTexGenParameterfvSGIS", (void *)glwrap_glPixelTexGenParameterfvSGIS},
{"glGetPixelTexGenParameterivSGIS", (void *)glwrap_glGetPixelTexGenParameterivSGIS},
{"glGetPixelTexGenParameterfvSGIS", (void *)glwrap_glGetPixelTexGenParameterfvSGIS},
{"glPointParameterfSGIS", (void *)glwrap_glPointParameterfSGIS},
{"glPointParameterfvSGIS", (void *)glwrap_glPointParameterfvSGIS},
{"glSharpenTexFuncSGIS", (void *)glwrap_glSharpenTexFuncSGIS},
{"glGetSharpenTexFuncSGIS", (void *)glwrap_glGetSharpenTexFuncSGIS},
{"glTexImage4DSGIS", (void *)glwrap_glTexImage4DSGIS},
{"glTexSubImage4DSGIS", (void *)glwrap_glTexSubImage4DSGIS},
{"glTextureColorMaskSGIS", (void *)glwrap_glTextureColorMaskSGIS},
{"glGetTexFilterFuncSGIS", (void *)glwrap_glGetTexFilterFuncSGIS},
{"glTexFilterFuncSGIS", (void *)glwrap_glTexFilterFuncSGIS},
{"glAsyncMarkerSGIX", (void *)glwrap_glAsyncMarkerSGIX},
{"glFinishAsyncSGIX", (void *)glwrap_glFinishAsyncSGIX},
{"glPollAsyncSGIX", (void *)glwrap_glPollAsyncSGIX},
{"glGenAsyncMarkersSGIX", (void *)glwrap_glGenAsyncMarkersSGIX},
{"glDeleteAsyncMarkersSGIX", (void *)glwrap_glDeleteAsyncMarkersSGIX},
{"glIsAsyncMarkerSGIX", (void *)glwrap_glIsAsyncMarkerSGIX},
{"glFlushRasterSGIX", (void *)glwrap_glFlushRasterSGIX},
{"glFragmentColorMaterialSGIX", (void *)glwrap_glFragmentColorMaterialSGIX},
{"glFragmentLightfSGIX", (void *)glwrap_glFragmentLightfSGIX},
{"glFragmentLightfvSGIX", (void *)glwrap_glFragmentLightfvSGIX},
{"glFragmentLightiSGIX", (void *)glwrap_glFragmentLightiSGIX},
{"glFragmentLightivSGIX", (void *)glwrap_glFragmentLightivSGIX},
{"glFragmentLightModelfSGIX", (void *)glwrap_glFragmentLightModelfSGIX},
{"glFragmentLightModelfvSGIX", (void *)glwrap_glFragmentLightModelfvSGIX},
{"glFragmentLightModeliSGIX", (void *)glwrap_glFragmentLightModeliSGIX},
{"glFragmentLightModelivSGIX", (void *)glwrap_glFragmentLightModelivSGIX},
{"glFragmentMaterialfSGIX", (void *)glwrap_glFragmentMaterialfSGIX},
{"glFragmentMaterialfvSGIX", (void *)glwrap_glFragmentMaterialfvSGIX},
{"glFragmentMaterialiSGIX", (void *)glwrap_glFragmentMaterialiSGIX},
{"glFragmentMaterialivSGIX", (void *)glwrap_glFragmentMaterialivSGIX},
{"glGetFragmentLightfvSGIX", (void *)glwrap_glGetFragmentLightfvSGIX},
{"glGetFragmentLightivSGIX", (void *)glwrap_glGetFragmentLightivSGIX},
{"glGetFragmentMaterialfvSGIX", (void *)glwrap_glGetFragmentMaterialfvSGIX},
{"glGetFragmentMaterialivSGIX", (void *)glwrap_glGetFragmentMaterialivSGIX},
{"glLightEnviSGIX", (void *)glwrap_glLightEnviSGIX},
{"glFrameZoomSGIX", (void *)glwrap_glFrameZoomSGIX},
{"glIglooInterfaceSGIX", (void *)glwrap_glIglooInterfaceSGIX},
{"glGetInstrumentsSGIX", (void *)glwrap_glGetInstrumentsSGIX},
{"glInstrumentsBufferSGIX", (void *)glwrap_glInstrumentsBufferSGIX},
{"glPollInstrumentsSGIX", (void *)glwrap_glPollInstrumentsSGIX},
{"glReadInstrumentsSGIX", (void *)glwrap_glReadInstrumentsSGIX},
{"glStartInstrumentsSGIX", (void *)glwrap_glStartInstrumentsSGIX},
{"glStopInstrumentsSGIX", (void *)glwrap_glStopInstrumentsSGIX},
{"glGetListParameterfvSGIX", (void *)glwrap_glGetListParameterfvSGIX},
{"glGetListParameterivSGIX", (void *)glwrap_glGetListParameterivSGIX},
{"glListParameterfSGIX", (void *)glwrap_glListParameterfSGIX},
{"glListParameterfvSGIX", (void *)glwrap_glListParameterfvSGIX},
{"glListParameteriSGIX", (void *)glwrap_glListParameteriSGIX},
{"glListParameterivSGIX", (void *)glwrap_glListParameterivSGIX},
{"glPixelTexGenSGIX", (void *)glwrap_glPixelTexGenSGIX},
{"glDeformationMap3dSGIX", (void *)glwrap_glDeformationMap3dSGIX},
{"glDeformationMap3fSGIX", (void *)glwrap_glDeformationMap3fSGIX},
{"glDeformSGIX", (void *)glwrap_glDeformSGIX},
{"glLoadIdentityDeformationMapSGIX", (void *)glwrap_glLoadIdentityDeformationMapSGIX},
{"glReferencePlaneSGIX", (void *)glwrap_glReferencePlaneSGIX},
{"glSpriteParameterfSGIX", (void *)glwrap_glSpriteParameterfSGIX},
{"glSpriteParameterfvSGIX", (void *)glwrap_glSpriteParameterfvSGIX},
{"glSpriteParameteriSGIX", (void *)glwrap_glSpriteParameteriSGIX},
{"glSpriteParameterivSGIX", (void *)glwrap_glSpriteParameterivSGIX},
{"glTagSampleBufferSGIX", (void *)glwrap_glTagSampleBufferSGIX},
{"glColorTableSGI", (void *)glwrap_glColorTableSGI},
{"glColorTableParameterfvSGI", (void *)glwrap_glColorTableParameterfvSGI},
{"glColorTableParameterivSGI", (void *)glwrap_glColorTableParameterivSGI},
{"glCopyColorTableSGI", (void *)glwrap_glCopyColorTableSGI},
{"glGetColorTableSGI", (void *)glwrap_glGetColorTableSGI},
{"glGetColorTableParameterfvSGI", (void *)glwrap_glGetColorTableParameterfvSGI},
{"glGetColorTableParameterivSGI", (void *)glwrap_glGetColorTableParameterivSGI},
{"glFinishTextureSUNX", (void *)glwrap_glFinishTextureSUNX},
{"glGlobalAlphaFactorbSUN", (void *)glwrap_glGlobalAlphaFactorbSUN},
{"glGlobalAlphaFactorsSUN", (void *)glwrap_glGlobalAlphaFactorsSUN},
{"glGlobalAlphaFactoriSUN", (void *)glwrap_glGlobalAlphaFactoriSUN},
{"glGlobalAlphaFactorfSUN", (void *)glwrap_glGlobalAlphaFactorfSUN},
{"glGlobalAlphaFactordSUN", (void *)glwrap_glGlobalAlphaFactordSUN},
{"glGlobalAlphaFactorubSUN", (void *)glwrap_glGlobalAlphaFactorubSUN},
{"glGlobalAlphaFactorusSUN", (void *)glwrap_glGlobalAlphaFactorusSUN},
{"glGlobalAlphaFactoruiSUN", (void *)glwrap_glGlobalAlphaFactoruiSUN},
{"glDrawMeshArraysSUN", (void *)glwrap_glDrawMeshArraysSUN},
{"glReplacementCodeuiSUN", (void *)glwrap_glReplacementCodeuiSUN},
{"glReplacementCodeusSUN", (void *)glwrap_glReplacementCodeusSUN},
{"glReplacementCodeubSUN", (void *)glwrap_glReplacementCodeubSUN},
{"glReplacementCodeuivSUN", (void *)glwrap_glReplacementCodeuivSUN},
{"glReplacementCodeusvSUN", (void *)glwrap_glReplacementCodeusvSUN},
{"glReplacementCodeubvSUN", (void *)glwrap_glReplacementCodeubvSUN},
{"glReplacementCodePointerSUN", (void *)glwrap_glReplacementCodePointerSUN},
{"glColor4ubVertex2fSUN", (void *)glwrap_glColor4ubVertex2fSUN},
{"glColor4ubVertex2fvSUN", (void *)glwrap_glColor4ubVertex2fvSUN},
{"glColor4ubVertex3fSUN", (void *)glwrap_glColor4ubVertex3fSUN},
{"glColor4ubVertex3fvSUN", (void *)glwrap_glColor4ubVertex3fvSUN},
{"glColor3fVertex3fSUN", (void *)glwrap_glColor3fVertex3fSUN},
{"glColor3fVertex3fvSUN", (void *)glwrap_glColor3fVertex3fvSUN},
{"glNormal3fVertex3fSUN", (void *)glwrap_glNormal3fVertex3fSUN},
{"glNormal3fVertex3fvSUN", (void *)glwrap_glNormal3fVertex3fvSUN},
{"glColor4fNormal3fVertex3fSUN", (void *)glwrap_glColor4fNormal3fVertex3fSUN},
{"glColor4fNormal3fVertex3fvSUN", (void *)glwrap_glColor4fNormal3fVertex3fvSUN},
{"glTexCoord2fVertex3fSUN", (void *)glwrap_glTexCoord2fVertex3fSUN},
{"glTexCoord2fVertex3fvSUN", (void *)glwrap_glTexCoord2fVertex3fvSUN},
{"glTexCoord4fVertex4fSUN", (void *)glwrap_glTexCoord4fVertex4fSUN},
{"glTexCoord4fVertex4fvSUN", (void *)glwrap_glTexCoord4fVertex4fvSUN},
{"glTexCoord2fColor4ubVertex3fSUN", (void *)glwrap_glTexCoord2fColor4ubVertex3fSUN},
{"glTexCoord2fColor4ubVertex3fvSUN", (void *)glwrap_glTexCoord2fColor4ubVertex3fvSUN},
{"glTexCoord2fColor3fVertex3fSUN", (void *)glwrap_glTexCoord2fColor3fVertex3fSUN},
{"glTexCoord2fColor3fVertex3fvSUN", (void *)glwrap_glTexCoord2fColor3fVertex3fvSUN},
{"glTexCoord2fNormal3fVertex3fSUN", (void *)glwrap_glTexCoord2fNormal3fVertex3fSUN},
{"glTexCoord2fNormal3fVertex3fvSUN", (void *)glwrap_glTexCoord2fNormal3fVertex3fvSUN},
{"glTexCoord2fColor4fNormal3fVertex3fSUN", (void *)glwrap_glTexCoord2fColor4fNormal3fVertex3fSUN},
{"glTexCoord2fColor4fNormal3fVertex3fvSUN", (void *)glwrap_glTexCoord2fColor4fNormal3fVertex3fvSUN},
{"glTexCoord4fColor4fNormal3fVertex4fSUN", (void *)glwrap_glTexCoord4fColor4fNormal3fVertex4fSUN},
{"glTexCoord4fColor4fNormal3fVertex4fvSUN", (void *)glwrap_glTexCoord4fColor4fNormal3fVertex4fvSUN},
{"glReplacementCodeuiVertex3fSUN", (void *)glwrap_glReplacementCodeuiVertex3fSUN},
{"glReplacementCodeuiVertex3fvSUN", (void *)glwrap_glReplacementCodeuiVertex3fvSUN},
{"glReplacementCodeuiColor4ubVertex3fSUN", (void *)glwrap_glReplacementCodeuiColor4ubVertex3fSUN},
{"glReplacementCodeuiColor4ubVertex3fvSUN", (void *)glwrap_glReplacementCodeuiColor4ubVertex3fvSUN},
{"glReplacementCodeuiColor3fVertex3fSUN", (void *)glwrap_glReplacementCodeuiColor3fVertex3fSUN},
{"glReplacementCodeuiColor3fVertex3fvSUN", (void *)glwrap_glReplacementCodeuiColor3fVertex3fvSUN},
{"glReplacementCodeuiNormal3fVertex3fSUN", (void *)glwrap_glReplacementCodeuiNormal3fVertex3fSUN},
{"glReplacementCodeuiNormal3fVertex3fvSUN", (void *)glwrap_glReplacementCodeuiNormal3fVertex3fvSUN},
{"glReplacementCodeuiColor4fNormal3fVertex3fSUN", (void *)glwrap_glReplacementCodeuiColor4fNormal3fVertex3fSUN},
{"glReplacementCodeuiColor4fNormal3fVertex3fvSUN", (void *)glwrap_glReplacementCodeuiColor4fNormal3fVertex3fvSUN},
{"glReplacementCodeuiTexCoord2fVertex3fSUN", (void *)glwrap_glReplacementCodeuiTexCoord2fVertex3fSUN},
{"glReplacementCodeuiTexCoord2fVertex3fvSUN", (void *)glwrap_glReplacementCodeuiTexCoord2fVertex3fvSUN},
{"glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN", (void *)glwrap_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN},
{"glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN", (void *)glwrap_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN},
{"glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN", (void *)glwrap_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN},
{"glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN", (void *)glwrap_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN},
};